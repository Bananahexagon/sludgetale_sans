const P=(t,i)=>{const d=(a,n,r)=>{a()?(t(),n(),i(),requestAnimationFrame(()=>d(a,n,r))):r()},w=(a,n)=>new Promise(r=>{d(a,n,r)}),p=(a,n,r,l)=>{a(r)?(t(),n(r),i(),requestAnimationFrame(()=>p(a,n,r+1,l))):l()},s=(a,n,r)=>new Promise(l=>{p(n,r,a,l)}),h=a=>{t(),a(),i(),requestAnimationFrame(()=>h(a))};return{frameWhile:w,frameFor:s,frameLoop:h}},A=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"determination_black",src:"./assets/images/font/determination_black.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"enemy",src:"./assets/images/enemy.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"image",name:"speech_bubble",src:"./assets/images/speech_bubble.png"},{type:"image",name:"attack_gauge",src:"./assets/images/attack_gauge.png"},{type:"image",name:"attack_bar_0",src:"./assets/images/attack_bar_0.png"},{type:"image",name:"attack_bar_1",src:"./assets/images/attack_bar_1.png"},{type:"image",name:"slash_0",src:"./assets/images/slash_0.png"},{type:"image",name:"slash_1",src:"./assets/images/slash_1.png"},{type:"image",name:"slash_2",src:"./assets/images/slash_2.png"},{type:"image",name:"slash_3",src:"./assets/images/slash_3.png"},{type:"image",name:"slash_4",src:"./assets/images/slash_4.png"},{type:"image",name:"slash_5",src:"./assets/images/slash_5.png"},{type:"image",name:"damage_red",src:"./assets/images/font/damage_red.png"},{type:"image",name:"damage_miss",src:"./assets/images/damage_miss.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"},{type:"audio",name:"cursor_move",src:"./assets/audios/cursor_move.wav"},{type:"audio",name:"cursor_confirm",src:"./assets/audios/cursor_confirm.wav"},{type:"audio",name:"talk_default",src:"./assets/audios/talk_default.wav"},{type:"audio",name:"text",src:"./assets/audios/text.wav"},{type:"audio",name:"heal",src:"./assets/audios/heal.wav"},{type:"audio",name:"slash",src:"./assets/audios/slash.wav"},{type:"audio",name:"e_damage",src:"./assets/audios/e_damage.wav"},{type:"audio",name:"megalovania",src:"./assets/audios/megalovania.wav"},{type:"audio",name:"dust",src:"./assets/audios/dust.wav"}],K=async t=>{const i={},d={},w={},p=A,s=[];return p.forEach(h=>s.push(new Promise(a=>{switch(h.type){case"image":{const n=new Image;n.src=h.src,n.onload=()=>{i[h.name]=n,a()}}break;case"audio":{const n=new Audio(h.src);n.autoplay=!1,n.muted=!0,n.addEventListener("loadeddata",()=>{n.muted=!1,(async()=>{const l=await(await fetch(h.src)).arrayBuffer();d[h.name]={ctx:await t.decodeAudioData(l),data:n,time:1/0},n.onload=()=>a()})().then(a)})}break;case"font":(async()=>{const l=await(await(await fetch(h.src)).text()).match(/url\(.+?\)/g);if(!l)throw new Error("フォントが見つかりませんでした");const e=[];l.forEach(o=>{e.push((async()=>{const c=new FontFace(h.name,o);await c.load(),w[h.name]=c,await document.fonts.add(c)})())}),Promise.all(e)})().then(a);break}}))),await Promise.all(s),{Images:i,Audios:d,Fonts:w}},x=t=>Math.sin(t/360*Math.PI*2),v=t=>Math.cos(t/360*Math.PI*2),R=(t,i,d,w,p,s)=>{const h=(l,e,o,c=0,u=100,y=1,m="center",_=1,g,f=!1)=>{if(f){const b=d[l],[L,$,M,q]=g===void 0?[0,0,b.width,b.height]:[g.left,g.top,g.width,g.height];switch(i.globalAlpha=y,m){case"center":i.save(),i.translate(e*p.display_quality,-o*p.display_quality+t.height),i.rotate(c*Math.PI/180),i.drawImage(b,L,$,M,q,-M*_*u/200*p.display_quality,-q*u/200*p.display_quality,M*_*u/100*p.display_quality,q*u/100*p.display_quality),i.restore();break;case"start":i.save(),i.translate(e*p.display_quality,-o*p.display_quality+t.height),i.rotate(c*Math.PI/180),i.drawImage(b,L,$,M,q,0,0,M*_*u/100*p.display_quality,q*u/100*p.display_quality),i.restore()}}else{const b=(v(s.d)*e-x(s.d)*o+s.x)*s.size/100,L=(x(s.d)*e+v(s.d)*o+s.y)*s.size/100,$=c+s.d;h(l,b,L,$,u*s.size/100,y,m,_,g,!0)}};return{stamp:h,drawRect:(l,e,o,c,u,y=0,m,_="center")=>{switch(i.globalAlpha=m===void 0?1:m,i.save(),_){case"center++":i.translate(l*p.display_quality,-e*p.display_quality+t.height),i.rotate(y*Math.PI/180),i.beginPath(),i.rect(-o/2*p.display_quality,-c/2*p.display_quality,o*p.display_quality,c*p.display_quality);break;case"center":i.translate((l-o/2)*p.display_quality,-(e-c/2)*p.display_quality+t.height),i.rotate(y*Math.PI/180),i.beginPath(),i.rect(0,0,o*p.display_quality,-c*p.display_quality);break;case"start":default:i.translate(l*p.display_quality,-e*p.display_quality+t.height),i.rotate(y*Math.PI/180),i.beginPath(),i.rect(0,0,o*p.display_quality,-c*p.display_quality);break}i.fillStyle=u,i.fill(),i.restore()},drawLine:(l,e,o,c,u,y,m=0)=>{switch(i.globalAlpha=1,i.beginPath(),m){case 0:i.moveTo((l-c*Math.sin(o)/2)*p.display_quality,-(e+c*Math.cos(o)/2)*p.display_quality+t.height),i.lineTo((l+c*Math.sin(o)/2)*p.display_quality,-(e-c*Math.cos(o)/2)*p.display_quality+t.height);break;case 1:i.moveTo(l*p.display_quality,-e*p.display_quality+t.height),i.lineTo((l+c*Math.sin(o))*p.display_quality,-(e-c*Math.cos(o))*p.display_quality+t.height);break}i.strokeStyle=y,i.lineWidth=u*p.display_quality,i.stroke()},drawText:(l,e,o,c,u,y="serif",m="left")=>{i.globalAlpha=1;const[_,g]=[e*p.display_quality,-o*p.display_quality+t.height];i.font=`${c*p.display_quality}px ${y}`,i.textAlign=m,i.fillStyle=u,i.fillText(l,_,g)}}},D=t=>{class i{constructor(w,p,s=0,h=100,a="",n=0,r=1,l){this.x=w,this.y=p,this.d=s,this.size=h,this.costume=a,this.alpha=n,this.width=r,this.act_=l}stamp(){this.alpha!=0&&t.stamp(this.costume,this.x,this.y,this.d,this.size,this.alpha,"center",this.width)}move(w){this.x+=x(this.d)*w,this.y+=v(this.d)*w}act(){(this.act_||(()=>{}))(this)}}return i},F=(t,i,d)=>({raw_to_stage:(p,s,h=0)=>{const a=t.getBoundingClientRect(),n=((p-a.left)/d.size*100-d.x)*i.stage_width/i.display_width,r=(i.display_height-((s-a.top)/d.size*100-d.y))*i.stage_height/i.display_height,l=h+d.d;return{x:n,y:r,d:l}}}),I=t=>{const i=new(window.AudioContext||window.webkitAudioContext);return{play:(p,s=0,h=1)=>{if(s<=t[p].time){const a=i.createGain(),n=i.createBufferSource();n.buffer=t[p].ctx,a.gain.setValueAtTime(h,i.currentTime),n.connect(a),a.connect(i.destination),n.start(0),t[p].time=0}},tick:()=>{for(const p in t)t[p].time++}}},S=async t=>{const i=document.getElementById(t.canvas_name);i.height=t.stage_height*t.display_quality,i.width=t.stage_width*t.display_quality;const d=i.getContext("2d"),w=new(window.AudioContext||window.webkitAudioContext),{Images:p,Audios:s,Fonts:h}=await K(w),a={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1,f:{up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1}},n={x:0,y:0,clicking:!1,is_in_rect(f,b,L,$,M="center"){switch(M){case"center":return f-L/2<this.x&&this.x<f+L/2&&b-$/2<this.y&&this.y<b+$/2;case"start":default:return f<this.x&&this.x<f+L&&b<this.y&&this.y<b+$}}},r={canvas:{size:100,x:0,y:0,d:0}},l=R(i,d,p,h,t,r.canvas),e=I(s),o=D(l);d.imageSmoothingEnabled=!1;const c=F(i,t,r.canvas);window.addEventListener("keydown",f=>{switch(f.key){case"ArrowUp":a.up=!0,a.f.up=!0;break;case"ArrowDown":a.down=!0,a.f.down=!0;break;case"ArrowLeft":a.left=!0,a.f.left=!0;break;case"ArrowRight":a.right=!0,a.f.right=!0;break;case"z":case"Z":a.z=!0,a.f.z=!0;break;case"x":case"X":a.x=!0,a.f.x=!0;break;case"c":case"C":a.c=!0,a.f.c=!0;break;case"d":case"D":a.d=!0,a.f.d=!0;break}}),window.addEventListener("keyup",f=>{switch(f.key){case"ArrowUp":a.up=!1;break;case"ArrowDown":a.down=!1;break;case"ArrowLeft":a.left=!1;break;case"ArrowRight":a.right=!1;break;case"z":case"Z":a.z=!1;break;case"x":case"X":a.x=!1;break;case"c":case"C":a.c=!1;break;case"d":case"D":a.d=!1;break}}),i.addEventListener("mousedown",f=>{n.clicking=!0;const b=c.raw_to_stage(f.x,f.y);n.x=b.x,n.y=b.y}),i.addEventListener("mousemove",f=>{const b=c.raw_to_stage(f.x,f.y);n.x=b.x,n.y=b.y}),i.addEventListener("mouseup",f=>{n.clicking=!1;const b=c.raw_to_stage(f.x,f.y);n.x=b.x,n.y=b.y});let u,y;{let f={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1};u=()=>{["up","down","left","right","z","x","c","d"].forEach(b=>{f[b]&&(a.f[b]=!1)}),f={...a.f}},y=()=>{e.tick()}}const{frameWhile:m,frameFor:_,frameLoop:g}=P(u,y);return{canvas:i,ctx:d,Images:p,Audios:s,Fonts:h,inputKeys:a,inputMouse:n,props:r,cLib:l,aLib:e,Sprite:o,for:_,while:m,loop:g}},j=2,B=640,G=480,C=800,T=400,W="canvas",U={display_quality:j,stage_width:B,stage_height:G,display_width:C,display_height:T,canvas_name:W},V=(t,i,d,w)=>{let p={};const s=class z extends d{constructor(r,l,e,o,c,u,y,m,_,g){super(r,l,e,o,void 0,1,1),this.start_x=r,this.start_y=l,this.start_d=e,this.move_x=u,this.move_y=y,this.move_d=m,this.start_len=c,this.move_len=_,this.len=c,this.age=0,this.id=z.current_id,this.b_width=o,this.life=g,p[this.id]=this,z.current_id++}move_self(){this.age++,this.x=this.start_x+z.get_move(this.move_x,this.age),this.y=this.start_y+z.get_move(this.move_y,this.age),this.d=this.start_d+z.get_move(this.move_d,this.age),this.len=this.start_len+z.get_move(this.move_len,this.age)}draw(){v(this.d),t.stamp("bone_head_white",this.x+v(this.d)*this.b_width*8/6,this.y-x(this.d)*this.b_width*8/6,this.d+180,this.b_width*100/6,1,"start"),t.drawRect(this.x+x(this.d)*this.b_width*6/6,this.y+v(this.d)*this.b_width*6/6,this.b_width,this.len+this.b_width*2/6,"white",this.d,1,"start"),t.stamp("bone_head_white",this.x+x(this.d)*(this.len+this.b_width*14/6)-v(this.d)*this.b_width*2/6,this.y+v(this.d)*(this.len+this.b_width*14/6)+x(this.d)*this.b_width*2/6,this.d,this.b_width*100/6,1,"start")}judge(){{const r=w.soul.x-this.x,l=w.soul.y-this.y,e=r*v(this.d)+l*-x(this.d),o=l*v(this.d)+r*x(this.d);this.len+this.b_width*14/6>o&&o>0&&this.b_width>e&&e>0&&w.damage(1)}}static process(){for(const r in p){const l=p[r];l.age<l.life?(l.move_self(),l.draw(),l.judge()):delete p[r]}}static get_move(r,l){if(typeof r=="number")return r*l;switch(r.type){case"sin":case"cos":return x(r.cycle*l)*r.amp;case"custom":return r.fn(l)}}};s.current_id=0;let h=s;return{boneDict:p,normal:h,process:()=>{h.process()}}},X={height_basic:15,width_basic:2,name:"determination"},Y={left:10,up:34,width:6,height:9,gap:0},Z={left:20,up:34,width:6,height:9,gap:0},N={left:30,up:34,width:6,height:9,gap:0},Q={left:40,up:34,width:6,height:9,gap:0},H={left:50,up:34,width:6,height:9,gap:0},J={left:60,up:34,width:6,height:9,gap:0},O={left:70,up:34,width:6,height:9,gap:0},tt={left:80,up:34,width:6,height:9,gap:0},et={left:90,up:34,width:6,height:9,gap:0},st={left:100,up:34,width:6,height:9,gap:0},it={left:110,up:34,width:6,height:9,gap:0},at={left:120,up:34,width:6,height:9,gap:0},ht={left:130,up:34,width:7,height:9,gap:0},nt={left:140,up:34,width:6,height:9,gap:0},lt={left:150,up:34,width:6,height:9,gap:0},pt={left:0,up:50,width:6,height:9,gap:0},ot={left:10,up:50,width:6,height:9,gap:0},rt={left:20,up:50,width:6,height:9,gap:0},ct={left:30,up:50,width:6,height:9,gap:0},gt={left:40,up:50,width:6,height:9,gap:0},dt={left:50,up:50,width:6,height:9,gap:0},ut={left:60,up:50,width:6,height:9,gap:0},wt={left:70,up:50,width:7,height:9,gap:0},_t={left:80,up:50,width:6,height:9,gap:0},ft={left:90,up:50,width:6,height:9,gap:0},mt={left:100,up:50,width:6,height:9,gap:0},yt={left:10,up:68,width:6,height:7,gap:2},bt={left:20,up:66,width:6,height:9,gap:0},xt={left:30,up:68,width:6,height:7,gap:2},vt={left:40,up:66,width:6,height:9,gap:0},kt={left:50,up:68,width:6,height:7,gap:2},$t={left:60,up:66,width:6,height:9,gap:0},Lt={left:70,up:68,width:6,height:10,gap:2},Mt={left:80,up:66,width:6,height:9,gap:0},qt={left:90,up:65,width:6,height:10,gap:-1},zt={left:100,up:65,width:6,height:13,gap:2},Et={left:110,up:66,width:6,height:9,gap:0},Pt={left:120,up:66,width:6,height:9,gap:0},At={left:130,up:68,width:7,height:7,gap:2},Kt={left:140,up:68,width:6,height:7,gap:2},Rt={left:150,up:68,width:6,height:7,gap:2},Dt={left:0,up:84,width:6,height:10,gap:2},Ft={left:10,up:84,width:6,height:10,gap:2},It={left:20,up:84,width:6,height:7,gap:2},St={left:30,up:84,width:6,height:7,gap:2},jt={left:40,up:82,width:6,height:9,gap:0},Bt={left:50,up:84,width:6,height:7,gap:2},Gt={left:60,up:84,width:6,height:7,gap:2},Ct={left:70,up:84,width:7,height:7,gap:2},Tt={left:80,up:84,width:6,height:7,gap:2},Wt={left:90,up:84,width:6,height:10,gap:2},Ut={left:100,up:84,width:6,height:7,gap:2},Vt={left:0,up:0,width:6,height:1,gap:0},Xt={left:150,up:82,width:6,height:9,gap:0},Yt={left:40,up:0,width:6,height:13,gap:0},Zt={left:150,up:61,width:4,height:1,gap:8},Nt={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:X,A:Y,B:Z,C:N,D:Q,E:H,F:J,G:O,H:tt,I:et,J:st,K:it,L:at,M:ht,N:nt,O:lt,P:pt,Q:ot,R:rt,S:ct,T:gt,U:dt,V:ut,W:wt,X:_t,Y:ft,Z:mt,a:yt,b:bt,c:xt,d:vt,e:kt,f:$t,g:Lt,h:Mt,i:qt,j:zt,k:Et,l:Pt,m:At,n:Kt,o:Rt,p:Dt,q:Ft,r:It,s:St,t:jt,u:Bt,v:Gt,w:Ct,x:Tt,y:Wt,z:Ut,space:Vt,irregular:Xt,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Yt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:0},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:3},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Zt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Qt={height_basic:6,width_basic:1,name:"status"},Ht={left:6,up:14,width:4,height:5,gap:0},Jt={left:12,up:14,width:4,height:5,gap:0},Ot={left:18,up:14,width:4,height:5,gap:0},te={left:24,up:14,width:4,height:5,gap:0},ee={left:30,up:14,width:4,height:5,gap:0},se={left:36,up:14,width:4,height:5,gap:0},ie={left:42,up:14,width:4,height:5,gap:0},ae={left:48,up:14,width:4,height:5,gap:0},he={left:54,up:14,width:4,height:5,gap:0},ne={left:60,up:14,width:4,height:5,gap:0},le={left:66,up:14,width:4,height:5,gap:0},pe={left:72,up:14,width:4,height:5,gap:0},oe={left:78,up:14,width:5,height:5,gap:0},re={left:84,up:14,width:4,height:5,gap:0},ce={left:90,up:14,width:4,height:5,gap:0},ge={left:0,up:21,width:4,height:5,gap:0},de={left:6,up:21,width:4,height:5,gap:0},ue={left:12,up:21,width:4,height:5,gap:0},we={left:18,up:21,width:4,height:5,gap:0},_e={left:24,up:21,width:4,height:5,gap:0},fe={left:30,up:21,width:4,height:5,gap:0},me={left:36,up:21,width:4,height:5,gap:0},ye={left:42,up:21,width:5,height:5,gap:0},be={left:48,up:21,width:4,height:5,gap:0},xe={left:54,up:21,width:4,height:5,gap:0},ve={left:60,up:21,width:4,height:5,gap:0},ke={left:6,up:28,width:4,height:5,gap:0},$e={left:12,up:28,width:4,height:5,gap:0},Le={left:18,up:28,width:4,height:5,gap:0},Me={left:24,up:28,width:4,height:5,gap:0},qe={left:30,up:28,width:4,height:5,gap:0},ze={left:36,up:28,width:4,height:5,gap:0},Ee={left:42,up:28,width:4,height:5,gap:0},Pe={left:48,up:28,width:4,height:5,gap:0},Ae={left:54,up:28,width:4,height:5,gap:0},Ke={left:60,up:28,width:4,height:5,gap:0},Re={left:66,up:28,width:4,height:5,gap:0},De={left:72,up:28,width:4,height:5,gap:0},Fe={left:78,up:28,width:5,height:5,gap:0},Ie={left:84,up:28,width:4,height:5,gap:0},Se={left:90,up:28,width:4,height:5,gap:0},je={left:0,up:35,width:4,height:5,gap:0},Be={left:6,up:35,width:4,height:5,gap:0},Ge={left:12,up:35,width:4,height:5,gap:0},Ce={left:18,up:35,width:4,height:5,gap:0},Te={left:24,up:35,width:4,height:5,gap:0},We={left:30,up:35,width:4,height:5,gap:0},Ue={left:36,up:35,width:4,height:5,gap:0},Ve={left:42,up:35,width:5,height:5,gap:0},Xe={left:48,up:35,width:4,height:5,gap:0},Ye={left:54,up:35,width:4,height:5,gap:0},Ze={left:60,up:35,width:4,height:5,gap:0},Ne={left:0,up:0,width:4,height:1,gap:0},Qe={left:90,up:35,width:4,height:5,gap:0},He={left:24,up:0,width:5,height:5,gap:0},Je={left:90,up:25,width:4,height:1,gap:4},Oe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Qt,A:Ht,B:Jt,C:Ot,D:te,E:ee,F:se,G:ie,H:ae,I:he,J:ne,K:le,L:pe,M:oe,N:re,O:ce,P:ge,Q:de,R:ue,S:we,T:_e,U:fe,V:me,W:ye,X:be,Y:xe,Z:ve,a:ke,b:$e,c:Le,d:Me,e:qe,f:ze,g:Ee,h:Pe,i:Ae,j:Ke,k:Re,l:De,m:Fe,n:Ie,o:Se,p:je,q:Be,r:Ge,s:Ce,t:Te,u:We,v:Ue,w:Ve,x:Xe,y:Ye,z:Ze,space:Ne,irregular:Qe,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:He,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Je,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},ts={height_basic:5,width_basic:1,name:"damage"},es={left:77,up:0,width:7,height:7,gap:0},ss={0:{left:0,up:0,width:7,height:7,gap:0},1:{left:8,up:0,width:4,height:7,gap:0},2:{left:13,up:0,width:7,height:7,gap:0},3:{left:21,up:0,width:7,height:7,gap:0},4:{left:29,up:0,width:7,height:7,gap:0},5:{left:37,up:0,width:7,height:7,gap:0},6:{left:45,up:0,width:7,height:7,gap:0},7:{left:53,up:0,width:7,height:7,gap:0},8:{left:61,up:0,width:7,height:7,gap:0},9:{left:69,up:0,width:7,height:7,gap:0},props:ts,irregular:es},is=(t,i,d)=>{const w={en:Nt,status:Oe,damage:ss};let p=0,s={};class h{constructor(o){this.name=o}delete(){delete s[this.name]}}class a extends h{constructor(o,c,u,y,m,_,g){super(o),this._={all_str:g.reduce((f,b)=>f+b.str,""),now:[{str:"",color:g[0].color,spacing_x:g[0].spacing_x,spacing_y:g[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=c,this.y=u,this.direction=y,this.size=m,this.data=g,this.font=(f=>{switch(f){case"status":return w.status;default:return w.en}})(_),s[o=="_"?`auto$${p++}`:o]=this,this.process()}write(){const o=this.size,c=this.direction*Math.PI/180,u=this._.now.reduce((f,b)=>f+b.str.length,0);let y=0,m=0,_=0;const g=f=>f in this.font?this.font[f]:this.font.space;return this._.now.forEach(f=>{f.str.split("").forEach(L=>{const $=g(L);L==`
`?(y=0,m+=this.font.props.height_basic+f.spacing_y):(t.stamp(this.font.props.name+"_"+f.color,this.x+(Math.cos(c)*y-Math.sin(c)*(m+$.gap/2))*o/100,this.y+(Math.sin(c)*y+Math.cos(c)*(m+$.gap/2))*o/100,this.direction,o,1,"start",1,{left:$.left,top:$.up,width:$.width,height:$.height}),_+1<u&&(y+=$.width+this.font.props.width_basic+f.spacing_x)),_++})}),this}process(){const o=this.data.reduce((c,u)=>c+u.str.length,0);if(this._.len_allow==o&&d.z){delete s[this.name];return}else d.x?(this._.len_allow=o,this._.current_char=o):this._.len_allow<o&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,o);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class n extends h{constructor(o,c,u,y,m,_,g,f,b,L,$="en",M){super(o),this.str_now="",this.len_now=0,this.str=c,this.x=u,this.y=y,this.direction=m,this.size=_,this.color=g,this.spacing_x=f,this.spacing_y=b,this.speed=L,this.font=(q=>{switch(q){case"status":return w.status;case"damage":return w.damage;default:return w.en}})($),this.len_allow=0,s[o=="_"?`auto$${p++}`:o]=this,this.voice=M,this.resolve=()=>{},this.promise=(()=>new Promise(q=>{this.resolve=q}))(),this.solved=!1,this.process()}write(){const o=this.str_now,c=this.size,u=this.direction*Math.PI/180;let y,m;[y,m]=[0,0];const _=g=>g in this.font?this.font[g]:this.font.space;for(let g=0;g<o.length;g++){const f=_(o[g]);o[g]==`
`?(y=0,m-=this.font.props.height_basic+this.spacing_y):(t.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(u)*y-Math.sin(u)*(m-f.gap))*c/100,this.y+(Math.sin(u)*y+Math.cos(u)*(m-f.gap))*c/100,this.direction,c,1,"start",1,{left:f.left,top:f.up,width:f.width,height:f.height}),g+1<o.length&&(y+=f.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.str.length<=this.len_allow&&d.z?(this.resolve(),this.solved=!0,delete s[this.name]):d.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed),this.str_now.length<Math.min(this.len_allow,this.str.length)){let o=!1;for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length],o=o||this.str[this.str_now.length]!==" ";this.voice&&o&&i.play(this.voice)}}}return{write:(e,o,c,u,y,m="white",_=0,g=0,f="en")=>{const b=new n("_",e,o,c,u,y,m,_,g,0,f);b.write(),b.delete()},Super:a,Plane:n,process:()=>{for(const e in s)s[e].process()},dict:s}},as=(t,i)=>{class d{constructor(h,a,n,r,l,e,o=4){this.dx=h,this.dy=a,this.dd=n,this.len=r,this.align=l,this.width=o,this.soul_size=6,this.relative=e||(()=>{const c=this.dd,u=i.x-this.dx;return(i.y-this.dy)*v(c)+u*x(c)>0?"plus":"minus"})()}judge(){const h=this.dd,a=i.x-this.dx,n=i.y-this.dy,r=a*v(h)+n*-x(h),l=n*v(h)+a*x(h);if(this.len/2>r&&r>-this.len/2){if(this.relative=="minus"&&l>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>l){const e=r*v(-h)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*x(-h),o=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-v(-h)+r*x(-h);i.x=e+this.dx,i.y=o+this.dy}}else l>0?this.relative="plus":this.relative="minus"}draw(){t.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class w{constructor(h,a,n,r=4){this.dx=h,this.dy=a,this.dd=n,this.width=r}judge(){const h=this.dd,a=i.x-this.dx,n=i.y-this.dy,r=a*v(h)+n*-x(h);if(n*v(h)+a*x(h)>-this.width){const e=r*v(-h)+this.width*x(-h),o=this.width*-v(-h)+r*x(-h);i.x=e+this.dx,i.y=o+this.dy}}draw(){const h=this.dx+320*x(this.dd),a=this.dy+320*v(this.dd);t.drawRect(h,a,640,640,"#ffffff88",this.dd,1,"center++")}}const p={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:5,walls:[],default(){this.center_x=320,this.center_y=240,this.dire=0,this.width=100,this.height=100,this.walls=[],p.init()},set(s,h,a,n,r){this.center_x=s||this.center_x,this.center_y=h||this.center_y,this.dire=a||this.dire,this.width=n||this.width,this.height=r||this.height,p.update()},draw(){this.walls.forEach(s=>{const h=s.dx+640*x(s.dd),a=s.dy+640*v(s.dd);t.drawRect(h,a,1280,1280,"#ffffff",s.dd,1,"center++")}),this.walls.forEach(s=>{const h=s.dx+640*x(s.dd),a=s.dy+640*v(s.dd);t.drawRect(h,a,1280-s.width*2,1280-s.width*2,"#000000",s.dd,1,"center++")})},judge(){this.walls.forEach(s=>{s.judge()})},update(){{const s=this.dire,h=this.center_x,a=this.center_y,n=this.walls[0];n.dd=s,n.dx=h+this.height/2*x(s),n.dy=a+this.height/2*v(s)}{const s=this.dire+90,h=this.center_x,a=this.center_y,n=this.walls[1];n.dd=s,n.dx=h+this.width/2*x(s),n.dy=a+this.width/2*v(s)}{const s=this.dire+180,h=this.center_x,a=this.center_y,n=this.walls[2];n.dd=s,n.dx=h+this.height/2*x(s),n.dy=a+this.height/2*v(s)}{const s=this.dire+270,h=this.center_x,a=this.center_y,n=this.walls[3];n.dd=s,n.dx=h+this.width/2*x(s),n.dy=a+this.width/2*v(s)}},init(){this.walls.push(new w(0,0,0,this.thickness)),this.walls.push(new w(0,0,90,this.thickness)),this.walls.push(new w(0,0,180,this.thickness)),this.walls.push(new w(0,0,270,this.thickness))}};return p.init(),{Wall:d,box:p}},hs=(t,i,d,w)=>{let p={};const s=class E extends d{constructor(r,l,e,o,c,u,y,m,_,g,f){super(o,c,u,y,"gb_1",1,m),this.s_x=o,this.s_y=c,this.s_d=u,this.t_x=r,this.t_y=l,this.t_d=e,this.c_t=_,this.b_s=g,this.b_d=f,this.gb_width=m,this.age=0,this.id=E.current_id,p[this.id]=this,E.current_id++,i.play("gb_charge",1)}move_self(){if(this.age<this.c_t){let r=(this.c_t-this.age)**4/this.c_t**4;this.x=r*this.s_x+(1-r)*this.t_x,this.y=r*this.s_y+(1-r)*this.t_y,this.d=r*this.s_d+(1-r)*this.t_d}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let r=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(r/2)}}draw(){this.b_s+this.c_t<this.age&&t.drawRect(this.x+x(this.d)*4800/-2,this.y+v(this.d)*4800/-2,this.width*this.size/5*(1+x(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const r=w.soul.x-this.x,l=w.soul.y-this.y,e=r*v(this.d)+l*-x(this.d),o=l*v(this.d)+r*x(this.d);this.b_s+this.c_t<=this.age&&0>o&&this.gb_width*this.size/10>e&&e>-this.gb_width*this.size/10&&w.damage(1)}}static process(){for(const r in p){const l=p[r];l.move_self(),l.draw(),l.judge(),l.age++,l.b_d+l.b_s==l.age&&i.play("gb_fire",1),l.b_d+l.b_s+l.c_t<=l.age&&delete p[r]}}};s.current_id=0;let h=s;return{gbDict:p,gb:h,process:()=>{h.process()}}},k={bgm:void 0,player:{attack:2500,lv:19,hp_max:92},enemy:{x:310,y:320,name:"dummy",hp:1e3},items:[{name:"test_food",heal:99,text:"You ate a test.",behavior:"default"}],enemy_speak:[`Lorem Ipsum dolor sit
amet.`],enemy_attack:[300],actions:[{name:"check",text:`Dummy 0 ATK 0 DEF
test enemy.`}]},ns=async()=>{const t=await S(U);let[i,d]=["menu","command"];const w=is(t.cLib,t.aLib,t.inputKeys);{let h=0;await t.while(()=>i==="menu",()=>{t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),t.inputKeys.f.up&&(h--,t.aLib.play("cursor_move")),t.inputKeys.f.down&&(h++,t.aLib.play("cursor_move")),t.cLib.stamp("soul",220,-h*50+240);const a=new w.Plane("_","play",270,250,0,200,"yellow",0,0,0,"en");a.write(),a.delete(),t.inputKeys.f.z&&(i="battle",t.aLib.play("cursor_confirm"))})}let p=0;const s={lv:k.player.lv,hp:k.player.hp_max,hp_max:k.player.hp_max,soul:new t.Sprite(320,240,0,80,"soul",1,1),damage(h){this.hp-=h,t.aLib.play("damage",2),this.hp<=0&&(i="game_over")},move(){const h=t.inputKeys.x?1:2.5;t.inputKeys.up&&(this.soul.y+=h),t.inputKeys.down&&(this.soul.y-=h),t.inputKeys.right&&(this.soul.x+=h),t.inputKeys.left&&(this.soul.x-=h)}};{p=0,hs(t.cLib,t.aLib,t.Sprite,s);const h=V(t.cLib,t.aLib,t.Sprite,s),n=as(t.cLib,s.soul).box,r=ls(t.cLib,w.Plane,s);n.set(320,160,0,562,132);const l={s:new t.Sprite(k.enemy.x,k.enemy.y,0,200,"enemy",1),hp:k.enemy.hp,hp_max:k.enemy.hp};for(;i=="battle";)if(d=="command"){let e=[];const o=new w.Plane("_",`You feel like you're going to
have a bad time.`,80,205,0,200,"white",0,0,1,"en","text");let c=0,u;await t.while(()=>d=="command"&&i=="battle"&&d=="command",()=>{t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),n.draw(),l.s.stamp();const y=(m,_,g,f)=>t.cLib.stamp("commands",m,_,0,100,1,"center",1,{left:f?113:0,top:45*g,width:112,height:44});if([0,1,2,3].forEach(m=>y(320+(m-1.5)*155,27,m,c==m&&e.length==0)),r(),e.length==0)t.inputKeys.f.right&&(c=(c+1+4)%4,t.aLib.play("cursor_move")),t.inputKeys.f.left&&(c=(c-1+4)%4,t.aLib.play("cursor_move")),t.inputKeys.f.z&&(e.push(c),t.aLib.play("cursor_confirm"),c==2&&e.push(0),c==3&&e.push(0)),o.process(),o.write(),w.write("*",50,205,0,200),[s.soul.x,s.soul.y]=[282+(c-1.5)*155,27];else if(e.length==1)t.inputKeys.f.x&&(e.pop(),t.aLib.play("cursor_move")),t.inputKeys.f.z&&(e.push(0),t.aLib.play("cursor_confirm")),(e[0]==0||e[0]==1)&&(w.write(`${k.enemy.name}`,80,205,0,200),[s.soul.x,s.soul.y]=[55,195]),e[0]==0&&(t.cLib.drawRect(220,185,80,20,"#ff0000",0,1,"start"),t.cLib.drawRect(220,185,l.hp/l.hp_max*80,20,"#4dff5e",0,1,"start"));else if(e.length==2){const m=_=>{t.inputKeys.f.up&&(e[1]-=2,t.aLib.play("cursor_move")),t.inputKeys.f.down&&(e[1]+=2,t.aLib.play("cursor_move")),t.inputKeys.f.right&&(e[1]+=1,t.aLib.play("cursor_move")),t.inputKeys.f.left&&(e[1]-=1,t.aLib.play("cursor_move")),e[1]=Math.max(Math.min(e[1],7,_.length-1),0),[s.soul.x,s.soul.y]=[55+e[1]%2*281,195-Math.floor(e[1]%4/2)*40],e[1]<4?[0,1,2,3].forEach(g=>{g<_.length&&(g!=e[1]&&w.write("*",50+g%2*281,205-Math.floor(g%4/2)*40,0,200),w.write(`${_[g].name}`,80+g%2*281,205-Math.floor(g%4/2)*40,0,200))}):[4,5,6,7].forEach(g=>{g<_.length&&(g!=e[1]&&w.write("*",50+g%2*281,205-Math.floor(g%4/2)*40,0,200),w.write(`${_[g].name}`,80+g%2*281,205-Math.floor(g%4/2)*40,0,200))}),4<=_.length&&w.write(`PAGE ${e[1]<4?1:2}`,361,125,0,200)};if(e[0]!=0&&t.inputKeys.f.x&&(e[0]==1||e.pop(),e.pop(),t.aLib.play("cursor_move")),e[0]==0){s.soul.alpha=0,e[1]++;const _=1-Math.min(20,Math.max(0,e[1]-96))/20;if(e[1]<96&&t.inputKeys.f.z&&(e.push(0),e.push(Math.floor(k.player.attack*(1-Math.abs(e[1]-48)*.8/48)*(1+(Math.random()-.5)/10))),l.hp-=e[3],t.aLib.play("slash")),96<=e[1]&&e[1]<156){const g=Math.max(0,-(e[1]-96)*(e[1]-126)/5);t.cLib.stamp("damage_miss",k.enemy.x,k.enemy.y+20+g,0,400)}else e[1]==156&&(d="enemy_speak");t.cLib.stamp("attack_gauge",320,160,0,300,_,"center",_),t.cLib.stamp(`attack_bar_${Math.floor(e[1]/8%2)}`,80+e[1]*5,160,0,300,_)}else if(e[0]==1&&e.length==2)m(k.actions),t.inputKeys.f.z&&e.push(0);else if(e[0]==2){if(m(k.items),t.inputKeys.f.z){e.push(0);const _=k.items[e[1]].behavior;_=="default"?(s.hp=Math.min(s.hp_max,s.hp+k.items[e[1]].heal),t.aLib.play("heal")):_()}}else e[0]==3&&((t.inputKeys.f.up||t.inputKeys.f.down)&&(e[1]=(e[1]+1)%2,t.aLib.play("cursor_move")),t.inputKeys.f.z&&(d="enemy_speak"),[0,1].forEach(_=>{_!=e[1]&&w.write("*",50,205-_*40,0,200),w.write(`${["Spare","Quit"][_]}`,80,205-_*40,0,200)}),[s.soul.x,s.soul.y]=[55,195-e[1]*40])}else if(e.length==3){if(e[0]==0)throw new Error;e[0]==1?(s.soul.alpha=0,u===void 0?u=new w.Plane("_",`${k.actions[e[1]].text}`,80,205,0,200,"white",0,0,1,"en","text"):u.process(),u.solved?d="enemy_speak":(u.write(),w.write("*",50,205,0,200))):e[0]==2&&(s.soul.alpha=0,u===void 0?u=new w.Plane("_",`${k.items[e[1]].text}`,80,205,0,200,"white",0,0,1,"en","text"):u.process(),u.solved?d="enemy_speak":(u.write(),w.write("*",50,205,0,200)))}else if(e.length==4&&e[0]==0){if(s.soul.alpha=0,e[2]<48?t.cLib.stamp(`slash_${Math.floor(e[2]/8)%6}`,320,300,0,200):e[2]==48&&1<=e[3]&&t.aLib.play("e_damage"),48<=e[2]&&e[2]<108)if(1<=e[3]){t.cLib.drawRect(k.enemy.x-60,k.enemy.y-20,120,20,"#ff0000",0,1,"start"),t.cLib.drawRect(k.enemy.x-60,k.enemy.y-20,Math.max(0,l.hp/l.hp_max*120),20,"#4dff5e",0,1,"start");const _=Math.max(0,-(e[2]-48)*(e[2]-78)/5),g=`${e[3]}`.length*8-(`${e[3]}`.match(/1/)??[]).length*3-1;w.write(`${e[3]}`,k.enemy.x-g*2,k.enemy.y+20+_,0,400,"red",0,0,"damage");const f=(107-e[2])**6/60**6;l.s.x=k.enemy.x+(e[2]%2*2-1)*f*20,l.hp<=0&&e[2]==93&&t.aLib.play("dust")}else{const _=Math.max(0,-(e[2]-48)*(e[2]-78)/5);t.cLib.stamp("damage_miss",k.enemy.x,k.enemy.y+20+_,0,400)}l.s.alpha=0<l.hp?1:1-Math.min(1,Math.max(e[2]-93,0)/25),e[2]==128&&(d=l.hp<=0?"clear":"enemy_speak");const m=1-Math.min(20,Math.max(0,e[2]-108))/20;t.cLib.stamp("attack_gauge",320,160,0,300,m,"center",m),t.cLib.stamp(`attack_bar_${Math.floor((e[1]+e[2]+1)/4%2)}`,80+e[1]*5,160,0,300,m),e[2]++}s.soul.stamp()})}else if(d=="enemy_speak"){s.soul.alpha=1;let e=0;[s.soul.x,s.soul.y]=[n.center_x,n.center_y];const o=new w.Plane("_",k.enemy_speak[0],420,360,0,100,"black",0,0,1,"en","talk_default");await t.while(()=>d=="enemy_speak"&&i=="battle"&&d=="enemy_speak",()=>{s.move(),e++;const c=1-Math.max(1-e/15,0)**4;t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),n.set(320,160,0,132*c+562*(1-c),132),n.draw(),l.s.stamp(),t.cLib.stamp("speech_bubble",380,380,0,150,1,"start");const u=(y,m,_,g)=>t.cLib.stamp("commands",y,m,0,100,1,"center",1,{left:g?113:0,top:45*_,width:112,height:44});[0,1,2,3].forEach(y=>u(320+(y-1.5)*155,27,y,!1)),s.soul.stamp(),r(),o.process(),o.solved&&c==1?d="enemy_attack":o.write()}),n.set(320,160,0,562,132)}else if(d=="enemy_attack")n.set(320,160,0,132,132),new h.normal(320,160,0,10,80,0,0,5,0,180),await t.for(0,e=>e<k.enemy_attack[0]&&i=="battle"&&d=="enemy_attack",e=>{s.move(),t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),n.judge(),h.process(),n.draw(),l.s.stamp();const o=(c,u,y,m)=>t.cLib.stamp("commands",c,u,0,100,1,"center",1,{left:m?113:0,top:45*y,width:112,height:44});[0,1,2,3].forEach(c=>o(320+(c-1.5)*155,27,c,!1)),s.soul.stamp(),r()}),h.boneDict={},await t.for(0,e=>e<15&&i=="battle"&&d=="enemy_attack",e=>{const o=1-Math.max(1-(e+1)/15,0)**4;s.move(),n.set(320,160,0,562*o+132*(1-o),132),t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),n.draw(),n.judge(),l.s.stamp();const c=(u,y,m,_)=>t.cLib.stamp("commands",u,y,0,100,1,"center",1,{left:_?113:0,top:45*m,width:112,height:44});[0,1,2,3].forEach(u=>c(320+(u-1.5)*155,27,u,!1)),s.soul.stamp(),r()}),d="command";else throw d=="clear"?new Error:new Error}{p=0;let h=[];await t.while(()=>i==="game_over",()=>{if(t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),p==0)t.aLib.play("heartbreak_1",2);else if(p<60)t.cLib.stamp("death_0",s.soul.x,s.soul.y,0,80);else if(p==60){t.aLib.play("heartbreak_2",2);for(let a=0;a<4;a++){let n=Math.random()*12-6,r=Math.random()*8+4;h.push(new t.Sprite(s.soul.x,s.soul.y,Math.random()*360,80,`death_${a+1}`,1,1,l=>{l.x+=n,l.y+=r,l.d+=n,r-=.333,l.stamp()}))}}else 60<p&&p<180?h.forEach(a=>a.act()):p==180&&(i="waiting");p++})}},ls=(t,i,d)=>()=>{const w=new i("_","chara",32,75,0,300,"white",0,0,0,"status");w.write(),w.delete();const p=new i("_","lV",134,75,0,300,"white",0,0,0,"status");p.write(),p.delete();const s=new i("_",`${("00"+d.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");s.write(),s.delete();const h=new i("_",`${("00"+d.hp).slice(-2)}`,d.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");h.write(),h.delete();const a=new i("_","/",d.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");a.write(),a.delete();const n=new i("_",`${("00"+d.hp_max).slice(-2)}`,d.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");n.write(),n.delete(),t.drawRect(256,59,d.hp_max*1.2,21,"red",0,1,"start"),t.drawRect(256,59,d.hp*1.2,21,"yellow",0,1,"start"),t.stamp("hp_white",224,74,0,100,1,"start"),t.stamp("kr_white",d.hp_max*1.2+267,74,0,100,1,"start")};window.onload=ns;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
