const L=(e,t)=>{const r=(h,p,s)=>{h()?(e(),p(),t(),requestAnimationFrame(()=>r(h,p,s))):s()},o=(h,p)=>new Promise(s=>{r(h,p,s)}),a=(h,p,s,l)=>{s<h?(e(),p(s),t(),requestAnimationFrame(()=>a(h,p,s+1,l))):l()},i=(h,p,s=0)=>new Promise(l=>{a(h,p,s,l)}),n=h=>{e(),h(),t(),requestAnimationFrame(()=>n(h))};return{frameWhile:o,frameFor:i,frameLoop:n}},P=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"}],E=async e=>{const t={},r={},o={},a=P,i=[];return console.log(a),a.forEach(n=>i.push(new Promise(h=>{switch(n.type){case"image":{const p=new Image;p.src=n.src,p.onload=()=>{t[n.name]=p,h()}}break;case"audio":{const p=new Audio(n.src);p.autoplay=!1,p.muted=!0,console.log(p),p.addEventListener("loadeddata",()=>{p.muted=!1,(async()=>{const l=await(await fetch(n.src)).arrayBuffer();r[n.name]={ctx:await e.decodeAudioData(l),data:p,time:1/0},p.onload=()=>h()})().then(h)})}break;case"font":(async()=>{const l=await(await(await fetch(n.src)).text()).match(/url\(.+?\)/g);if(!l)throw new Error("フォントが見つかりませんでした");const d=[];l.forEach(g=>{d.push((async()=>{const c=new FontFace(n.name,g);await c.load(),o[n.name]=c,await document.fonts.add(c)})())}),Promise.all(d)})().then(h);break}}))),await Promise.all(i),{Images:t,Audios:r,Fonts:o}},y=e=>Math.sin(e/360*Math.PI*2),m=e=>Math.cos(e/360*Math.PI*2),A=(e,t,r,o,a,i)=>{const n=(l,d,g,c=0,f=100,_=1,u="center",b,$=!1)=>{if($){const w=r[l],[x,v,k,q]=b===void 0?[0,0,w.width,w.height]:[b.left,b.top,b.width,b.height];switch(t.globalAlpha=_,u){case"center":t.save(),t.translate(d*a.display_quality,-g*a.display_quality+e.height),t.rotate(c*Math.PI/180),t.drawImage(w,x,v,k,q,-k*f/200*a.display_quality,-q*f/200*a.display_quality,k*f/100*a.display_quality,q*f/100*a.display_quality),t.restore();break;case"start":t.save(),t.translate(d*a.display_quality,-g*a.display_quality+e.height),t.rotate(c*Math.PI/180),t.drawImage(w,x,v,k,q,0,0,k*f/100*a.display_quality,q*f/100*a.display_quality),t.restore()}}else{const w=(m(i.d)*d-y(i.d)*g+i.x)*i.size/100,x=(y(i.d)*d+m(i.d)*g+i.y)*i.size/100,v=c+i.d;n(l,w,x,v,f*i.size/100,_,u,b,!0)}};return{stamp:n,drawRect:(l,d,g,c,f,_=0,u,b="center")=>{switch(t.globalAlpha=u===void 0?1:u,t.save(),b){case"center++":t.translate(l*a.display_quality,-d*a.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(-g/2*a.display_quality,-c/2*a.display_quality,g*a.display_quality,c*a.display_quality);break;case"center":t.translate((l-g/2)*a.display_quality,-(d-c/2)*a.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,g*a.display_quality,-c*a.display_quality);break;case"start":default:t.translate(l*a.display_quality,-d*a.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,g*a.display_quality,-c*a.display_quality);break}t.fillStyle=f,t.fill(),t.restore()},drawLine:(l,d,g,c,f,_,u=0)=>{switch(t.globalAlpha=1,t.beginPath(),u){case 0:t.moveTo((l-c*Math.sin(g)/2)*a.display_quality,-(d+c*Math.cos(g)/2)*a.display_quality+e.height),t.lineTo((l+c*Math.sin(g)/2)*a.display_quality,-(d-c*Math.cos(g)/2)*a.display_quality+e.height);break;case 1:t.moveTo(l*a.display_quality,-d*a.display_quality+e.height),t.lineTo((l+c*Math.sin(g))*a.display_quality,-(d-c*Math.cos(g))*a.display_quality+e.height);break}t.strokeStyle=_,t.lineWidth=f*a.display_quality,t.stroke()},drawText:(l,d,g,c,f,_="serif",u="left")=>{t.globalAlpha=1;const[b,$]=[d*a.display_quality,-g*a.display_quality+e.height];t.font=`${c*a.display_quality}px ${_}`,t.textAlign=u,t.fillStyle=f,t.fillText(l,b,$)}}},D=e=>{class t{constructor(o,a,i=0,n=100,h="",p=!1,s){this.x=o,this.y=a,this.d=i,this.size=n,this.costume=h,this.visible=p,this.act_=s}stamp(){this.visible&&e.stamp(this.costume,this.x,this.y,this.d,this.size)}move(o){this.x+=y(this.d)*o,this.y+=m(this.d)*o}act(){(this.act_||(()=>{}))(this)}}return t},F=(e,t,r)=>({raw_to_stage:(a,i,n=0)=>{const h=e.getBoundingClientRect(),p=((a-h.left)/r.size*100-r.x)*t.stage_width/t.display_width,s=(t.display_height-((i-h.top)/r.size*100-r.y))*t.stage_height/t.display_height,l=n+r.d;return{x:p,y:s,d:l}}}),I=e=>{const t=new(window.AudioContext||window.webkitAudioContext);return{play:(i,n=0)=>{n<=e[i].time&&(e[i].data.currentTime=0,e[i].data.play(),e[i].time=0)},play_ctx:(i,n=0)=>{if(n<=e[i].time){const h=t.createBufferSource();h.buffer=e[i].ctx,h.connect(t.destination),h.start(0),e[i].time=0}},tick:()=>{for(const i in e)e[i].time++}}},R=async e=>{const t=document.getElementById(e.canvas_name);t.height=e.stage_height*e.display_quality,t.width=e.stage_width*e.display_quality;const r=t.getContext("2d"),o=new(window.AudioContext||window.webkitAudioContext),{Images:a,Audios:i,Fonts:n}=await E(o),h={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1,f:{up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1}},p={x:0,y:0,clicking:!1,is_in_rect(w,x,v,k,q="center"){switch(q){case"center":return w-v/2<this.x&&this.x<w+v/2&&x-k/2<this.y&&this.y<x+k/2;case"start":default:return w<this.x&&this.x<w+v&&x<this.y&&this.y<x+k}}},s={canvas:{size:100,x:0,y:0,d:0}},l=A(t,r,a,n,e,s.canvas),d=I(i),g=D(l);r.imageSmoothingEnabled=!1;const c=F(t,e,s.canvas);window.addEventListener("keydown",w=>{switch(w.key){case"ArrowUp":h.up=!0,h.f.up=!0;break;case"ArrowDown":h.down=!0,h.f.down=!0;break;case"ArrowLeft":h.left=!0,h.f.left=!0;break;case"ArrowRight":h.right=!0,h.f.right=!0;break;case"z":case"Z":h.z=!0,h.f.z=!0;break;case"x":case"X":h.x=!0,h.f.x=!0;break;case"c":case"C":h.c=!0,h.f.c=!0;break;case"d":case"D":h.d=!0,h.f.d=!0;break}}),window.addEventListener("keyup",w=>{switch(w.key){case"ArrowUp":h.up=!1;break;case"ArrowDown":h.down=!1;break;case"ArrowLeft":h.left=!1;break;case"ArrowRight":h.right=!1;break;case"z":case"Z":h.z=!1;break;case"x":case"X":h.x=!1;break;case"c":case"C":h.c=!1;break;case"d":case"D":h.d=!1;break}}),t.addEventListener("mousedown",w=>{p.clicking=!0;const x=c.raw_to_stage(w.x,w.y);p.x=x.x,p.y=x.y}),t.addEventListener("mousemove",w=>{const x=c.raw_to_stage(w.x,w.y);p.x=x.x,p.y=x.y}),t.addEventListener("mouseup",w=>{p.clicking=!1;const x=c.raw_to_stage(w.x,w.y);p.x=x.x,p.y=x.y});let f,_;{let w={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1};f=()=>{["up","down","left","right","z","x","c","d"].forEach(x=>{w[x]&&(h.f[x]=!1)}),w={...h.f}},_=()=>{d.tick()}}const{frameWhile:u,frameFor:b,frameLoop:$}=L(f,_);return{canvas:t,ctx:r,Images:a,Audios:i,Fonts:n,inputKeys:h,inputMouse:p,props:s,cLib:l,aLib:d,Sprite:g,for:b,while:u,loop:$}},S=2,B=640,C=480,j=800,G=400,T="canvas",W={display_quality:S,stage_width:B,stage_height:C,display_width:j,display_height:G,canvas_name:T},K=(e,t,r,o)=>{let a={};const i=class M extends r{constructor(s,l,d,g,c,f,_,u,b,$){super(s,l,d,g,void 0,!0),this.start_x=s,this.start_y=l,this.start_d=d,this.move_x=f,this.move_y=_,this.move_d=u,this.start_len=c,this.move_len=b,this.len=c,this.age=0,this.id=M.current_id,this.width=g,a[this.id]=this,M.current_id++}move_self(){this.age++,this.x=this.start_x+M.get_move(this.move_x,this.age),this.y=this.start_y+M.get_move(this.move_y,this.age),this.d=this.start_d+M.get_move(this.move_d,this.age),this.len=this.start_len+M.get_move(this.move_len,this.age)}draw(){m(this.d),e.stamp("bone_head_white",this.x+m(this.d)*this.width*8/6,this.y-y(this.d)*this.width*8/6,this.d+180,this.width*100/6,1,"start"),e.drawRect(this.x+y(this.d)*this.width*6/6,this.y+m(this.d)*this.width*6/6,this.width,this.len+this.width*2/6,"white",this.d,1,"start"),e.stamp("bone_head_white",this.x+y(this.d)*(this.len+this.width*14/6)-m(this.d)*this.width*2/6,this.y+m(this.d)*(this.len+this.width*14/6)+y(this.d)*this.width*2/6,this.d,this.width*100/6,1,"start")}judge(){{const s=o.soul.x-this.x,l=o.soul.y-this.y,d=s*m(this.d)+l*-y(this.d),g=l*m(this.d)+s*y(this.d);this.len+this.width*14/6>g&&g>0&&this.width>d&&d>0&&o.damage(2)}}static process(){for(const s in a){const l=a[s];l.move_self(),l.draw(),l.judge()}}static get_move(s,l){if(typeof s=="number")return s*l;switch(s.type){case"sin":case"cos":return y(s.cycle*l)*s.amp;case"custom":return s.fn(l)}}};i.current_id=0;let n=i;return{boneDict:a,normal:n,process:()=>{n.process()}}},U={height_basic:15,width_basic:2,name:"determination"},X={left:10,up:34,width:6,height:9,gap:0},Z={left:20,up:34,width:6,height:9,gap:0},V={left:30,up:34,width:6,height:9,gap:0},H={left:40,up:34,width:6,height:9,gap:0},J={left:50,up:34,width:6,height:9,gap:0},N={left:60,up:34,width:6,height:9,gap:0},O={left:70,up:34,width:6,height:9,gap:0},Q={left:80,up:34,width:6,height:9,gap:0},Y={left:90,up:34,width:6,height:9,gap:0},tt={left:100,up:34,width:6,height:9,gap:0},et={left:110,up:34,width:6,height:9,gap:0},st={left:120,up:34,width:6,height:9,gap:0},it={left:130,up:34,width:7,height:9,gap:0},ht={left:140,up:34,width:6,height:9,gap:0},at={left:150,up:34,width:6,height:9,gap:0},nt={left:0,up:50,width:6,height:9,gap:0},lt={left:10,up:50,width:6,height:9,gap:0},pt={left:20,up:50,width:6,height:9,gap:0},gt={left:30,up:50,width:6,height:9,gap:0},dt={left:40,up:50,width:6,height:9,gap:0},ot={left:50,up:50,width:6,height:9,gap:0},ct={left:60,up:50,width:6,height:9,gap:0},rt={left:70,up:50,width:7,height:9,gap:0},ut={left:80,up:50,width:6,height:9,gap:0},wt={left:90,up:50,width:6,height:9,gap:0},_t={left:100,up:50,width:6,height:9,gap:0},ft={left:10,up:68,width:6,height:7,gap:2},yt={left:20,up:66,width:6,height:9,gap:0},mt={left:30,up:68,width:6,height:7,gap:2},bt={left:40,up:66,width:6,height:9,gap:0},xt={left:50,up:68,width:6,height:7,gap:2},$t={left:60,up:66,width:6,height:9,gap:0},kt={left:70,up:68,width:6,height:10,gap:5},vt={left:80,up:66,width:6,height:9,gap:0},qt={left:90,up:65,width:6,height:10,gap:-1},Mt={left:100,up:65,width:6,height:13,gap:2},zt={left:110,up:66,width:6,height:9,gap:0},Lt={left:120,up:66,width:6,height:9,gap:0},Pt={left:130,up:68,width:7,height:7,gap:2},Et={left:140,up:68,width:6,height:7,gap:2},At={left:150,up:68,width:6,height:7,gap:2},Dt={left:0,up:84,width:6,height:10,gap:5},Ft={left:10,up:84,width:6,height:10,gap:5},It={left:20,up:84,width:6,height:7,gap:2},Rt={left:30,up:84,width:6,height:7,gap:2},St={left:40,up:82,width:6,height:9,gap:0},Bt={left:50,up:84,width:6,height:7,gap:2},Ct={left:60,up:84,width:6,height:7,gap:2},jt={left:70,up:84,width:7,height:7,gap:2},Gt={left:80,up:84,width:6,height:7,gap:2},Tt={left:90,up:84,width:6,height:10,gap:5},Wt={left:100,up:84,width:6,height:7,gap:2},Kt={left:0,up:0,width:1,height:1,gap:0},Ut={left:150,up:82,width:6,height:9,gap:0},Xt={left:40,up:0,width:6,height:13,gap:0},Zt={left:150,up:61,width:4,height:1,gap:14},Vt={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:U,A:X,B:Z,C:V,D:H,E:J,F:N,G:O,H:Q,I:Y,J:tt,K:et,L:st,M:it,N:ht,O:at,P:nt,Q:lt,R:pt,S:gt,T:dt,U:ot,V:ct,W:rt,X:ut,Y:wt,Z:_t,a:ft,b:yt,c:mt,d:bt,e:xt,f:$t,g:kt,h:vt,i:qt,j:Mt,k:zt,l:Lt,m:Pt,n:Et,o:At,p:Dt,q:Ft,r:It,s:Rt,t:St,u:Bt,v:Ct,w:jt,x:Gt,y:Tt,z:Wt,space:Kt,irregular:Ut,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Xt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:-5},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:0},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Zt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Ht={height_basic:6,width_basic:1,name:"status"},Jt={left:6,up:14,width:4,height:5,gap:0},Nt={left:12,up:14,width:4,height:5,gap:0},Ot={left:18,up:14,width:4,height:5,gap:0},Qt={left:24,up:14,width:4,height:5,gap:0},Yt={left:30,up:14,width:4,height:5,gap:0},te={left:36,up:14,width:4,height:5,gap:0},ee={left:42,up:14,width:4,height:5,gap:0},se={left:48,up:14,width:4,height:5,gap:0},ie={left:54,up:14,width:4,height:5,gap:0},he={left:60,up:14,width:4,height:5,gap:0},ae={left:66,up:14,width:4,height:5,gap:0},ne={left:72,up:14,width:4,height:5,gap:0},le={left:78,up:14,width:5,height:5,gap:0},pe={left:84,up:14,width:4,height:5,gap:0},ge={left:90,up:14,width:4,height:5,gap:0},de={left:0,up:21,width:4,height:5,gap:0},oe={left:6,up:21,width:4,height:5,gap:0},ce={left:12,up:21,width:4,height:5,gap:0},re={left:18,up:21,width:4,height:5,gap:0},ue={left:24,up:21,width:4,height:5,gap:0},we={left:30,up:21,width:4,height:5,gap:0},_e={left:36,up:21,width:4,height:5,gap:0},fe={left:42,up:21,width:5,height:5,gap:0},ye={left:48,up:21,width:4,height:5,gap:0},me={left:54,up:21,width:4,height:5,gap:0},be={left:60,up:21,width:4,height:5,gap:0},xe={left:6,up:28,width:4,height:5,gap:0},$e={left:12,up:28,width:4,height:5,gap:0},ke={left:18,up:28,width:4,height:5,gap:0},ve={left:24,up:28,width:4,height:5,gap:0},qe={left:30,up:28,width:4,height:5,gap:0},Me={left:36,up:28,width:4,height:5,gap:0},ze={left:42,up:28,width:4,height:5,gap:0},Le={left:48,up:28,width:4,height:5,gap:0},Pe={left:54,up:28,width:4,height:5,gap:0},Ee={left:60,up:28,width:4,height:5,gap:0},Ae={left:66,up:28,width:4,height:5,gap:0},De={left:72,up:28,width:4,height:5,gap:0},Fe={left:78,up:28,width:5,height:5,gap:0},Ie={left:84,up:28,width:4,height:5,gap:0},Re={left:90,up:28,width:4,height:5,gap:0},Se={left:0,up:35,width:4,height:5,gap:0},Be={left:6,up:35,width:4,height:5,gap:0},Ce={left:12,up:35,width:4,height:5,gap:0},je={left:18,up:35,width:4,height:5,gap:0},Ge={left:24,up:35,width:4,height:5,gap:0},Te={left:30,up:35,width:4,height:5,gap:0},We={left:36,up:35,width:4,height:5,gap:0},Ke={left:42,up:35,width:5,height:5,gap:0},Ue={left:48,up:35,width:4,height:5,gap:0},Xe={left:54,up:35,width:4,height:5,gap:0},Ze={left:60,up:35,width:4,height:5,gap:0},Ve={left:0,up:0,width:4,height:1,gap:0},He={left:90,up:35,width:4,height:5,gap:0},Je={left:24,up:0,width:5,height:5,gap:0},Ne={left:90,up:25,width:4,height:1,gap:4},Oe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Ht,A:Jt,B:Nt,C:Ot,D:Qt,E:Yt,F:te,G:ee,H:se,I:ie,J:he,K:ae,L:ne,M:le,N:pe,O:ge,P:de,Q:oe,R:ce,S:re,T:ue,U:we,V:_e,W:fe,X:ye,Y:me,Z:be,a:xe,b:$e,c:ke,d:ve,e:qe,f:Me,g:ze,h:Le,i:Pe,j:Ee,k:Ae,l:De,m:Fe,n:Ie,o:Re,p:Se,q:Be,r:Ce,s:je,t:Ge,u:Te,v:We,w:Ke,x:Ue,y:Xe,z:Ze,space:Ve,irregular:He,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:Je,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Ne,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},Qe=(e,t)=>{const r={en:Vt,status:Oe};let o={};class a{constructor(s){this.name=s}delete(){delete o[this.name]}}class i extends a{constructor(s,l,d,g,c,f,_){super(s),this._={all_str:_.reduce((u,b)=>u+b.str,""),now:[{str:"",color:_[0].color,spacing_x:_[0].spacing_x,spacing_y:_[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=l,this.y=d,this.direction=g,this.size=c,this.data=_,this.font=(u=>{switch(u){case"status":return r.status;default:return r.en}})(f),o[s]=this,this.process()}write(){const s=this.size,l=this.direction*Math.PI/180,d=this._.now.reduce((u,b)=>u+b.str.length,0);let g=0,c=0,f=0;const _=u=>u in this.font?this.font[u]:this.font.space;return this._.now.forEach(u=>{u.str.split("").forEach($=>{const w=_($);$==`
`?(g=0,c+=this.font.props.height_basic+u.spacing_y):(e.stamp(this.font.props.name+"_"+u.color,this.x+(Math.cos(l)*g-Math.sin(l)*(c+w.gap/2))*s/100,this.y+(Math.sin(l)*g+Math.cos(l)*(c+w.gap/2))*s/100,this.direction,s,1,"start",{left:w.left,top:w.up,width:w.width,height:w.height}),f+1<d&&(g+=w.width+this.font.props.width_basic+u.spacing_x)),f++})}),this}process(){const s=this.data.reduce((l,d)=>l+d.str.length,0);if(this._.len_allow==s&&t.z){delete o[this.name];return}else t.x?(this._.len_allow=s,this._.current_char=s):this._.len_allow<s&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,s);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class n extends a{constructor(s,l,d,g,c,f,_,u,b,$,w){super(s),this.str_now="",this.len_now=0,this.str=l,this.x=d,this.y=g,this.direction=c,this.size=f,this.color=_,this.spacing_x=u,this.spacing_y=b,this.speed=$,this.font=(x=>{switch(x){case"status":return r.status;default:return r.en}})(w),this.len_allow=0,o[s]=this,this.process()}write(){const s=this.str_now,l=this.size,d=this.direction*Math.PI/180;let g,c;[g,c]=[0,0];const f=_=>_ in this.font?this.font[_]:this.font.space;for(let _=0;_<s.length;_++){const u=f(s[_]);s[_]==`
`?(g=0,c+=this.font.props.height_basic+this.spacing_y):(e.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(d)*g-Math.sin(d)*(c-u.gap))*l/100,this.y+(Math.sin(d)*g+Math.cos(d)*(c-u.gap))*l/100,this.direction,l,1,"start",{left:u.left,top:u.up,width:u.width,height:u.height}),_+1<s.length&&(g+=u.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.len_allow==this.str.length&&t.z){delete o[this.name];return}else t.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed);for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length]}}return{Super:i,Plane:n,process:()=>{for(const p in o)o[p].process()},dict:o}},Ye=(e,t)=>{class r{constructor(n,h,p,s,l,d,g=4){this.dx=n,this.dy=h,this.dd=p,this.len=s,this.align=l,this.width=g,this.soul_size=6,this.relative=d||(()=>{const c=this.dd,f=t.x-this.dx;return(t.y-this.dy)*m(c)+f*y(c)>0?"plus":"minus"})()}judge(){const n=this.dd,h=t.x-this.dx,p=t.y-this.dy,s=h*m(n)+p*-y(n),l=p*m(n)+h*y(n);if(this.len/2>s&&s>-this.len/2){if(this.relative=="minus"&&l>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>l){const d=s*m(-n)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*y(-n),g=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-m(-n)+s*y(-n);t.x=d+this.dx,t.y=g+this.dy}}else l>0?this.relative="plus":this.relative="minus"}draw(){e.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class o{constructor(n,h,p,s=4){this.dx=n,this.dy=h,this.dd=p,this.width=s}judge(){const n=this.dd,h=t.x-this.dx,p=t.y-this.dy,s=h*m(n)+p*-y(n);if(p*m(n)+h*y(n)>-this.width){const d=s*m(-n)+this.width*y(-n),g=this.width*-m(-n)+s*y(-n);t.x=d+this.dx,t.y=g+this.dy}}draw(){const n=this.dx+320*y(this.dd),h=this.dy+320*m(this.dd);e.drawRect(n,h,640,640,"#ffffff88",this.dd,1,"center++")}}const a={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:6,walls:[],draw(){this.walls.forEach(i=>{const n=i.dx+640*y(i.dd),h=i.dy+640*m(i.dd);e.drawRect(n,h,1280,1280,"#ffffff",i.dd,1,"center++")}),this.walls.forEach(i=>{const n=i.dx+640*y(i.dd),h=i.dy+640*m(i.dd);e.drawRect(n,h,1280-i.width*2,1280-i.width*2,"#000000",i.dd,1,"center++")})},judge(){this.walls.forEach(i=>{i.judge()})},update(){{const i=this.dire,n=this.center_x,h=this.center_y,p=this.walls[0];p.dd=i,p.dx=n+this.height/2*y(i),p.dy=h+this.height/2*m(i)}{const i=this.dire+90,n=this.center_x,h=this.center_y,p=this.walls[1];p.dd=i,p.dx=n+this.height/2*y(i),p.dy=h+this.height/2*m(i)}{const i=this.dire+180,n=this.center_x,h=this.center_y,p=this.walls[2];p.dd=i,p.dx=n+this.height/2*y(i),p.dy=h+this.height/2*m(i)}{const i=this.dire+270,n=this.center_x,h=this.center_y,p=this.walls[3];p.dd=i,p.dx=n+this.height/2*y(i),p.dy=h+this.height/2*m(i)}},init(){this.walls.push(new o(0,0,0,this.thickness)),this.walls.push(new o(0,0,90,this.thickness)),this.walls.push(new o(0,0,180,this.thickness)),this.walls.push(new o(0,0,270,this.thickness))}};return a.init(),{Wall:r,box:a}},ts=(e,t,r,o)=>{let a={};const i=class z extends r{constructor(s,l,d,g,c,f,_,u,b,$,w){super(g,c,f,_,"gb_1",!0),this.s_x=g,this.s_y=c,this.s_d=f,this.t_x=s,this.t_y=l,this.t_d=d,this.c_t=b,this.b_s=$,this.b_d=w,this.width=u,this.age=0,this.id=z.current_id,a[z.current_id]=this,z.current_id++,t.play_ctx("gb_charge",1)}move_self(){if(this.age<this.c_t){let s=(this.c_t-this.age)**4/this.c_t**4;this.x=s*this.s_x+(1-s)*this.t_x,this.y=s*this.s_y+(1-s)*this.t_y,this.d=s*this.s_d+(1-s)*this.t_d,console.log(s)}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let s=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(s/2)}}draw(){this.b_s+this.c_t<this.age&&e.drawRect(this.x+y(this.d)*4800/-2,this.y+m(this.d)*4800/-2,this.width*this.size/5*(1+y(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const s=o.soul.x-this.x,l=o.soul.y-this.y,d=s*m(this.d)+l*-y(this.d),g=l*m(this.d)+s*y(this.d);this.b_s+this.c_t<=this.age&&0>g&&this.width*this.size/10>d&&d>-this.width*this.size/10&&o.damage(2)}}static process(){for(const s in a){const l=a[s];l.move_self(),l.draw(),l.judge(),l.age++,l.b_d+l.b_s==l.age&&t.play_ctx("gb_fire",1),l.b_d+l.b_s+l.c_t<=l.age&&delete a[s]}}};i.current_id=0;let n=i;return{gbDict:a,gb:n,process:()=>{n.process()}}},es=async()=>{const e=await R(W);let t="menu";const r=Qe(e.cLib,e.inputKeys);{let i=0;await e.while(()=>t==="menu",()=>{e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),e.inputKeys.f.up&&i--,e.inputKeys.f.down&&i++,e.cLib.stamp("soul",0,i*50),console.log(i)})}let o=0;const a={lv:1,hp:20,hp_max:20,soul:new e.Sprite(320,240,0,80,"soul",!0),damage(i){this.hp-=i,e.aLib.play_ctx("damage",2),this.hp<=0&&(t="game_over")}};{const i=ts(e.cLib,e.aLib,e.Sprite,a),n=K(e.cLib,e.aLib,e.Sprite,a);Ye(e.cLib,a.soul);const h=ss(e.cLib,r.Plane,a);await e.while(()=>t==="battle",()=>{o++,e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),e.inputKeys.up&&(a.soul.y+=3.5),e.inputKeys.down&&(a.soul.y-=3.5),e.inputKeys.right&&(a.soul.x+=3.5),e.inputKeys.left&&(a.soul.x-=3.5),n.process(),i.process(),r.process(),h(),a.soul.stamp(),e.cLib.stamp("back",320,240,0,100,.2)})}{o=0;let i=[];await e.while(()=>t==="game_over",()=>{if(e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),o==0)e.aLib.play_ctx("heartbreak_1",2);else if(o<60)e.cLib.stamp("death_0",a.soul.x,a.soul.y,0,80);else if(o==60){e.aLib.play_ctx("heartbreak_2",2);for(let n=0;n<4;n++){let h=Math.random()*12-6,p=Math.random()*8+4;i.push(new e.Sprite(a.soul.x,a.soul.y,Math.random()*360,80,`death_${n+1}`,!0,s=>{s.x+=h,s.y+=p,s.d+=h,p-=.333,s.stamp()}))}}else 60<o&&o<180?i.forEach(n=>n.act()):o==180&&(t="waiting");o++})}},ss=(e,t,r)=>()=>{const o=new t("_","chara",32,75,0,300,"white",0,0,0,"status");o.write(),o.delete();const a=new t("_","lV",134,75,0,300,"white",0,0,0,"status");a.write(),a.delete();const i=new t("_",`${("00"+r.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");i.write(),i.delete();const n=new t("_",`${("00"+r.hp).slice(-2)}`,r.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");n.write(),n.delete();const h=new t("_","/",r.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");h.write(),h.delete();const p=new t("_",`${("00"+r.hp_max).slice(-2)}`,r.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");p.write(),p.delete(),e.drawRect(256,59,r.hp_max*1.2,21,"red",0,1,"start"),e.drawRect(256,59,r.hp*1.2,21,"yellow",0,1,"start"),e.stamp("hp_white",224,74,0,100,1,"start"),e.stamp("kr_white",r.hp_max*1.2+267,74,0,100,1,"start")};window.onload=es;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
