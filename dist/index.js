const L=(s,t)=>{const c=(i,l,e)=>{i()?(s(),l(),t(),requestAnimationFrame(()=>c(i,l,e))):e()},o=(i,l)=>new Promise(e=>{c(i,l,e)}),a=(i,l,e,p)=>{e<i?(s(),l(e),t(),requestAnimationFrame(()=>a(i,l,e+1,p))):p()},h=(i,l,e=0)=>new Promise(p=>{a(i,l,e,p)}),n=i=>{s(),i(),t(),requestAnimationFrame(()=>n(i))};return{frameWhile:o,frameFor:h,frameLoop:n}},P=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"}],E=async s=>{const t={},c={},o={},a=P,h=[];return console.log(a),a.forEach(n=>h.push(new Promise(i=>{switch(n.type){case"image":{const l=new Image;l.src=n.src,l.onload=()=>{t[n.name]=l,i()}}break;case"audio":{const l=new Audio(n.src);l.autoplay=!1,l.muted=!0,console.log(l),l.addEventListener("loadeddata",()=>{l.muted=!1,(async()=>{const p=await(await fetch(n.src)).arrayBuffer();c[n.name]={ctx:await s.decodeAudioData(p),data:l,time:1/0},l.onload=()=>i()})().then(i)})}break;case"font":(async()=>{const p=await(await(await fetch(n.src)).text()).match(/url\(.+?\)/g);if(!p)throw new Error("フォントが見つかりませんでした");const d=[];p.forEach(g=>{d.push((async()=>{const r=new FontFace(n.name,g);await r.load(),o[n.name]=r,await document.fonts.add(r)})())}),Promise.all(d)})().then(i);break}}))),await Promise.all(h),{Images:t,Audios:c,Fonts:o}},y=s=>Math.sin(s/360*Math.PI*2),m=s=>Math.cos(s/360*Math.PI*2),A=(s,t,c,o,a,h)=>{const n=(p,d,g,r=0,f=100,_=1,u="center",b,$=!1)=>{if($){const w=c[p],[x,v,k,q]=b===void 0?[0,0,w.width,w.height]:[b.left,b.top,b.width,b.height];switch(t.globalAlpha=_,u){case"center":t.save(),t.translate(d*a.display_quality,-g*a.display_quality+s.height),t.rotate(r*Math.PI/180),t.drawImage(w,x,v,k,q,-k*f/200*a.display_quality,-q*f/200*a.display_quality,k*f/100*a.display_quality,q*f/100*a.display_quality),t.restore();break;case"start":t.save(),t.translate(d*a.display_quality,-g*a.display_quality+s.height),t.rotate(r*Math.PI/180),t.drawImage(w,x,v,k,q,0,0,k*f/100*a.display_quality,q*f/100*a.display_quality),t.restore()}}else{const w=(m(h.d)*d-y(h.d)*g+h.x)*h.size/100,x=(y(h.d)*d+m(h.d)*g+h.y)*h.size/100,v=r+h.d;n(p,w,x,v,f*h.size/100,_,u,b,!0)}};return{stamp:n,drawRect:(p,d,g,r,f,_=0,u,b="center")=>{switch(t.globalAlpha=u===void 0?1:u,t.save(),b){case"center++":t.translate(p*a.display_quality,-d*a.display_quality+s.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(-g/2*a.display_quality,-r/2*a.display_quality,g*a.display_quality,r*a.display_quality);break;case"center":t.translate((p-g/2)*a.display_quality,-(d-r/2)*a.display_quality+s.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,g*a.display_quality,-r*a.display_quality);break;case"start":default:t.translate(p*a.display_quality,-d*a.display_quality+s.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,g*a.display_quality,-r*a.display_quality);break}t.fillStyle=f,t.fill(),t.restore()},drawLine:(p,d,g,r,f,_,u=0)=>{switch(t.globalAlpha=1,t.beginPath(),u){case 0:t.moveTo((p-r*Math.sin(g)/2)*a.display_quality,-(d+r*Math.cos(g)/2)*a.display_quality+s.height),t.lineTo((p+r*Math.sin(g)/2)*a.display_quality,-(d-r*Math.cos(g)/2)*a.display_quality+s.height);break;case 1:t.moveTo(p*a.display_quality,-d*a.display_quality+s.height),t.lineTo((p+r*Math.sin(g))*a.display_quality,-(d-r*Math.cos(g))*a.display_quality+s.height);break}t.strokeStyle=_,t.lineWidth=f*a.display_quality,t.stroke()},drawText:(p,d,g,r,f,_="serif",u="left")=>{t.globalAlpha=1;const[b,$]=[d*a.display_quality,-g*a.display_quality+s.height];t.font=`${r*a.display_quality}px ${_}`,t.textAlign=u,t.fillStyle=f,t.fillText(p,b,$)}}},D=s=>{class t{constructor(o,a,h=0,n=100,i="",l=!1,e){this.x=o,this.y=a,this.d=h,this.size=n,this.costume=i,this.visible=l,this.act_=e}stamp(){this.visible&&s.stamp(this.costume,this.x,this.y,this.d,this.size)}move(o){this.x+=y(this.d)*o,this.y+=m(this.d)*o}act(){(this.act_||(()=>{}))(this)}}return t},F=(s,t,c)=>({raw_to_stage:(a,h,n=0)=>{const i=s.getBoundingClientRect(),l=((a-i.left)/c.size*100-c.x)*t.stage_width/t.display_width,e=(t.display_height-((h-i.top)/c.size*100-c.y))*t.stage_height/t.display_height,p=n+c.d;return{x:l,y:e,d:p}}}),I=s=>{const t=new(window.AudioContext||window.webkitAudioContext);return{play:(h,n=0)=>{n<=s[h].time&&(s[h].data.currentTime=0,s[h].data.play(),s[h].time=0)},play_ctx:(h,n=0)=>{if(n<=s[h].time){const i=t.createBufferSource();i.buffer=s[h].ctx,i.connect(t.destination),i.start(0),s[h].time=0}},tick:()=>{for(const h in s)s[h].time++}}},R=async s=>{const t=document.getElementById(s.canvas_name);t.height=s.stage_height*s.display_quality,t.width=s.stage_width*s.display_quality;const c=t.getContext("2d"),o=new(window.AudioContext||window.webkitAudioContext),{Images:a,Audios:h,Fonts:n}=await E(o),i={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1,f:{up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1}},l={x:0,y:0,clicking:!1,is_in_rect(w,x,v,k,q="center"){switch(q){case"center":return w-v/2<this.x&&this.x<w+v/2&&x-k/2<this.y&&this.y<x+k/2;case"start":default:return w<this.x&&this.x<w+v&&x<this.y&&this.y<x+k}}},e={canvas:{size:100,x:0,y:0,d:0}},p=A(t,c,a,n,s,e.canvas),d=I(h),g=D(p);c.imageSmoothingEnabled=!1;const r=F(t,s,e.canvas);window.addEventListener("keydown",w=>{switch(w.key){case"ArrowUp":i.up=!0,i.f.up=!0;break;case"ArrowDown":i.down=!0,i.f.down=!0;break;case"ArrowLeft":i.left=!0,i.f.left=!0;break;case"ArrowRight":i.right=!0,i.f.right=!0;break;case"z":case"Z":i.z=!0,i.f.z=!0;break;case"x":case"X":i.x=!0,i.f.x=!0;break;case"c":case"C":i.c=!0,i.f.c=!0;break;case"d":case"D":i.d=!0,i.f.d=!0;break}}),window.addEventListener("keyup",w=>{switch(w.key){case"ArrowUp":i.up=!1;break;case"ArrowDown":i.down=!1;break;case"ArrowLeft":i.left=!1;break;case"ArrowRight":i.right=!1;break;case"z":case"Z":i.z=!1;break;case"x":case"X":i.x=!1;break;case"c":case"C":i.c=!1;break;case"d":case"D":i.d=!1;break}}),t.addEventListener("mousedown",w=>{l.clicking=!0;const x=r.raw_to_stage(w.x,w.y);l.x=x.x,l.y=x.y}),t.addEventListener("mousemove",w=>{const x=r.raw_to_stage(w.x,w.y);l.x=x.x,l.y=x.y}),t.addEventListener("mouseup",w=>{l.clicking=!1;const x=r.raw_to_stage(w.x,w.y);l.x=x.x,l.y=x.y});let f,_;{let w={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1};f=()=>{["up","down","left","right","z","x","c","d"].forEach(x=>{w[x]&&(i.f[x]=!1)}),w={...i.f}},_=()=>{d.tick()}}const{frameWhile:u,frameFor:b,frameLoop:$}=L(f,_);return{canvas:t,ctx:c,Images:a,Audios:h,Fonts:n,inputKeys:i,inputMouse:l,props:e,cLib:p,aLib:d,Sprite:g,for:b,while:u,loop:$}},S=2,B=640,C=480,j=800,G=400,T="canvas",W={display_quality:S,stage_width:B,stage_height:C,display_width:j,display_height:G,canvas_name:T},K=(s,t,c,o)=>{let a={};const h=class M extends c{constructor(e,p,d,g,r,f,_,u,b,$){super(e,p,d,g,void 0,!0),this.start_x=e,this.start_y=p,this.start_d=d,this.move_x=f,this.move_y=_,this.move_d=u,this.start_len=r,this.move_len=b,this.len=r,this.age=0,this.id=M.current_id,this.width=g,a[this.id]=this,M.current_id++}move_self(){this.age++,this.x=this.start_x+M.get_move(this.move_x,this.age),this.y=this.start_y+M.get_move(this.move_y,this.age),this.d=this.start_d+M.get_move(this.move_d,this.age),this.len=this.start_len+M.get_move(this.move_len,this.age)}draw(){m(this.d),s.stamp("bone_head_white",this.x+m(this.d)*this.width*8/6,this.y-y(this.d)*this.width*8/6,this.d+180,this.width*100/6,1,"start"),s.drawRect(this.x+y(this.d)*this.width*6/6,this.y+m(this.d)*this.width*6/6,this.width,this.len+this.width*2/6,"white",this.d,1,"start"),s.stamp("bone_head_white",this.x+y(this.d)*(this.len+this.width*14/6)-m(this.d)*this.width*2/6,this.y+m(this.d)*(this.len+this.width*14/6)+y(this.d)*this.width*2/6,this.d,this.width*100/6,1,"start")}judge(){{const e=o.soul.x-this.x,p=o.soul.y-this.y,d=e*m(this.d)+p*-y(this.d),g=p*m(this.d)+e*y(this.d);this.len+this.width*14/6>g&&g>0&&this.width>d&&d>0&&o.damage(2)}}static process(){for(const e in a){const p=a[e];p.move_self(),p.draw(),p.judge()}}static get_move(e,p){if(typeof e=="number")return e*p;switch(e.type){case"sin":case"cos":return y(e.cycle*p)*e.amp;case"custom":return e.fn(p)}}};h.current_id=0;let n=h;return{boneDict:a,normal:n,process:()=>{n.process()}}},U={height_basic:15,width_basic:2,name:"determination"},X={left:10,up:34,width:6,height:9,gap:0},Z={left:20,up:34,width:6,height:9,gap:0},V={left:30,up:34,width:6,height:9,gap:0},H={left:40,up:34,width:6,height:9,gap:0},J={left:50,up:34,width:6,height:9,gap:0},N={left:60,up:34,width:6,height:9,gap:0},O={left:70,up:34,width:6,height:9,gap:0},Q={left:80,up:34,width:6,height:9,gap:0},Y={left:90,up:34,width:6,height:9,gap:0},tt={left:100,up:34,width:6,height:9,gap:0},et={left:110,up:34,width:6,height:9,gap:0},st={left:120,up:34,width:6,height:9,gap:0},it={left:130,up:34,width:7,height:9,gap:0},ht={left:140,up:34,width:6,height:9,gap:0},at={left:150,up:34,width:6,height:9,gap:0},nt={left:0,up:50,width:6,height:9,gap:0},pt={left:10,up:50,width:6,height:9,gap:0},lt={left:20,up:50,width:6,height:9,gap:0},gt={left:30,up:50,width:6,height:9,gap:0},dt={left:40,up:50,width:6,height:9,gap:0},ot={left:50,up:50,width:6,height:9,gap:0},rt={left:60,up:50,width:6,height:9,gap:0},ct={left:70,up:50,width:7,height:9,gap:0},ut={left:80,up:50,width:6,height:9,gap:0},wt={left:90,up:50,width:6,height:9,gap:0},_t={left:100,up:50,width:6,height:9,gap:0},ft={left:10,up:68,width:6,height:7,gap:2},yt={left:20,up:66,width:6,height:9,gap:0},mt={left:30,up:68,width:6,height:7,gap:2},bt={left:40,up:66,width:6,height:9,gap:0},xt={left:50,up:68,width:6,height:7,gap:2},$t={left:60,up:66,width:6,height:9,gap:0},kt={left:70,up:68,width:6,height:10,gap:5},vt={left:80,up:66,width:6,height:9,gap:0},qt={left:90,up:65,width:6,height:10,gap:-1},Mt={left:100,up:65,width:6,height:13,gap:2},zt={left:110,up:66,width:6,height:9,gap:0},Lt={left:120,up:66,width:6,height:9,gap:0},Pt={left:130,up:68,width:7,height:7,gap:2},Et={left:140,up:68,width:6,height:7,gap:2},At={left:150,up:68,width:6,height:7,gap:2},Dt={left:0,up:84,width:6,height:10,gap:5},Ft={left:10,up:84,width:6,height:10,gap:5},It={left:20,up:84,width:6,height:7,gap:2},Rt={left:30,up:84,width:6,height:7,gap:2},St={left:40,up:82,width:6,height:9,gap:0},Bt={left:50,up:84,width:6,height:7,gap:2},Ct={left:60,up:84,width:6,height:7,gap:2},jt={left:70,up:84,width:7,height:7,gap:2},Gt={left:80,up:84,width:6,height:7,gap:2},Tt={left:90,up:84,width:6,height:10,gap:5},Wt={left:100,up:84,width:6,height:7,gap:2},Kt={left:0,up:0,width:1,height:1,gap:0},Ut={left:150,up:82,width:6,height:9,gap:0},Xt={left:40,up:0,width:6,height:13,gap:0},Zt={left:150,up:61,width:4,height:1,gap:14},Vt={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:U,A:X,B:Z,C:V,D:H,E:J,F:N,G:O,H:Q,I:Y,J:tt,K:et,L:st,M:it,N:ht,O:at,P:nt,Q:pt,R:lt,S:gt,T:dt,U:ot,V:rt,W:ct,X:ut,Y:wt,Z:_t,a:ft,b:yt,c:mt,d:bt,e:xt,f:$t,g:kt,h:vt,i:qt,j:Mt,k:zt,l:Lt,m:Pt,n:Et,o:At,p:Dt,q:Ft,r:It,s:Rt,t:St,u:Bt,v:Ct,w:jt,x:Gt,y:Tt,z:Wt,space:Kt,irregular:Ut,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Xt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:-5},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:0},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Zt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Ht={height_basic:6,width_basic:1,name:"status"},Jt={left:6,up:14,width:4,height:5,gap:0},Nt={left:12,up:14,width:4,height:5,gap:0},Ot={left:18,up:14,width:4,height:5,gap:0},Qt={left:24,up:14,width:4,height:5,gap:0},Yt={left:30,up:14,width:4,height:5,gap:0},te={left:36,up:14,width:4,height:5,gap:0},ee={left:42,up:14,width:4,height:5,gap:0},se={left:48,up:14,width:4,height:5,gap:0},ie={left:54,up:14,width:4,height:5,gap:0},he={left:60,up:14,width:4,height:5,gap:0},ae={left:66,up:14,width:4,height:5,gap:0},ne={left:72,up:14,width:4,height:5,gap:0},pe={left:78,up:14,width:5,height:5,gap:0},le={left:84,up:14,width:4,height:5,gap:0},ge={left:90,up:14,width:4,height:5,gap:0},de={left:0,up:21,width:4,height:5,gap:0},oe={left:6,up:21,width:4,height:5,gap:0},re={left:12,up:21,width:4,height:5,gap:0},ce={left:18,up:21,width:4,height:5,gap:0},ue={left:24,up:21,width:4,height:5,gap:0},we={left:30,up:21,width:4,height:5,gap:0},_e={left:36,up:21,width:4,height:5,gap:0},fe={left:42,up:21,width:5,height:5,gap:0},ye={left:48,up:21,width:4,height:5,gap:0},me={left:54,up:21,width:4,height:5,gap:0},be={left:60,up:21,width:4,height:5,gap:0},xe={left:6,up:28,width:4,height:5,gap:0},$e={left:12,up:28,width:4,height:5,gap:0},ke={left:18,up:28,width:4,height:5,gap:0},ve={left:24,up:28,width:4,height:5,gap:0},qe={left:30,up:28,width:4,height:5,gap:0},Me={left:36,up:28,width:4,height:5,gap:0},ze={left:42,up:28,width:4,height:5,gap:0},Le={left:48,up:28,width:4,height:5,gap:0},Pe={left:54,up:28,width:4,height:5,gap:0},Ee={left:60,up:28,width:4,height:5,gap:0},Ae={left:66,up:28,width:4,height:5,gap:0},De={left:72,up:28,width:4,height:5,gap:0},Fe={left:78,up:28,width:5,height:5,gap:0},Ie={left:84,up:28,width:4,height:5,gap:0},Re={left:90,up:28,width:4,height:5,gap:0},Se={left:0,up:35,width:4,height:5,gap:0},Be={left:6,up:35,width:4,height:5,gap:0},Ce={left:12,up:35,width:4,height:5,gap:0},je={left:18,up:35,width:4,height:5,gap:0},Ge={left:24,up:35,width:4,height:5,gap:0},Te={left:30,up:35,width:4,height:5,gap:0},We={left:36,up:35,width:4,height:5,gap:0},Ke={left:42,up:35,width:5,height:5,gap:0},Ue={left:48,up:35,width:4,height:5,gap:0},Xe={left:54,up:35,width:4,height:5,gap:0},Ze={left:60,up:35,width:4,height:5,gap:0},Ve={left:0,up:0,width:4,height:1,gap:0},He={left:90,up:35,width:4,height:5,gap:0},Je={left:24,up:0,width:5,height:5,gap:0},Ne={left:90,up:25,width:4,height:1,gap:4},Oe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Ht,A:Jt,B:Nt,C:Ot,D:Qt,E:Yt,F:te,G:ee,H:se,I:ie,J:he,K:ae,L:ne,M:pe,N:le,O:ge,P:de,Q:oe,R:re,S:ce,T:ue,U:we,V:_e,W:fe,X:ye,Y:me,Z:be,a:xe,b:$e,c:ke,d:ve,e:qe,f:Me,g:ze,h:Le,i:Pe,j:Ee,k:Ae,l:De,m:Fe,n:Ie,o:Re,p:Se,q:Be,r:Ce,s:je,t:Ge,u:Te,v:We,w:Ke,x:Ue,y:Xe,z:Ze,space:Ve,irregular:He,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:Je,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Ne,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},Qe=(s,t)=>{const c={en:Vt,status:Oe};let o={};class a{constructor(e){this.name=e}delete(){delete o[this.name]}}class h extends a{constructor(e,p,d,g,r,f,_){super(e),this._={all_str:_.reduce((u,b)=>u+b.str,""),now:[{str:"",color:_[0].color,spacing_x:_[0].spacing_x,spacing_y:_[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=p,this.y=d,this.direction=g,this.size=r,this.data=_,this.font=(u=>{switch(u){case"status":return c.status;default:return c.en}})(f),o[e]=this,this.process()}write(){const e=this.size,p=this.direction*Math.PI/180,d=this._.now.reduce((u,b)=>u+b.str.length,0);let g=0,r=0,f=0;const _=u=>u in this.font?this.font[u]:this.font.space;return this._.now.forEach(u=>{u.str.split("").forEach($=>{const w=_($);$==`
`?(g=0,r+=this.font.props.height_basic+u.spacing_y):(s.stamp(this.font.props.name+"_"+u.color,this.x+(Math.cos(p)*g-Math.sin(p)*(r+w.gap/2))*e/100,this.y+(Math.sin(p)*g+Math.cos(p)*(r+w.gap/2))*e/100,this.direction,e,1,"start",{left:w.left,top:w.up,width:w.width,height:w.height}),f+1<d&&(g+=w.width+this.font.props.width_basic+u.spacing_x)),f++})}),this}process(){const e=this.data.reduce((p,d)=>p+d.str.length,0);if(this._.len_allow==e&&t.z){delete o[this.name];return}else t.x?(this._.len_allow=e,this._.current_char=e):this._.len_allow<e&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,e);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class n extends a{constructor(e,p,d,g,r,f,_,u,b,$,w){super(e),this.str_now="",this.len_now=0,this.str=p,this.x=d,this.y=g,this.direction=r,this.size=f,this.color=_,this.spacing_x=u,this.spacing_y=b,this.speed=$,this.font=(x=>{switch(x){case"status":return c.status;default:return c.en}})(w),this.len_allow=0,o[e]=this,this.process()}write(){const e=this.str_now,p=this.size,d=this.direction*Math.PI/180;let g,r;[g,r]=[0,0];const f=_=>_ in this.font?this.font[_]:this.font.space;for(let _=0;_<e.length;_++){const u=f(e[_]);e[_]==`
`?(g=0,r+=this.font.props.height_basic+this.spacing_y):(s.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(d)*g-Math.sin(d)*(r-u.gap))*p/100,this.y+(Math.sin(d)*g+Math.cos(d)*(r-u.gap))*p/100,this.direction,p,1,"start",{left:u.left,top:u.up,width:u.width,height:u.height}),_+1<e.length&&(g+=u.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.len_allow==this.str.length&&t.z){delete o[this.name];return}else t.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed);for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length]}}return{Super:h,Plane:n,process:()=>{for(const l in o)o[l].process()},dict:o}},Ye=(s,t)=>{class c{constructor(n,i,l,e,p,d,g=4){this.dx=n,this.dy=i,this.dd=l,this.len=e,this.align=p,this.width=g,this.soul_size=6,this.relative=d||(()=>{const r=this.dd,f=t.x-this.dx;return(t.y-this.dy)*m(r)+f*y(r)>0?"plus":"minus"})()}judge(){const n=this.dd,i=t.x-this.dx,l=t.y-this.dy,e=i*m(n)+l*-y(n),p=l*m(n)+i*y(n);if(this.len/2>e&&e>-this.len/2){if(this.relative=="minus"&&p>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>p){const d=e*m(-n)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*y(-n),g=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-m(-n)+e*y(-n);t.x=d+this.dx,t.y=g+this.dy}}else p>0?this.relative="plus":this.relative="minus"}draw(){s.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class o{constructor(n,i,l,e=4){this.dx=n,this.dy=i,this.dd=l,this.width=e}judge(){const n=this.dd,i=t.x-this.dx,l=t.y-this.dy,e=i*m(n)+l*-y(n);if(l*m(n)+i*y(n)>-this.width){const d=e*m(-n)+this.width*y(-n),g=this.width*-m(-n)+e*y(-n);t.x=d+this.dx,t.y=g+this.dy}}draw(){const n=this.dx+320*y(this.dd),i=this.dy+320*m(this.dd);s.drawRect(n,i,640,640,"#ffffff88",this.dd,1,"center++")}}const a={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:6,walls:[],draw(){this.walls.forEach(h=>{const n=h.dx+640*y(h.dd),i=h.dy+640*m(h.dd);s.drawRect(n,i,1280,1280,"#ffffff",h.dd,1,"center++")}),this.walls.forEach(h=>{const n=h.dx+640*y(h.dd),i=h.dy+640*m(h.dd);s.drawRect(n,i,1280-h.width*2,1280-h.width*2,"#000000",h.dd,1,"center++")})},judge(){this.walls.forEach(h=>{h.judge()})},update(){{const h=this.dire,n=this.center_x,i=this.center_y,l=this.walls[0];l.dd=h,l.dx=n+this.height/2*y(h),l.dy=i+this.height/2*m(h)}{const h=this.dire+90,n=this.center_x,i=this.center_y,l=this.walls[1];l.dd=h,l.dx=n+this.height/2*y(h),l.dy=i+this.height/2*m(h)}{const h=this.dire+180,n=this.center_x,i=this.center_y,l=this.walls[2];l.dd=h,l.dx=n+this.height/2*y(h),l.dy=i+this.height/2*m(h)}{const h=this.dire+270,n=this.center_x,i=this.center_y,l=this.walls[3];l.dd=h,l.dx=n+this.height/2*y(h),l.dy=i+this.height/2*m(h)}},init(){this.walls.push(new o(0,0,0,this.thickness)),this.walls.push(new o(0,0,90,this.thickness)),this.walls.push(new o(0,0,180,this.thickness)),this.walls.push(new o(0,0,270,this.thickness))}};return a.init(),{Wall:c,box:a}},ts=(s,t,c,o)=>{let a={};const h=class z extends c{constructor(e,p,d,g,r,f,_,u,b,$,w){super(g,r,f,_,"gb_1",!0),this.s_x=g,this.s_y=r,this.s_d=f,this.t_x=e,this.t_y=p,this.t_d=d,this.c_t=b,this.b_s=$,this.b_d=w,this.width=u,this.age=0,this.id=z.current_id,a[z.current_id]=this,z.current_id++,t.play_ctx("gb_charge",1)}move_self(){if(this.age<this.c_t){let e=(this.c_t-this.age)**4/this.c_t**4;this.x=e*this.s_x+(1-e)*this.t_x,this.y=e*this.s_y+(1-e)*this.t_y,this.d=e*this.s_d+(1-e)*this.t_d,console.log(e)}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let e=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(e/2)}}draw(){this.b_s+this.c_t<this.age&&s.drawRect(this.x+y(this.d)*4800/-2,this.y+m(this.d)*4800/-2,this.width*this.size/5*(1+y(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const e=o.soul.x-this.x,p=o.soul.y-this.y,d=e*m(this.d)+p*-y(this.d),g=p*m(this.d)+e*y(this.d);this.b_s+this.c_t<=this.age&&0>g&&this.width*this.size/10>d&&d>-this.width*this.size/10&&o.damage(2)}}static process(){for(const e in a){const p=a[e];p.move_self(),p.draw(),p.judge(),p.age++,p.b_d+p.b_s==p.age&&t.play_ctx("gb_fire",1),p.b_d+p.b_s+p.c_t<=p.age&&delete a[e]}}};h.current_id=0;let n=h;return{gbDict:a,gb:n,process:()=>{n.process()}}},es=async()=>{const s=await R(W);let t="menu";const c=Qe(s.cLib,s.inputKeys);let o=0;const a={lv:1,hp:20,hp_max:20,soul:new s.Sprite(320,240,0,80,"soul",!0),damage(h){this.hp-=h,s.aLib.play_ctx("damage",2),this.hp<=0&&(t="game_over")}};{o=0,t="battle";const h=ts(s.cLib,s.aLib,s.Sprite,a),n=K(s.cLib,s.aLib,s.Sprite,a);Ye(s.cLib,a.soul);const i=ss(s.cLib,c.Plane,a);await s.while(()=>t==="battle",()=>{o++,s.ctx.clearRect(0,0,s.canvas.width,s.canvas.height),s.inputKeys.up&&(a.soul.y+=3.5),s.inputKeys.down&&(a.soul.y-=3.5),s.inputKeys.right&&(a.soul.x+=3.5),s.inputKeys.left&&(a.soul.x-=3.5),n.process(),h.process(),c.process(),i(),a.soul.stamp(),s.cLib.stamp("back",320,240,0,100,.2)})}{o=0;let h=[];await s.while(()=>t==="game_over",()=>{if(s.ctx.clearRect(0,0,s.canvas.width,s.canvas.height),o==0)s.aLib.play_ctx("heartbreak_1",2);else if(o<60)s.cLib.stamp("death_0",a.soul.x,a.soul.y,0,80);else if(o==60){s.aLib.play_ctx("heartbreak_2",2);for(let n=0;n<4;n++){let i=Math.random()*12-6,l=Math.random()*8+4;h.push(new s.Sprite(a.soul.x,a.soul.y,Math.random()*360,80,`death_${n+1}`,!0,e=>{e.x+=i,e.y+=l,e.d+=i,l-=.333,e.stamp()}))}}else 60<o&&o<180?h.forEach(n=>n.act()):o==180&&(t="waiting");o++})}},ss=(s,t,c)=>()=>{const o=new t("_","chara",32,75,0,300,"white",0,0,0,"status");o.write(),o.delete();const a=new t("_","lV",134,75,0,300,"white",0,0,0,"status");a.write(),a.delete();const h=new t("_",`${("00"+c.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");h.write(),h.delete();const n=new t("_",`${("00"+c.hp).slice(-2)}`,c.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");n.write(),n.delete();const i=new t("_","/",c.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");i.write(),i.delete();const l=new t("_",`${("00"+c.hp_max).slice(-2)}`,c.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");l.write(),l.delete(),s.drawRect(256,59,c.hp_max*1.2,21,"red",0,1,"start"),s.drawRect(256,59,c.hp*1.2,21,"yellow",0,1,"start"),s.stamp("hp_white",224,74,0,100,1,"start"),s.stamp("kr_white",c.hp_max*1.2+267,74,0,100,1,"start")};window.onload=es;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
