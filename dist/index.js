const L=(e,t)=>{const c=(i,n,s)=>{i()?(e(),n(),t(),requestAnimationFrame(()=>c(i,n,s))):s()},d=(i,n)=>new Promise(s=>{c(i,n,s)}),h=(i,n,s,a)=>{s<i?(e(),n(s),t(),requestAnimationFrame(()=>h(i,n,s+1,a))):a()},l=(i,n,s=0)=>new Promise(a=>{h(i,n,s,a)}),p=i=>{e(),i(),t(),requestAnimationFrame(()=>p(i))};return{frameWhile:d,frameFor:l,frameLoop:p}},A=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"},{type:"audio",name:"cursor_move",src:"./assets/audios/cursor_move.wav"},{type:"audio",name:"cursor_confirm",src:"./assets/audios/cursor_confirm.wav"}],P=async e=>{const t={},c={},d={},h=A,l=[];return console.log(h),h.forEach(p=>l.push(new Promise(i=>{switch(p.type){case"image":{const n=new Image;n.src=p.src,n.onload=()=>{t[p.name]=n,i()}}break;case"audio":{const n=new Audio(p.src);n.autoplay=!1,n.muted=!0,console.log(n),n.addEventListener("loadeddata",()=>{n.muted=!1,(async()=>{const a=await(await fetch(p.src)).arrayBuffer();c[p.name]={ctx:await e.decodeAudioData(a),data:n,time:1/0},n.onload=()=>i()})().then(i)})}break;case"font":(async()=>{const a=await(await(await fetch(p.src)).text()).match(/url\(.+?\)/g);if(!a)throw new Error("フォントが見つかりませんでした");const g=[];a.forEach(o=>{g.push((async()=>{const r=new FontFace(p.name,o);await r.load(),d[p.name]=r,await document.fonts.add(r)})())}),Promise.all(g)})().then(i);break}}))),await Promise.all(l),{Images:t,Audios:c,Fonts:d}},m=e=>Math.sin(e/360*Math.PI*2),y=e=>Math.cos(e/360*Math.PI*2),E=(e,t,c,d,h,l)=>{const p=(a,g,o,r=0,f=100,_=1,u="center",b,v=!1)=>{if(v){const w=c[a],[x,k,$,q]=b===void 0?[0,0,w.width,w.height]:[b.left,b.top,b.width,b.height];switch(t.globalAlpha=_,u){case"center":t.save(),t.translate(g*h.display_quality,-o*h.display_quality+e.height),t.rotate(r*Math.PI/180),t.drawImage(w,x,k,$,q,-$*f/200*h.display_quality,-q*f/200*h.display_quality,$*f/100*h.display_quality,q*f/100*h.display_quality),t.restore();break;case"start":t.save(),t.translate(g*h.display_quality,-o*h.display_quality+e.height),t.rotate(r*Math.PI/180),t.drawImage(w,x,k,$,q,0,0,$*f/100*h.display_quality,q*f/100*h.display_quality),t.restore()}}else{const w=(y(l.d)*g-m(l.d)*o+l.x)*l.size/100,x=(m(l.d)*g+y(l.d)*o+l.y)*l.size/100,k=r+l.d;p(a,w,x,k,f*l.size/100,_,u,b,!0)}};return{stamp:p,drawRect:(a,g,o,r,f,_=0,u,b="center")=>{switch(t.globalAlpha=u===void 0?1:u,t.save(),b){case"center++":t.translate(a*h.display_quality,-g*h.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(-o/2*h.display_quality,-r/2*h.display_quality,o*h.display_quality,r*h.display_quality);break;case"center":t.translate((a-o/2)*h.display_quality,-(g-r/2)*h.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,o*h.display_quality,-r*h.display_quality);break;case"start":default:t.translate(a*h.display_quality,-g*h.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,o*h.display_quality,-r*h.display_quality);break}t.fillStyle=f,t.fill(),t.restore()},drawLine:(a,g,o,r,f,_,u=0)=>{switch(t.globalAlpha=1,t.beginPath(),u){case 0:t.moveTo((a-r*Math.sin(o)/2)*h.display_quality,-(g+r*Math.cos(o)/2)*h.display_quality+e.height),t.lineTo((a+r*Math.sin(o)/2)*h.display_quality,-(g-r*Math.cos(o)/2)*h.display_quality+e.height);break;case 1:t.moveTo(a*h.display_quality,-g*h.display_quality+e.height),t.lineTo((a+r*Math.sin(o))*h.display_quality,-(g-r*Math.cos(o))*h.display_quality+e.height);break}t.strokeStyle=_,t.lineWidth=f*h.display_quality,t.stroke()},drawText:(a,g,o,r,f,_="serif",u="left")=>{t.globalAlpha=1;const[b,v]=[g*h.display_quality,-o*h.display_quality+e.height];t.font=`${r*h.display_quality}px ${_}`,t.textAlign=u,t.fillStyle=f,t.fillText(a,b,v)}}},D=e=>{class t{constructor(d,h,l=0,p=100,i="",n=!1,s){this.x=d,this.y=h,this.d=l,this.size=p,this.costume=i,this.visible=n,this.act_=s}stamp(){this.visible&&e.stamp(this.costume,this.x,this.y,this.d,this.size)}move(d){this.x+=m(this.d)*d,this.y+=y(this.d)*d}act(){(this.act_||(()=>{}))(this)}}return t},F=(e,t,c)=>({raw_to_stage:(h,l,p=0)=>{const i=e.getBoundingClientRect(),n=((h-i.left)/c.size*100-c.x)*t.stage_width/t.display_width,s=(t.display_height-((l-i.top)/c.size*100-c.y))*t.stage_height/t.display_height,a=p+c.d;return{x:n,y:s,d:a}}}),I=e=>{const t=new(window.AudioContext||window.webkitAudioContext);return{play:(h,l=0,p=1)=>{if(l<=e[h].time){const i=t.createGain(),n=t.createBufferSource();n.buffer=e[h].ctx,i.gain.setValueAtTime(p,t.currentTime),n.connect(i),i.connect(t.destination),n.start(0),e[h].time=0}},tick:()=>{for(const h in e)e[h].time++}}},R=async e=>{const t=document.getElementById(e.canvas_name);t.height=e.stage_height*e.display_quality,t.width=e.stage_width*e.display_quality;const c=t.getContext("2d"),d=new(window.AudioContext||window.webkitAudioContext),{Images:h,Audios:l,Fonts:p}=await P(d),i={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1,f:{up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1}},n={x:0,y:0,clicking:!1,is_in_rect(w,x,k,$,q="center"){switch(q){case"center":return w-k/2<this.x&&this.x<w+k/2&&x-$/2<this.y&&this.y<x+$/2;case"start":default:return w<this.x&&this.x<w+k&&x<this.y&&this.y<x+$}}},s={canvas:{size:100,x:0,y:0,d:0}},a=E(t,c,h,p,e,s.canvas),g=I(l),o=D(a);c.imageSmoothingEnabled=!1;const r=F(t,e,s.canvas);window.addEventListener("keydown",w=>{switch(w.key){case"ArrowUp":i.up=!0,i.f.up=!0;break;case"ArrowDown":i.down=!0,i.f.down=!0;break;case"ArrowLeft":i.left=!0,i.f.left=!0;break;case"ArrowRight":i.right=!0,i.f.right=!0;break;case"z":case"Z":i.z=!0,i.f.z=!0;break;case"x":case"X":i.x=!0,i.f.x=!0;break;case"c":case"C":i.c=!0,i.f.c=!0;break;case"d":case"D":i.d=!0,i.f.d=!0;break}}),window.addEventListener("keyup",w=>{switch(w.key){case"ArrowUp":i.up=!1;break;case"ArrowDown":i.down=!1;break;case"ArrowLeft":i.left=!1;break;case"ArrowRight":i.right=!1;break;case"z":case"Z":i.z=!1;break;case"x":case"X":i.x=!1;break;case"c":case"C":i.c=!1;break;case"d":case"D":i.d=!1;break}}),t.addEventListener("mousedown",w=>{n.clicking=!0;const x=r.raw_to_stage(w.x,w.y);n.x=x.x,n.y=x.y}),t.addEventListener("mousemove",w=>{const x=r.raw_to_stage(w.x,w.y);n.x=x.x,n.y=x.y}),t.addEventListener("mouseup",w=>{n.clicking=!1;const x=r.raw_to_stage(w.x,w.y);n.x=x.x,n.y=x.y});let f,_;{let w={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1};f=()=>{["up","down","left","right","z","x","c","d"].forEach(x=>{w[x]&&(i.f[x]=!1)}),w={...i.f}},_=()=>{g.tick()}}const{frameWhile:u,frameFor:b,frameLoop:v}=L(f,_);return{canvas:t,ctx:c,Images:h,Audios:l,Fonts:p,inputKeys:i,inputMouse:n,props:s,cLib:a,aLib:g,Sprite:o,for:b,while:u,loop:v}},S=2,B=640,C=480,G=800,j=400,T="canvas",K={display_quality:S,stage_width:B,stage_height:C,display_width:G,display_height:j,canvas_name:T},W=(e,t,c,d)=>{let h={};const l=class M extends c{constructor(s,a,g,o,r,f,_,u,b,v){super(s,a,g,o,void 0,!0),this.start_x=s,this.start_y=a,this.start_d=g,this.move_x=f,this.move_y=_,this.move_d=u,this.start_len=r,this.move_len=b,this.len=r,this.age=0,this.id=M.current_id,this.width=o,h[this.id]=this,M.current_id++}move_self(){this.age++,this.x=this.start_x+M.get_move(this.move_x,this.age),this.y=this.start_y+M.get_move(this.move_y,this.age),this.d=this.start_d+M.get_move(this.move_d,this.age),this.len=this.start_len+M.get_move(this.move_len,this.age)}draw(){y(this.d),e.stamp("bone_head_white",this.x+y(this.d)*this.width*8/6,this.y-m(this.d)*this.width*8/6,this.d+180,this.width*100/6,1,"start"),e.drawRect(this.x+m(this.d)*this.width*6/6,this.y+y(this.d)*this.width*6/6,this.width,this.len+this.width*2/6,"white",this.d,1,"start"),e.stamp("bone_head_white",this.x+m(this.d)*(this.len+this.width*14/6)-y(this.d)*this.width*2/6,this.y+y(this.d)*(this.len+this.width*14/6)+m(this.d)*this.width*2/6,this.d,this.width*100/6,1,"start")}judge(){{const s=d.soul.x-this.x,a=d.soul.y-this.y,g=s*y(this.d)+a*-m(this.d),o=a*y(this.d)+s*m(this.d);this.len+this.width*14/6>o&&o>0&&this.width>g&&g>0&&d.damage(2)}}static process(){for(const s in h){const a=h[s];a.move_self(),a.draw(),a.judge()}}static get_move(s,a){if(typeof s=="number")return s*a;switch(s.type){case"sin":case"cos":return m(s.cycle*a)*s.amp;case"custom":return s.fn(a)}}};l.current_id=0;let p=l;return{boneDict:h,normal:p,process:()=>{p.process()}}},U={height_basic:15,width_basic:2,name:"determination"},V={left:10,up:34,width:6,height:9,gap:0},X={left:20,up:34,width:6,height:9,gap:0},Z={left:30,up:34,width:6,height:9,gap:0},N={left:40,up:34,width:6,height:9,gap:0},H={left:50,up:34,width:6,height:9,gap:0},J={left:60,up:34,width:6,height:9,gap:0},O={left:70,up:34,width:6,height:9,gap:0},Q={left:80,up:34,width:6,height:9,gap:0},Y={left:90,up:34,width:6,height:9,gap:0},tt={left:100,up:34,width:6,height:9,gap:0},et={left:110,up:34,width:6,height:9,gap:0},st={left:120,up:34,width:6,height:9,gap:0},it={left:130,up:34,width:7,height:9,gap:0},ht={left:140,up:34,width:6,height:9,gap:0},at={left:150,up:34,width:6,height:9,gap:0},nt={left:0,up:50,width:6,height:9,gap:0},lt={left:10,up:50,width:6,height:9,gap:0},pt={left:20,up:50,width:6,height:9,gap:0},gt={left:30,up:50,width:6,height:9,gap:0},ot={left:40,up:50,width:6,height:9,gap:0},dt={left:50,up:50,width:6,height:9,gap:0},rt={left:60,up:50,width:6,height:9,gap:0},ct={left:70,up:50,width:7,height:9,gap:0},ut={left:80,up:50,width:6,height:9,gap:0},wt={left:90,up:50,width:6,height:9,gap:0},_t={left:100,up:50,width:6,height:9,gap:0},ft={left:10,up:68,width:6,height:7,gap:2},mt={left:20,up:66,width:6,height:9,gap:0},yt={left:30,up:68,width:6,height:7,gap:2},bt={left:40,up:66,width:6,height:9,gap:0},xt={left:50,up:68,width:6,height:7,gap:2},vt={left:60,up:66,width:6,height:9,gap:0},$t={left:70,up:68,width:6,height:10,gap:5},kt={left:80,up:66,width:6,height:9,gap:0},qt={left:90,up:65,width:6,height:10,gap:-1},Mt={left:100,up:65,width:6,height:13,gap:2},zt={left:110,up:66,width:6,height:9,gap:0},Lt={left:120,up:66,width:6,height:9,gap:0},At={left:130,up:68,width:7,height:7,gap:2},Pt={left:140,up:68,width:6,height:7,gap:2},Et={left:150,up:68,width:6,height:7,gap:2},Dt={left:0,up:84,width:6,height:10,gap:2},Ft={left:10,up:84,width:6,height:10,gap:2},It={left:20,up:84,width:6,height:7,gap:2},Rt={left:30,up:84,width:6,height:7,gap:2},St={left:40,up:82,width:6,height:9,gap:0},Bt={left:50,up:84,width:6,height:7,gap:2},Ct={left:60,up:84,width:6,height:7,gap:2},Gt={left:70,up:84,width:7,height:7,gap:2},jt={left:80,up:84,width:6,height:7,gap:2},Tt={left:90,up:84,width:6,height:10,gap:2},Kt={left:100,up:84,width:6,height:7,gap:2},Wt={left:0,up:0,width:1,height:1,gap:0},Ut={left:150,up:82,width:6,height:9,gap:0},Vt={left:40,up:0,width:6,height:13,gap:0},Xt={left:150,up:61,width:4,height:1,gap:14},Zt={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:U,A:V,B:X,C:Z,D:N,E:H,F:J,G:O,H:Q,I:Y,J:tt,K:et,L:st,M:it,N:ht,O:at,P:nt,Q:lt,R:pt,S:gt,T:ot,U:dt,V:rt,W:ct,X:ut,Y:wt,Z:_t,a:ft,b:mt,c:yt,d:bt,e:xt,f:vt,g:$t,h:kt,i:qt,j:Mt,k:zt,l:Lt,m:At,n:Pt,o:Et,p:Dt,q:Ft,r:It,s:Rt,t:St,u:Bt,v:Ct,w:Gt,x:jt,y:Tt,z:Kt,space:Wt,irregular:Ut,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Vt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:-5},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:0},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Xt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Nt={height_basic:6,width_basic:1,name:"status"},Ht={left:6,up:14,width:4,height:5,gap:0},Jt={left:12,up:14,width:4,height:5,gap:0},Ot={left:18,up:14,width:4,height:5,gap:0},Qt={left:24,up:14,width:4,height:5,gap:0},Yt={left:30,up:14,width:4,height:5,gap:0},te={left:36,up:14,width:4,height:5,gap:0},ee={left:42,up:14,width:4,height:5,gap:0},se={left:48,up:14,width:4,height:5,gap:0},ie={left:54,up:14,width:4,height:5,gap:0},he={left:60,up:14,width:4,height:5,gap:0},ae={left:66,up:14,width:4,height:5,gap:0},ne={left:72,up:14,width:4,height:5,gap:0},le={left:78,up:14,width:5,height:5,gap:0},pe={left:84,up:14,width:4,height:5,gap:0},ge={left:90,up:14,width:4,height:5,gap:0},oe={left:0,up:21,width:4,height:5,gap:0},de={left:6,up:21,width:4,height:5,gap:0},re={left:12,up:21,width:4,height:5,gap:0},ce={left:18,up:21,width:4,height:5,gap:0},ue={left:24,up:21,width:4,height:5,gap:0},we={left:30,up:21,width:4,height:5,gap:0},_e={left:36,up:21,width:4,height:5,gap:0},fe={left:42,up:21,width:5,height:5,gap:0},me={left:48,up:21,width:4,height:5,gap:0},ye={left:54,up:21,width:4,height:5,gap:0},be={left:60,up:21,width:4,height:5,gap:0},xe={left:6,up:28,width:4,height:5,gap:0},ve={left:12,up:28,width:4,height:5,gap:0},$e={left:18,up:28,width:4,height:5,gap:0},ke={left:24,up:28,width:4,height:5,gap:0},qe={left:30,up:28,width:4,height:5,gap:0},Me={left:36,up:28,width:4,height:5,gap:0},ze={left:42,up:28,width:4,height:5,gap:0},Le={left:48,up:28,width:4,height:5,gap:0},Ae={left:54,up:28,width:4,height:5,gap:0},Pe={left:60,up:28,width:4,height:5,gap:0},Ee={left:66,up:28,width:4,height:5,gap:0},De={left:72,up:28,width:4,height:5,gap:0},Fe={left:78,up:28,width:5,height:5,gap:0},Ie={left:84,up:28,width:4,height:5,gap:0},Re={left:90,up:28,width:4,height:5,gap:0},Se={left:0,up:35,width:4,height:5,gap:0},Be={left:6,up:35,width:4,height:5,gap:0},Ce={left:12,up:35,width:4,height:5,gap:0},Ge={left:18,up:35,width:4,height:5,gap:0},je={left:24,up:35,width:4,height:5,gap:0},Te={left:30,up:35,width:4,height:5,gap:0},Ke={left:36,up:35,width:4,height:5,gap:0},We={left:42,up:35,width:5,height:5,gap:0},Ue={left:48,up:35,width:4,height:5,gap:0},Ve={left:54,up:35,width:4,height:5,gap:0},Xe={left:60,up:35,width:4,height:5,gap:0},Ze={left:0,up:0,width:4,height:1,gap:0},Ne={left:90,up:35,width:4,height:5,gap:0},He={left:24,up:0,width:5,height:5,gap:0},Je={left:90,up:25,width:4,height:1,gap:4},Oe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Nt,A:Ht,B:Jt,C:Ot,D:Qt,E:Yt,F:te,G:ee,H:se,I:ie,J:he,K:ae,L:ne,M:le,N:pe,O:ge,P:oe,Q:de,R:re,S:ce,T:ue,U:we,V:_e,W:fe,X:me,Y:ye,Z:be,a:xe,b:ve,c:$e,d:ke,e:qe,f:Me,g:ze,h:Le,i:Ae,j:Pe,k:Ee,l:De,m:Fe,n:Ie,o:Re,p:Se,q:Be,r:Ce,s:Ge,t:je,u:Te,v:Ke,w:We,x:Ue,y:Ve,z:Xe,space:Ze,irregular:Ne,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:He,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Je,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},Qe=(e,t)=>{const c={en:Zt,status:Oe};let d={};class h{constructor(s){this.name=s}delete(){delete d[this.name]}}class l extends h{constructor(s,a,g,o,r,f,_){super(s),this._={all_str:_.reduce((u,b)=>u+b.str,""),now:[{str:"",color:_[0].color,spacing_x:_[0].spacing_x,spacing_y:_[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=a,this.y=g,this.direction=o,this.size=r,this.data=_,this.font=(u=>{switch(u){case"status":return c.status;default:return c.en}})(f),d[s]=this,this.process()}write(){const s=this.size,a=this.direction*Math.PI/180,g=this._.now.reduce((u,b)=>u+b.str.length,0);let o=0,r=0,f=0;const _=u=>u in this.font?this.font[u]:this.font.space;return this._.now.forEach(u=>{u.str.split("").forEach(v=>{const w=_(v);v==`
`?(o=0,r+=this.font.props.height_basic+u.spacing_y):(e.stamp(this.font.props.name+"_"+u.color,this.x+(Math.cos(a)*o-Math.sin(a)*(r+w.gap/2))*s/100,this.y+(Math.sin(a)*o+Math.cos(a)*(r+w.gap/2))*s/100,this.direction,s,1,"start",{left:w.left,top:w.up,width:w.width,height:w.height}),f+1<g&&(o+=w.width+this.font.props.width_basic+u.spacing_x)),f++})}),this}process(){const s=this.data.reduce((a,g)=>a+g.str.length,0);if(this._.len_allow==s&&t.z){delete d[this.name];return}else t.x?(this._.len_allow=s,this._.current_char=s):this._.len_allow<s&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,s);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class p extends h{constructor(s,a,g,o,r,f,_,u,b,v,w){super(s),this.str_now="",this.len_now=0,this.str=a,this.x=g,this.y=o,this.direction=r,this.size=f,this.color=_,this.spacing_x=u,this.spacing_y=b,this.speed=v,this.font=(x=>{switch(x){case"status":return c.status;default:return c.en}})(w),this.len_allow=0,d[s]=this,this.process()}write(){const s=this.str_now,a=this.size,g=this.direction*Math.PI/180;let o,r;[o,r]=[0,0];const f=_=>_ in this.font?this.font[_]:this.font.space;for(let _=0;_<s.length;_++){const u=f(s[_]);s[_]==`
`?(o=0,r+=this.font.props.height_basic+this.spacing_y):(e.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(g)*o-Math.sin(g)*(r-u.gap))*a/100,this.y+(Math.sin(g)*o+Math.cos(g)*(r-u.gap))*a/100,this.direction,a,1,"start",{left:u.left,top:u.up,width:u.width,height:u.height}),_+1<s.length&&(o+=u.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.len_allow==this.str.length&&t.z){delete d[this.name];return}else t.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed);for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length]}}return{Super:l,Plane:p,process:()=>{for(const n in d)d[n].process()},dict:d}},Ye=(e,t)=>{class c{constructor(p,i,n,s,a,g,o=4){this.dx=p,this.dy=i,this.dd=n,this.len=s,this.align=a,this.width=o,this.soul_size=6,this.relative=g||(()=>{const r=this.dd,f=t.x-this.dx;return(t.y-this.dy)*y(r)+f*m(r)>0?"plus":"minus"})()}judge(){const p=this.dd,i=t.x-this.dx,n=t.y-this.dy,s=i*y(p)+n*-m(p),a=n*y(p)+i*m(p);if(this.len/2>s&&s>-this.len/2){if(this.relative=="minus"&&a>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>a){const g=s*y(-p)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*m(-p),o=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-y(-p)+s*m(-p);t.x=g+this.dx,t.y=o+this.dy}}else a>0?this.relative="plus":this.relative="minus"}draw(){e.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class d{constructor(p,i,n,s=4){this.dx=p,this.dy=i,this.dd=n,this.width=s}judge(){const p=this.dd,i=t.x-this.dx,n=t.y-this.dy,s=i*y(p)+n*-m(p);if(n*y(p)+i*m(p)>-this.width){const g=s*y(-p)+this.width*m(-p),o=this.width*-y(-p)+s*m(-p);t.x=g+this.dx,t.y=o+this.dy}}draw(){const p=this.dx+320*m(this.dd),i=this.dy+320*y(this.dd);e.drawRect(p,i,640,640,"#ffffff88",this.dd,1,"center++")}}const h={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:6,walls:[],draw(){this.walls.forEach(l=>{const p=l.dx+640*m(l.dd),i=l.dy+640*y(l.dd);e.drawRect(p,i,1280,1280,"#ffffff",l.dd,1,"center++")}),this.walls.forEach(l=>{const p=l.dx+640*m(l.dd),i=l.dy+640*y(l.dd);e.drawRect(p,i,1280-l.width*2,1280-l.width*2,"#000000",l.dd,1,"center++")})},judge(){this.walls.forEach(l=>{l.judge()})},update(){{const l=this.dire,p=this.center_x,i=this.center_y,n=this.walls[0];n.dd=l,n.dx=p+this.height/2*m(l),n.dy=i+this.height/2*y(l)}{const l=this.dire+90,p=this.center_x,i=this.center_y,n=this.walls[1];n.dd=l,n.dx=p+this.height/2*m(l),n.dy=i+this.height/2*y(l)}{const l=this.dire+180,p=this.center_x,i=this.center_y,n=this.walls[2];n.dd=l,n.dx=p+this.height/2*m(l),n.dy=i+this.height/2*y(l)}{const l=this.dire+270,p=this.center_x,i=this.center_y,n=this.walls[3];n.dd=l,n.dx=p+this.height/2*m(l),n.dy=i+this.height/2*y(l)}},init(){this.walls.push(new d(0,0,0,this.thickness)),this.walls.push(new d(0,0,90,this.thickness)),this.walls.push(new d(0,0,180,this.thickness)),this.walls.push(new d(0,0,270,this.thickness))}};return h.init(),{Wall:c,box:h}},ts=(e,t,c,d)=>{let h={};const l=class z extends c{constructor(s,a,g,o,r,f,_,u,b,v,w){super(o,r,f,_,"gb_1",!0),this.s_x=o,this.s_y=r,this.s_d=f,this.t_x=s,this.t_y=a,this.t_d=g,this.c_t=b,this.b_s=v,this.b_d=w,this.width=u,this.age=0,this.id=z.current_id,h[z.current_id]=this,z.current_id++,t.play("gb_charge",1)}move_self(){if(this.age<this.c_t){let s=(this.c_t-this.age)**4/this.c_t**4;this.x=s*this.s_x+(1-s)*this.t_x,this.y=s*this.s_y+(1-s)*this.t_y,this.d=s*this.s_d+(1-s)*this.t_d,console.log(s)}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let s=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(s/2)}}draw(){this.b_s+this.c_t<this.age&&e.drawRect(this.x+m(this.d)*4800/-2,this.y+y(this.d)*4800/-2,this.width*this.size/5*(1+m(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const s=d.soul.x-this.x,a=d.soul.y-this.y,g=s*y(this.d)+a*-m(this.d),o=a*y(this.d)+s*m(this.d);this.b_s+this.c_t<=this.age&&0>o&&this.width*this.size/10>g&&g>-this.width*this.size/10&&d.damage(2)}}static process(){for(const s in h){const a=h[s];a.move_self(),a.draw(),a.judge(),a.age++,a.b_d+a.b_s==a.age&&t.play("gb_fire",1),a.b_d+a.b_s+a.c_t<=a.age&&delete h[s]}}};l.current_id=0;let p=l;return{gbDict:h,gb:p,process:()=>{p.process()}}},es=async()=>{const e=await R(K);let t="menu";const c=Qe(e.cLib,e.inputKeys);{let l=0;await e.while(()=>t==="menu",()=>{e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),e.inputKeys.f.up&&(l--,e.aLib.play("cursor_move")),e.inputKeys.f.down&&(l++,e.aLib.play("cursor_move")),e.cLib.stamp("soul",220,-l*50+240);const p=new c.Plane("_","play",270,250,0,200,"yellow",0,0,0,"en");p.write(),p.delete(),e.inputKeys.f.z&&(t="battle",e.aLib.play("cursor_confirm"))})}let d=0;const h={lv:1,hp:20,hp_max:20,soul:new e.Sprite(320,240,0,80,"soul",!0),damage(l){this.hp-=l,e.aLib.play("damage",2),this.hp<=0&&(t="game_over")}};{d=0;const l=ts(e.cLib,e.aLib,e.Sprite,h),p=W(e.cLib,e.aLib,e.Sprite,h);Ye(e.cLib,h.soul);const i=ss(e.cLib,c.Plane,h);new l.gb(100,200,0,400,600,90,100,1,60,60,60),await e.while(()=>t==="battle",()=>{if(d++,e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),e.inputKeys.up&&(h.soul.y+=3.5),e.inputKeys.down&&(h.soul.y-=3.5),e.inputKeys.right&&(h.soul.x+=3.5),e.inputKeys.left&&(h.soul.x-=3.5),0<=d&&d<300&&d%10==0){const n=d*2,s=100,a=y(n)*s,g=-m(n)*s;new l.gb(320+a,240+g,n+90,320+a*10,240+g*10,n,100,1,60,60,20)}p.process(),l.process(),c.process(),i(),h.soul.stamp(),e.cLib.stamp("back",320,240,0,100,.2)})}{d=0;let l=[];await e.while(()=>t==="game_over",()=>{if(e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),d==0)e.aLib.play("heartbreak_1",2);else if(d<60)e.cLib.stamp("death_0",h.soul.x,h.soul.y,0,80);else if(d==60){e.aLib.play("heartbreak_2",2);for(let p=0;p<4;p++){let i=Math.random()*12-6,n=Math.random()*8+4;l.push(new e.Sprite(h.soul.x,h.soul.y,Math.random()*360,80,`death_${p+1}`,!0,s=>{s.x+=i,s.y+=n,s.d+=i,n-=.333,s.stamp()}))}}else 60<d&&d<180?l.forEach(p=>p.act()):d==180&&(t="waiting");d++})}},ss=(e,t,c)=>()=>{const d=new t("_","chara",32,75,0,300,"white",0,0,0,"status");d.write(),d.delete();const h=new t("_","lV",134,75,0,300,"white",0,0,0,"status");h.write(),h.delete();const l=new t("_",`${("00"+c.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");l.write(),l.delete();const p=new t("_",`${("00"+c.hp).slice(-2)}`,c.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");p.write(),p.delete();const i=new t("_","/",c.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");i.write(),i.delete();const n=new t("_",`${("00"+c.hp_max).slice(-2)}`,c.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");n.write(),n.delete(),e.drawRect(256,59,c.hp_max*1.2,21,"red",0,1,"start"),e.drawRect(256,59,c.hp*1.2,21,"yellow",0,1,"start"),e.stamp("hp_white",224,74,0,100,1,"start"),e.stamp("kr_white",c.hp_max*1.2+267,74,0,100,1,"start")};window.onload=es;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
