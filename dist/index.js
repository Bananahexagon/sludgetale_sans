const A=(t,s)=>{const f=(i,l,e)=>{i()?(t(),l(),s(),requestAnimationFrame(()=>f(i,l,e))):e()},u=(i,l)=>new Promise(e=>{f(i,l,e)}),a=(i,l,e,o)=>{e<i?(t(),l(e),s(),requestAnimationFrame(()=>a(i,l,e+1,o))):o()},h=(i,l,e=0)=>new Promise(o=>{a(i,l,e,o)}),n=i=>{t(),i(),s(),requestAnimationFrame(()=>n(i))};return{frameWhile:u,frameFor:h,frameLoop:n}},E=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"},{type:"audio",name:"cursor_move",src:"./assets/audios/cursor_move.wav"},{type:"audio",name:"cursor_confirm",src:"./assets/audios/cursor_confirm.wav"},{type:"audio",name:"talk_default",src:"./assets/audios/talk_default.wav"},{type:"audio",name:"text",src:"./assets/audios/text.wav"}],D=async t=>{const s={},f={},u={},a=E,h=[];return a.forEach(n=>h.push(new Promise(i=>{switch(n.type){case"image":{const l=new Image;l.src=n.src,l.onload=()=>{s[n.name]=l,i()}}break;case"audio":{const l=new Audio(n.src);l.autoplay=!1,l.muted=!0,l.addEventListener("loadeddata",()=>{l.muted=!1,(async()=>{const o=await(await fetch(n.src)).arrayBuffer();f[n.name]={ctx:await t.decodeAudioData(o),data:l,time:1/0},l.onload=()=>i()})().then(i)})}break;case"font":(async()=>{const o=await(await(await fetch(n.src)).text()).match(/url\(.+?\)/g);if(!o)throw new Error("フォントが見つかりませんでした");const d=[];o.forEach(p=>{d.push((async()=>{const r=new FontFace(n.name,p);await r.load(),u[n.name]=r,await document.fonts.add(r)})())}),Promise.all(d)})().then(i);break}}))),await Promise.all(h),{Images:s,Audios:f,Fonts:u}},b=t=>Math.sin(t/360*Math.PI*2),x=t=>Math.cos(t/360*Math.PI*2),F=(t,s,f,u,a,h)=>{const n=(o,d,p,r=0,w=100,_=1,g="center",v=1,m,c=!1)=>{if(c){const y=f[o],[k,$,q,M]=m===void 0?[0,0,y.width,y.height]:[m.left,m.top,m.width,m.height];switch(s.globalAlpha=_,g){case"center":s.save(),s.translate(d*a.display_quality,-p*a.display_quality+t.height),s.rotate(r*Math.PI/180),s.drawImage(y,k,$,q,M,-q*v*w/200*a.display_quality,-M*w/200*a.display_quality,q*v*w/100*a.display_quality,M*w/100*a.display_quality),s.restore();break;case"start":s.save(),s.translate(d*a.display_quality,-p*a.display_quality+t.height),s.rotate(r*Math.PI/180),s.drawImage(y,k,$,q,M,0,0,q*v*w/100*a.display_quality,M*w/100*a.display_quality),s.restore()}}else{const y=(x(h.d)*d-b(h.d)*p+h.x)*h.size/100,k=(b(h.d)*d+x(h.d)*p+h.y)*h.size/100,$=r+h.d;n(o,y,k,$,w*h.size/100,_,g,v,m,!0)}};return{stamp:n,drawRect:(o,d,p,r,w,_=0,g,v="center")=>{switch(s.globalAlpha=g===void 0?1:g,s.save(),v){case"center++":s.translate(o*a.display_quality,-d*a.display_quality+t.height),s.rotate(_*Math.PI/180),s.beginPath(),s.rect(-p/2*a.display_quality,-r/2*a.display_quality,p*a.display_quality,r*a.display_quality);break;case"center":s.translate((o-p/2)*a.display_quality,-(d-r/2)*a.display_quality+t.height),s.rotate(_*Math.PI/180),s.beginPath(),s.rect(0,0,p*a.display_quality,-r*a.display_quality);break;case"start":default:s.translate(o*a.display_quality,-d*a.display_quality+t.height),s.rotate(_*Math.PI/180),s.beginPath(),s.rect(0,0,p*a.display_quality,-r*a.display_quality);break}s.fillStyle=w,s.fill(),s.restore()},drawLine:(o,d,p,r,w,_,g=0)=>{switch(s.globalAlpha=1,s.beginPath(),g){case 0:s.moveTo((o-r*Math.sin(p)/2)*a.display_quality,-(d+r*Math.cos(p)/2)*a.display_quality+t.height),s.lineTo((o+r*Math.sin(p)/2)*a.display_quality,-(d-r*Math.cos(p)/2)*a.display_quality+t.height);break;case 1:s.moveTo(o*a.display_quality,-d*a.display_quality+t.height),s.lineTo((o+r*Math.sin(p))*a.display_quality,-(d-r*Math.cos(p))*a.display_quality+t.height);break}s.strokeStyle=_,s.lineWidth=w*a.display_quality,s.stroke()},drawText:(o,d,p,r,w,_="serif",g="left")=>{s.globalAlpha=1;const[v,m]=[d*a.display_quality,-p*a.display_quality+t.height];s.font=`${r*a.display_quality}px ${_}`,s.textAlign=g,s.fillStyle=w,s.fillText(o,v,m)}}},I=t=>{class s{constructor(u,a,h=0,n=100,i="",l=0,e=1,o){this.x=u,this.y=a,this.d=h,this.size=n,this.costume=i,this.alpha=l,this.width=e,this.act_=o}stamp(){this.alpha!=0&&t.stamp(this.costume,this.x,this.y,this.d,this.size,this.alpha,"center",this.width)}move(u){this.x+=b(this.d)*u,this.y+=x(this.d)*u}act(){(this.act_||(()=>{}))(this)}}return s},R=(t,s,f)=>({raw_to_stage:(a,h,n=0)=>{const i=t.getBoundingClientRect(),l=((a-i.left)/f.size*100-f.x)*s.stage_width/s.display_width,e=(s.display_height-((h-i.top)/f.size*100-f.y))*s.stage_height/s.display_height,o=n+f.d;return{x:l,y:e,d:o}}}),K=t=>{const s=new(window.AudioContext||window.webkitAudioContext);return{play:(a,h=0,n=1)=>{if(h<=t[a].time){const i=s.createGain(),l=s.createBufferSource();l.buffer=t[a].ctx,i.gain.setValueAtTime(n,s.currentTime),l.connect(i),i.connect(s.destination),l.start(0),t[a].time=0}},tick:()=>{for(const a in t)t[a].time++}}},S=async t=>{const s=document.getElementById(t.canvas_name);s.height=t.stage_height*t.display_quality,s.width=t.stage_width*t.display_quality;const f=s.getContext("2d"),u=new(window.AudioContext||window.webkitAudioContext),{Images:a,Audios:h,Fonts:n}=await D(u),i={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1,f:{up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1}},l={x:0,y:0,clicking:!1,is_in_rect(c,y,k,$,q="center"){switch(q){case"center":return c-k/2<this.x&&this.x<c+k/2&&y-$/2<this.y&&this.y<y+$/2;case"start":default:return c<this.x&&this.x<c+k&&y<this.y&&this.y<y+$}}},e={canvas:{size:100,x:0,y:0,d:0}},o=F(s,f,a,n,t,e.canvas),d=K(h),p=I(o);f.imageSmoothingEnabled=!1;const r=R(s,t,e.canvas);window.addEventListener("keydown",c=>{switch(c.key){case"ArrowUp":i.up=!0,i.f.up=!0;break;case"ArrowDown":i.down=!0,i.f.down=!0;break;case"ArrowLeft":i.left=!0,i.f.left=!0;break;case"ArrowRight":i.right=!0,i.f.right=!0;break;case"z":case"Z":i.z=!0,i.f.z=!0;break;case"x":case"X":i.x=!0,i.f.x=!0;break;case"c":case"C":i.c=!0,i.f.c=!0;break;case"d":case"D":i.d=!0,i.f.d=!0;break}}),window.addEventListener("keyup",c=>{switch(c.key){case"ArrowUp":i.up=!1;break;case"ArrowDown":i.down=!1;break;case"ArrowLeft":i.left=!1;break;case"ArrowRight":i.right=!1;break;case"z":case"Z":i.z=!1;break;case"x":case"X":i.x=!1;break;case"c":case"C":i.c=!1;break;case"d":case"D":i.d=!1;break}}),s.addEventListener("mousedown",c=>{l.clicking=!0;const y=r.raw_to_stage(c.x,c.y);l.x=y.x,l.y=y.y}),s.addEventListener("mousemove",c=>{const y=r.raw_to_stage(c.x,c.y);l.x=y.x,l.y=y.y}),s.addEventListener("mouseup",c=>{l.clicking=!1;const y=r.raw_to_stage(c.x,c.y);l.x=y.x,l.y=y.y});let w,_;{let c={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1};w=()=>{["up","down","left","right","z","x","c","d"].forEach(y=>{c[y]&&(i.f[y]=!1)}),c={...i.f}},_=()=>{d.tick()}}const{frameWhile:g,frameFor:v,frameLoop:m}=A(w,_);return{canvas:s,ctx:f,Images:a,Audios:h,Fonts:n,inputKeys:i,inputMouse:l,props:e,cLib:o,aLib:d,Sprite:p,for:v,while:g,loop:m}},B=2,G=640,C=480,T=800,j=400,W="canvas",U={display_quality:B,stage_width:G,stage_height:C,display_width:T,display_height:j,canvas_name:W},V=(t,s,f,u)=>{let a={};const h=class L extends f{constructor(e,o,d,p,r,w,_,g,v,m){super(e,o,d,p,void 0,1,1),this.start_x=e,this.start_y=o,this.start_d=d,this.move_x=w,this.move_y=_,this.move_d=g,this.start_len=r,this.move_len=v,this.len=r,this.age=0,this.id=L.current_id,this.b_width=p,a[this.id]=this,L.current_id++}move_self(){this.age++,this.x=this.start_x+L.get_move(this.move_x,this.age),this.y=this.start_y+L.get_move(this.move_y,this.age),this.d=this.start_d+L.get_move(this.move_d,this.age),this.len=this.start_len+L.get_move(this.move_len,this.age)}draw(){x(this.d),t.stamp("bone_head_white",this.x+x(this.d)*this.b_width*8/6,this.y-b(this.d)*this.b_width*8/6,this.d+180,this.b_width*100/6,1,"start"),t.drawRect(this.x+b(this.d)*this.b_width*6/6,this.y+x(this.d)*this.b_width*6/6,this.b_width,this.len+this.b_width*2/6,"white",this.d,1,"start"),t.stamp("bone_head_white",this.x+b(this.d)*(this.len+this.b_width*14/6)-x(this.d)*this.b_width*2/6,this.y+x(this.d)*(this.len+this.b_width*14/6)+b(this.d)*this.b_width*2/6,this.d,this.b_width*100/6,1,"start")}judge(){{const e=u.soul.x-this.x,o=u.soul.y-this.y,d=e*x(this.d)+o*-b(this.d),p=o*x(this.d)+e*b(this.d);this.len+this.b_width*14/6>p&&p>0&&this.b_width>d&&d>0&&u.damage(1)}}static process(){for(const e in a){const o=a[e];o.move_self(),o.draw(),o.judge()}}static get_move(e,o){if(typeof e=="number")return e*o;switch(e.type){case"sin":case"cos":return b(e.cycle*o)*e.amp;case"custom":return e.fn(o)}}};h.current_id=0;let n=h;return{boneDict:a,normal:n,process:()=>{n.process()}}},X={height_basic:15,width_basic:2,name:"determination"},Y={left:10,up:34,width:6,height:9,gap:0},Z={left:20,up:34,width:6,height:9,gap:0},N={left:30,up:34,width:6,height:9,gap:0},H={left:40,up:34,width:6,height:9,gap:0},J={left:50,up:34,width:6,height:9,gap:0},O={left:60,up:34,width:6,height:9,gap:0},Q={left:70,up:34,width:6,height:9,gap:0},tt={left:80,up:34,width:6,height:9,gap:0},et={left:90,up:34,width:6,height:9,gap:0},st={left:100,up:34,width:6,height:9,gap:0},it={left:110,up:34,width:6,height:9,gap:0},ht={left:120,up:34,width:6,height:9,gap:0},at={left:130,up:34,width:7,height:9,gap:0},nt={left:140,up:34,width:6,height:9,gap:0},lt={left:150,up:34,width:6,height:9,gap:0},ot={left:0,up:50,width:6,height:9,gap:0},pt={left:10,up:50,width:6,height:9,gap:0},dt={left:20,up:50,width:6,height:9,gap:0},rt={left:30,up:50,width:6,height:9,gap:0},gt={left:40,up:50,width:6,height:9,gap:0},ct={left:50,up:50,width:6,height:9,gap:0},ut={left:60,up:50,width:6,height:9,gap:0},wt={left:70,up:50,width:7,height:9,gap:0},_t={left:80,up:50,width:6,height:9,gap:0},ft={left:90,up:50,width:6,height:9,gap:0},mt={left:100,up:50,width:6,height:9,gap:0},yt={left:10,up:68,width:6,height:7,gap:2},bt={left:20,up:66,width:6,height:9,gap:0},xt={left:30,up:68,width:6,height:7,gap:2},vt={left:40,up:66,width:6,height:9,gap:0},$t={left:50,up:68,width:6,height:7,gap:2},kt={left:60,up:66,width:6,height:9,gap:0},qt={left:70,up:68,width:6,height:10,gap:2},Mt={left:80,up:66,width:6,height:9,gap:0},Lt={left:90,up:65,width:6,height:10,gap:-1},zt={left:100,up:65,width:6,height:13,gap:2},Pt={left:110,up:66,width:6,height:9,gap:0},At={left:120,up:66,width:6,height:9,gap:0},Et={left:130,up:68,width:7,height:7,gap:2},Dt={left:140,up:68,width:6,height:7,gap:2},Ft={left:150,up:68,width:6,height:7,gap:2},It={left:0,up:84,width:6,height:10,gap:2},Rt={left:10,up:84,width:6,height:10,gap:2},Kt={left:20,up:84,width:6,height:7,gap:2},St={left:30,up:84,width:6,height:7,gap:2},Bt={left:40,up:82,width:6,height:9,gap:0},Gt={left:50,up:84,width:6,height:7,gap:2},Ct={left:60,up:84,width:6,height:7,gap:2},Tt={left:70,up:84,width:7,height:7,gap:2},jt={left:80,up:84,width:6,height:7,gap:2},Wt={left:90,up:84,width:6,height:10,gap:2},Ut={left:100,up:84,width:6,height:7,gap:2},Vt={left:0,up:0,width:6,height:1,gap:0},Xt={left:150,up:82,width:6,height:9,gap:0},Yt={left:40,up:0,width:6,height:13,gap:0},Zt={left:150,up:61,width:4,height:1,gap:14},Nt={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:X,A:Y,B:Z,C:N,D:H,E:J,F:O,G:Q,H:tt,I:et,J:st,K:it,L:ht,M:at,N:nt,O:lt,P:ot,Q:pt,R:dt,S:rt,T:gt,U:ct,V:ut,W:wt,X:_t,Y:ft,Z:mt,a:yt,b:bt,c:xt,d:vt,e:$t,f:kt,g:qt,h:Mt,i:Lt,j:zt,k:Pt,l:At,m:Et,n:Dt,o:Ft,p:It,q:Rt,r:Kt,s:St,t:Bt,u:Gt,v:Ct,w:Tt,x:jt,y:Wt,z:Ut,space:Vt,irregular:Xt,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Yt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:0},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:3},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Zt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Ht={height_basic:6,width_basic:1,name:"status"},Jt={left:6,up:14,width:4,height:5,gap:0},Ot={left:12,up:14,width:4,height:5,gap:0},Qt={left:18,up:14,width:4,height:5,gap:0},te={left:24,up:14,width:4,height:5,gap:0},ee={left:30,up:14,width:4,height:5,gap:0},se={left:36,up:14,width:4,height:5,gap:0},ie={left:42,up:14,width:4,height:5,gap:0},he={left:48,up:14,width:4,height:5,gap:0},ae={left:54,up:14,width:4,height:5,gap:0},ne={left:60,up:14,width:4,height:5,gap:0},le={left:66,up:14,width:4,height:5,gap:0},oe={left:72,up:14,width:4,height:5,gap:0},pe={left:78,up:14,width:5,height:5,gap:0},de={left:84,up:14,width:4,height:5,gap:0},re={left:90,up:14,width:4,height:5,gap:0},ge={left:0,up:21,width:4,height:5,gap:0},ce={left:6,up:21,width:4,height:5,gap:0},ue={left:12,up:21,width:4,height:5,gap:0},we={left:18,up:21,width:4,height:5,gap:0},_e={left:24,up:21,width:4,height:5,gap:0},fe={left:30,up:21,width:4,height:5,gap:0},me={left:36,up:21,width:4,height:5,gap:0},ye={left:42,up:21,width:5,height:5,gap:0},be={left:48,up:21,width:4,height:5,gap:0},xe={left:54,up:21,width:4,height:5,gap:0},ve={left:60,up:21,width:4,height:5,gap:0},$e={left:6,up:28,width:4,height:5,gap:0},ke={left:12,up:28,width:4,height:5,gap:0},qe={left:18,up:28,width:4,height:5,gap:0},Me={left:24,up:28,width:4,height:5,gap:0},Le={left:30,up:28,width:4,height:5,gap:0},ze={left:36,up:28,width:4,height:5,gap:0},Pe={left:42,up:28,width:4,height:5,gap:0},Ae={left:48,up:28,width:4,height:5,gap:0},Ee={left:54,up:28,width:4,height:5,gap:0},De={left:60,up:28,width:4,height:5,gap:0},Fe={left:66,up:28,width:4,height:5,gap:0},Ie={left:72,up:28,width:4,height:5,gap:0},Re={left:78,up:28,width:5,height:5,gap:0},Ke={left:84,up:28,width:4,height:5,gap:0},Se={left:90,up:28,width:4,height:5,gap:0},Be={left:0,up:35,width:4,height:5,gap:0},Ge={left:6,up:35,width:4,height:5,gap:0},Ce={left:12,up:35,width:4,height:5,gap:0},Te={left:18,up:35,width:4,height:5,gap:0},je={left:24,up:35,width:4,height:5,gap:0},We={left:30,up:35,width:4,height:5,gap:0},Ue={left:36,up:35,width:4,height:5,gap:0},Ve={left:42,up:35,width:5,height:5,gap:0},Xe={left:48,up:35,width:4,height:5,gap:0},Ye={left:54,up:35,width:4,height:5,gap:0},Ze={left:60,up:35,width:4,height:5,gap:0},Ne={left:0,up:0,width:4,height:1,gap:0},He={left:90,up:35,width:4,height:5,gap:0},Je={left:24,up:0,width:5,height:5,gap:0},Oe={left:90,up:25,width:4,height:1,gap:4},Qe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Ht,A:Jt,B:Ot,C:Qt,D:te,E:ee,F:se,G:ie,H:he,I:ae,J:ne,K:le,L:oe,M:pe,N:de,O:re,P:ge,Q:ce,R:ue,S:we,T:_e,U:fe,V:me,W:ye,X:be,Y:xe,Z:ve,a:$e,b:ke,c:qe,d:Me,e:Le,f:ze,g:Pe,h:Ae,i:Ee,j:De,k:Fe,l:Ie,m:Re,n:Ke,o:Se,p:Be,q:Ge,r:Ce,s:Te,t:je,u:We,v:Ue,w:Ve,x:Xe,y:Ye,z:Ze,space:Ne,irregular:He,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:Je,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Oe,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},ts=(t,s,f)=>{const u={en:Nt,status:Qe};let a=0,h={};class n{constructor(p){this.name=p}delete(){delete h[this.name]}}class i extends n{constructor(p,r,w,_,g,v,m){super(p),this._={all_str:m.reduce((c,y)=>c+y.str,""),now:[{str:"",color:m[0].color,spacing_x:m[0].spacing_x,spacing_y:m[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=r,this.y=w,this.direction=_,this.size=g,this.data=m,this.font=(c=>{switch(c){case"status":return u.status;default:return u.en}})(v),h[p=="_"?`auto$${a++}`:p]=this,this.process()}write(){const p=this.size,r=this.direction*Math.PI/180,w=this._.now.reduce((c,y)=>c+y.str.length,0);let _=0,g=0,v=0;const m=c=>c in this.font?this.font[c]:this.font.space;return this._.now.forEach(c=>{c.str.split("").forEach(k=>{const $=m(k);k==`
`?(_=0,g+=this.font.props.height_basic+c.spacing_y):(t.stamp(this.font.props.name+"_"+c.color,this.x+(Math.cos(r)*_-Math.sin(r)*(g+$.gap/2))*p/100,this.y+(Math.sin(r)*_+Math.cos(r)*(g+$.gap/2))*p/100,this.direction,p,1,"start",1,{left:$.left,top:$.up,width:$.width,height:$.height}),v+1<w&&(_+=$.width+this.font.props.width_basic+c.spacing_x)),v++})}),this}process(){const p=this.data.reduce((r,w)=>r+w.str.length,0);if(this._.len_allow==p&&f.z){delete h[this.name];return}else f.x?(this._.len_allow=p,this._.current_char=p):this._.len_allow<p&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,p);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class l extends n{constructor(p,r,w,_,g,v,m,c,y,k,$="en",q){super(p),this.str_now="",this.len_now=0,this.str=r,this.x=w,this.y=_,this.direction=g,this.size=v,this.color=m,this.spacing_x=c,this.spacing_y=y,this.speed=k,this.font=(M=>{switch(M){case"status":return u.status;default:return u.en}})($),this.len_allow=0,h[p=="_"?`auto$${a++}`:p]=this,this.voice=q,this.process()}write(){const p=this.str_now,r=this.size,w=this.direction*Math.PI/180;let _,g;[_,g]=[0,0];const v=m=>m in this.font?this.font[m]:this.font.space;for(let m=0;m<p.length;m++){const c=v(p[m]);p[m]==`
`?(_=0,g-=this.font.props.height_basic+this.spacing_y):(t.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(w)*_-Math.sin(w)*(g-c.gap))*r/100,this.y+(Math.sin(w)*_+Math.cos(w)*(g-c.gap))*r/100,this.direction,r,1,"start",1,{left:c.left,top:c.up,width:c.width,height:c.height}),m+1<p.length&&(_+=c.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.len_allow==this.str.length&&f.z?delete h[this.name]:f.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed),this.str_now.length<Math.min(this.len_allow,this.str.length)){let p=!1;for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length],p=p||this.str[this.str_now.length]!==" ";this.voice&&p&&s.play(this.voice)}}}return{write:(d,p,r,w,_,g="white",v=0,m=0,c="en")=>{const y=new l("_",d,p,r,w,_,g,v,m,0,c);y.write(),y.delete()},Super:i,Plane:l,process:()=>{for(const d in h)h[d].process()},dict:h}},es=(t,s)=>{class f{constructor(n,i,l,e,o,d,p=4){this.dx=n,this.dy=i,this.dd=l,this.len=e,this.align=o,this.width=p,this.soul_size=6,this.relative=d||(()=>{const r=this.dd,w=s.x-this.dx;return(s.y-this.dy)*x(r)+w*b(r)>0?"plus":"minus"})()}judge(){const n=this.dd,i=s.x-this.dx,l=s.y-this.dy,e=i*x(n)+l*-b(n),o=l*x(n)+i*b(n);if(this.len/2>e&&e>-this.len/2){if(this.relative=="minus"&&o>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>o){const d=e*x(-n)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*b(-n),p=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-x(-n)+e*b(-n);s.x=d+this.dx,s.y=p+this.dy}}else o>0?this.relative="plus":this.relative="minus"}draw(){t.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class u{constructor(n,i,l,e=4){this.dx=n,this.dy=i,this.dd=l,this.width=e}judge(){const n=this.dd,i=s.x-this.dx,l=s.y-this.dy,e=i*x(n)+l*-b(n);if(l*x(n)+i*b(n)>-this.width){const d=e*x(-n)+this.width*b(-n),p=this.width*-x(-n)+e*b(-n);s.x=d+this.dx,s.y=p+this.dy}}draw(){const n=this.dx+320*b(this.dd),i=this.dy+320*x(this.dd);t.drawRect(n,i,640,640,"#ffffff88",this.dd,1,"center++")}}const a={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:5,walls:[],default(){this.center_x=320,this.center_y=240,this.dire=0,this.width=100,this.height=100,this.walls=[],a.init()},set(h,n,i,l,e){this.center_x=h||this.center_x,this.center_y=n||this.center_y,this.dire=i||this.dire,this.width=l||this.width,this.height=e||this.height,a.update()},draw(){this.walls.forEach(h=>{const n=h.dx+640*b(h.dd),i=h.dy+640*x(h.dd);t.drawRect(n,i,1280,1280,"#ffffff",h.dd,1,"center++")}),this.walls.forEach(h=>{const n=h.dx+640*b(h.dd),i=h.dy+640*x(h.dd);t.drawRect(n,i,1280-h.width*2,1280-h.width*2,"#000000",h.dd,1,"center++")})},judge(){this.walls.forEach(h=>{h.judge()})},update(){{const h=this.dire,n=this.center_x,i=this.center_y,l=this.walls[0];l.dd=h,l.dx=n+this.height/2*b(h),l.dy=i+this.height/2*x(h)}{const h=this.dire+90,n=this.center_x,i=this.center_y,l=this.walls[1];l.dd=h,l.dx=n+this.width/2*b(h),l.dy=i+this.width/2*x(h)}{const h=this.dire+180,n=this.center_x,i=this.center_y,l=this.walls[2];l.dd=h,l.dx=n+this.height/2*b(h),l.dy=i+this.height/2*x(h)}{const h=this.dire+270,n=this.center_x,i=this.center_y,l=this.walls[3];l.dd=h,l.dx=n+this.width/2*b(h),l.dy=i+this.width/2*x(h)}},init(){this.walls.push(new u(0,0,0,this.thickness)),this.walls.push(new u(0,0,90,this.thickness)),this.walls.push(new u(0,0,180,this.thickness)),this.walls.push(new u(0,0,270,this.thickness))}};return a.init(),{Wall:f,box:a}},ss=(t,s,f,u)=>{let a={};const h=class P extends f{constructor(e,o,d,p,r,w,_,g,v,m,c){super(p,r,w,_,"gb_1",1,g),this.s_x=p,this.s_y=r,this.s_d=w,this.t_x=e,this.t_y=o,this.t_d=d,this.c_t=v,this.b_s=m,this.b_d=c,this.gb_width=g,this.age=0,this.id=P.current_id,a[this.id]=this,P.current_id++,s.play("gb_charge",1)}move_self(){if(this.age<this.c_t){let e=(this.c_t-this.age)**4/this.c_t**4;this.x=e*this.s_x+(1-e)*this.t_x,this.y=e*this.s_y+(1-e)*this.t_y,this.d=e*this.s_d+(1-e)*this.t_d}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let e=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(e/2)}}draw(){this.b_s+this.c_t<this.age&&t.drawRect(this.x+b(this.d)*4800/-2,this.y+x(this.d)*4800/-2,this.width*this.size/5*(1+b(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const e=u.soul.x-this.x,o=u.soul.y-this.y,d=e*x(this.d)+o*-b(this.d),p=o*x(this.d)+e*b(this.d);this.b_s+this.c_t<=this.age&&0>p&&this.gb_width*this.size/10>d&&d>-this.gb_width*this.size/10&&u.damage(1)}}static process(){for(const e in a){const o=a[e];o.move_self(),o.draw(),o.judge(),o.age++,o.b_d+o.b_s==o.age&&s.play("gb_fire",1),o.b_d+o.b_s+o.c_t<=o.age&&delete a[e]}}};h.current_id=0;let n=h;return{gbDict:a,gb:n,process:()=>{n.process()}}},is="dummy",hs=[{name:"test_food",heal:99,text:"You ate a test."}],as=[{name:"check",text:`Dummy 0 ATK 0 DEF
test enemy.`}],z={enemy_name:is,items:hs,actions:as},ns=async()=>{const t=await S(U);let[s,f]=["menu","command"];const u=ts(t.cLib,t.aLib,t.inputKeys);{let n=0;await t.while(()=>s==="menu",()=>{t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),t.inputKeys.f.up&&(n--,t.aLib.play("cursor_move")),t.inputKeys.f.down&&(n++,t.aLib.play("cursor_move")),t.cLib.stamp("soul",220,-n*50+240);const i=new u.Plane("_","play",270,250,0,200,"yellow",0,0,0,"en");i.write(),i.delete(),t.inputKeys.f.z&&(s="battle",t.aLib.play("cursor_confirm"))})}let a=0;const h={lv:1,hp:20,hp_max:20,soul:new t.Sprite(320,240,0,80,"soul",1,1),damage(n){this.hp-=n,t.aLib.play("damage",2),this.hp<=0&&(s="game_over")}};{a=0,ss(t.cLib,t.aLib,t.Sprite,h),V(t.cLib,t.aLib,t.Sprite,h);const i=es(t.cLib,h.soul).box,l=ls(t.cLib,u.Plane,h);for(i.set(320,160,0,562,132);s=="battle";)if(f=="command"){let e=[];const o=new u.Plane("_",`You feel like you're going to
have a bad time.`,80,205,0,200,"white",0,0,1,"en","text");let d=0,p;await t.while(()=>f=="command",()=>{if(t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),e.length==0)t.inputKeys.f.right&&(d=(d+1+4)%4,t.aLib.play("cursor_move")),t.inputKeys.f.left&&(d=(d-1+4)%4,t.aLib.play("cursor_move")),t.inputKeys.f.z&&(e.push(d),t.aLib.play("cursor_confirm"),d==2&&e.push(0),d==3&&e.push(0)),o.process(),o.write(),u.write("*",50,205,0,200),[h.soul.x,h.soul.y]=[282+(d-1.5)*155,27];else if(e.length==1)t.inputKeys.f.x&&(e.pop(),t.aLib.play("cursor_move")),t.inputKeys.f.z&&(e.push(0),t.aLib.play("cursor_confirm")),(e[0]==0||e[0]==1)&&(u.write(`${z.enemy_name}`,80,205,0,200),[h.soul.x,h.soul.y]=[55,195]);else if(e.length==2){const w=_=>{t.inputKeys.f.up&&(e[1]-=2,t.aLib.play("cursor_move")),t.inputKeys.f.down&&(e[1]+=2,t.aLib.play("cursor_move")),t.inputKeys.f.right&&(e[1]+=1,t.aLib.play("cursor_move")),t.inputKeys.f.left&&(e[1]-=1,t.aLib.play("cursor_move")),e[1]=Math.max(Math.min(e[1],7,_.length-1),0),[h.soul.x,h.soul.y]=[55+e[1]%2*281,195-Math.floor(e[1]%4/2)*40],e[1]<4?[0,1,2,3].forEach(g=>{g<_.length&&(g!=e[1]&&u.write("*",50+g%2*281,205-Math.floor(g%4/2)*40,0,200),u.write(`${_[g].name}`,80+g%2*281,205-Math.floor(g%4/2)*40,0,200))}):[4,5,6,7].forEach(g=>{g<_.length&&(g!=e[1]&&u.write("*",50+g%2*281,205-Math.floor(g%4/2)*40,0,200),u.write(`${_[g].name}`,80+g%2*281,205-Math.floor(g%4/2)*40,0,200))}),4<=_.length&&u.write(`PAGE ${e[1]<4?1:2}`,361,125,0,200)};e[0]!=0&&t.inputKeys.f.x&&(e[0]==1||e.pop(),e.pop(),t.aLib.play("cursor_move"),console.log(e)),e[0]==0||(e[0]==1&&e.length==2?(w(z.actions),t.inputKeys.f.z&&e.push(0)):e[0]==2&&w(z.items))}else e.length==3&&(h.soul.alpha=0,e[0]==1&&(u.write("*",50,205,0,200),p===void 0?p=new u.Plane("_",`${z.actions[e[1]].text}`,80,205,0,200,"white",0,0,1,"en","text"):p.process(),p.write()));i.draw();const r=(w,_,g,v)=>t.cLib.stamp("commands",w,_,0,100,1,"center",1,{left:v?113:0,top:45*g,width:112,height:44});[0,1,2,3].forEach(w=>r(320+(w-1.5)*155,27,w,d==w&&e.length==0)),h.soul.stamp(),l()})}}{a=0;let n=[];await t.while(()=>s==="game_over",()=>{if(t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),a==0)t.aLib.play("heartbreak_1",2);else if(a<60)t.cLib.stamp("death_0",h.soul.x,h.soul.y,0,80);else if(a==60){t.aLib.play("heartbreak_2",2);for(let i=0;i<4;i++){let l=Math.random()*12-6,e=Math.random()*8+4;n.push(new t.Sprite(h.soul.x,h.soul.y,Math.random()*360,80,`death_${i+1}`,1,1,o=>{o.x+=l,o.y+=e,o.d+=l,e-=.333,o.stamp()}))}}else 60<a&&a<180?n.forEach(i=>i.act()):a==180&&(s="waiting");a++})}},ls=(t,s,f)=>()=>{const u=new s("_","chara",32,75,0,300,"white",0,0,0,"status");u.write(),u.delete();const a=new s("_","lV",134,75,0,300,"white",0,0,0,"status");a.write(),a.delete();const h=new s("_",`${("00"+f.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");h.write(),h.delete();const n=new s("_",`${("00"+f.hp).slice(-2)}`,f.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");n.write(),n.delete();const i=new s("_","/",f.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");i.write(),i.delete();const l=new s("_",`${("00"+f.hp_max).slice(-2)}`,f.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");l.write(),l.delete(),t.drawRect(256,59,f.hp_max*1.2,21,"red",0,1,"start"),t.drawRect(256,59,f.hp*1.2,21,"yellow",0,1,"start"),t.stamp("hp_white",224,74,0,100,1,"start"),t.stamp("kr_white",f.hp_max*1.2+267,74,0,100,1,"start")};window.onload=ns;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
