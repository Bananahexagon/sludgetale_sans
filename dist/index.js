const P=(t,h)=>{const d=(i,o,p)=>{i()?(t(),o(),h(),requestAnimationFrame(()=>d(i,o,p))):p()},u=(i,o)=>new Promise(p=>{d(i,o,p)}),n=(i,o,p,e)=>{i(p)?(t(),o(p),h(),requestAnimationFrame(()=>n(i,o,p+1,e))):e()},s=(i,o,p)=>new Promise(e=>{n(o,p,i,e)}),l=i=>{t(),i(),h(),requestAnimationFrame(()=>l(i))};return{frameWhile:u,frameFor:s,frameLoop:l}},A=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"determination_black",src:"./assets/images/font/determination_black.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"enemy",src:"./assets/images/enemy.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"image",name:"speech_bubble",src:"./assets/images/speech_bubble.png"},{type:"image",name:"attack_gauge",src:"./assets/images/attack_gauge.png"},{type:"image",name:"attack_bar_0",src:"./assets/images/attack_bar_0.png"},{type:"image",name:"attack_bar_1",src:"./assets/images/attack_bar_1.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"},{type:"audio",name:"cursor_move",src:"./assets/audios/cursor_move.wav"},{type:"audio",name:"cursor_confirm",src:"./assets/audios/cursor_confirm.wav"},{type:"audio",name:"talk_default",src:"./assets/audios/talk_default.wav"},{type:"audio",name:"text",src:"./assets/audios/text.wav"},{type:"audio",name:"heal",src:"./assets/audios/heal.wav"},{type:"audio",name:"slash",src:"./assets/audios/slash.wav"}],K=async t=>{const h={},d={},u={},n=A,s=[];return n.forEach(l=>s.push(new Promise(i=>{switch(l.type){case"image":{const o=new Image;o.src=l.src,o.onload=()=>{h[l.name]=o,i()}}break;case"audio":{const o=new Audio(l.src);o.autoplay=!1,o.muted=!0,o.addEventListener("loadeddata",()=>{o.muted=!1,(async()=>{const e=await(await fetch(l.src)).arrayBuffer();d[l.name]={ctx:await t.decodeAudioData(e),data:o,time:1/0},o.onload=()=>i()})().then(i)})}break;case"font":(async()=>{const e=await(await(await fetch(l.src)).text()).match(/url\(.+?\)/g);if(!e)throw new Error("フォントが見つかりませんでした");const c=[];e.forEach(a=>{c.push((async()=>{const r=new FontFace(l.name,a);await r.load(),u[l.name]=r,await document.fonts.add(r)})())}),Promise.all(c)})().then(i);break}}))),await Promise.all(s),{Images:h,Audios:d,Fonts:u}},x=t=>Math.sin(t/360*Math.PI*2),v=t=>Math.cos(t/360*Math.PI*2),R=(t,h,d,u,n,s)=>{const l=(e,c,a,r=0,f=100,w=1,g="center",m=1,y,_=!1)=>{if(_){const b=d[e],[$,k,L,M]=y===void 0?[0,0,b.width,b.height]:[y.left,y.top,y.width,y.height];switch(h.globalAlpha=w,g){case"center":h.save(),h.translate(c*n.display_quality,-a*n.display_quality+t.height),h.rotate(r*Math.PI/180),h.drawImage(b,$,k,L,M,-L*m*f/200*n.display_quality,-M*f/200*n.display_quality,L*m*f/100*n.display_quality,M*f/100*n.display_quality),h.restore();break;case"start":h.save(),h.translate(c*n.display_quality,-a*n.display_quality+t.height),h.rotate(r*Math.PI/180),h.drawImage(b,$,k,L,M,0,0,L*m*f/100*n.display_quality,M*f/100*n.display_quality),h.restore()}}else{const b=(v(s.d)*c-x(s.d)*a+s.x)*s.size/100,$=(x(s.d)*c+v(s.d)*a+s.y)*s.size/100,k=r+s.d;l(e,b,$,k,f*s.size/100,w,g,m,y,!0)}};return{stamp:l,drawRect:(e,c,a,r,f,w=0,g,m="center")=>{switch(h.globalAlpha=g===void 0?1:g,h.save(),m){case"center++":h.translate(e*n.display_quality,-c*n.display_quality+t.height),h.rotate(w*Math.PI/180),h.beginPath(),h.rect(-a/2*n.display_quality,-r/2*n.display_quality,a*n.display_quality,r*n.display_quality);break;case"center":h.translate((e-a/2)*n.display_quality,-(c-r/2)*n.display_quality+t.height),h.rotate(w*Math.PI/180),h.beginPath(),h.rect(0,0,a*n.display_quality,-r*n.display_quality);break;case"start":default:h.translate(e*n.display_quality,-c*n.display_quality+t.height),h.rotate(w*Math.PI/180),h.beginPath(),h.rect(0,0,a*n.display_quality,-r*n.display_quality);break}h.fillStyle=f,h.fill(),h.restore()},drawLine:(e,c,a,r,f,w,g=0)=>{switch(h.globalAlpha=1,h.beginPath(),g){case 0:h.moveTo((e-r*Math.sin(a)/2)*n.display_quality,-(c+r*Math.cos(a)/2)*n.display_quality+t.height),h.lineTo((e+r*Math.sin(a)/2)*n.display_quality,-(c-r*Math.cos(a)/2)*n.display_quality+t.height);break;case 1:h.moveTo(e*n.display_quality,-c*n.display_quality+t.height),h.lineTo((e+r*Math.sin(a))*n.display_quality,-(c-r*Math.cos(a))*n.display_quality+t.height);break}h.strokeStyle=w,h.lineWidth=f*n.display_quality,h.stroke()},drawText:(e,c,a,r,f,w="serif",g="left")=>{h.globalAlpha=1;const[m,y]=[c*n.display_quality,-a*n.display_quality+t.height];h.font=`${r*n.display_quality}px ${w}`,h.textAlign=g,h.fillStyle=f,h.fillText(e,m,y)}}},D=t=>{class h{constructor(u,n,s=0,l=100,i="",o=0,p=1,e){this.x=u,this.y=n,this.d=s,this.size=l,this.costume=i,this.alpha=o,this.width=p,this.act_=e}stamp(){this.alpha!=0&&t.stamp(this.costume,this.x,this.y,this.d,this.size,this.alpha,"center",this.width)}move(u){this.x+=x(this.d)*u,this.y+=v(this.d)*u}act(){(this.act_||(()=>{}))(this)}}return h},F=(t,h,d)=>({raw_to_stage:(n,s,l=0)=>{const i=t.getBoundingClientRect(),o=((n-i.left)/d.size*100-d.x)*h.stage_width/h.display_width,p=(h.display_height-((s-i.top)/d.size*100-d.y))*h.stage_height/h.display_height,e=l+d.d;return{x:o,y:p,d:e}}}),I=t=>{const h=new(window.AudioContext||window.webkitAudioContext);return{play:(n,s=0,l=1)=>{if(s<=t[n].time){const i=h.createGain(),o=h.createBufferSource();o.buffer=t[n].ctx,i.gain.setValueAtTime(l,h.currentTime),o.connect(i),i.connect(h.destination),o.start(0),t[n].time=0}},tick:()=>{for(const n in t)t[n].time++}}},S=async t=>{const h=document.getElementById(t.canvas_name);h.height=t.stage_height*t.display_quality,h.width=t.stage_width*t.display_quality;const d=h.getContext("2d"),u=new(window.AudioContext||window.webkitAudioContext),{Images:n,Audios:s,Fonts:l}=await K(u),i={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1,f:{up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1}},o={x:0,y:0,clicking:!1,is_in_rect(_,b,$,k,L="center"){switch(L){case"center":return _-$/2<this.x&&this.x<_+$/2&&b-k/2<this.y&&this.y<b+k/2;case"start":default:return _<this.x&&this.x<_+$&&b<this.y&&this.y<b+k}}},p={canvas:{size:100,x:0,y:0,d:0}},e=R(h,d,n,l,t,p.canvas),c=I(s),a=D(e);d.imageSmoothingEnabled=!1;const r=F(h,t,p.canvas);window.addEventListener("keydown",_=>{switch(_.key){case"ArrowUp":i.up=!0,i.f.up=!0;break;case"ArrowDown":i.down=!0,i.f.down=!0;break;case"ArrowLeft":i.left=!0,i.f.left=!0;break;case"ArrowRight":i.right=!0,i.f.right=!0;break;case"z":case"Z":i.z=!0,i.f.z=!0;break;case"x":case"X":i.x=!0,i.f.x=!0;break;case"c":case"C":i.c=!0,i.f.c=!0;break;case"d":case"D":i.d=!0,i.f.d=!0;break}}),window.addEventListener("keyup",_=>{switch(_.key){case"ArrowUp":i.up=!1;break;case"ArrowDown":i.down=!1;break;case"ArrowLeft":i.left=!1;break;case"ArrowRight":i.right=!1;break;case"z":case"Z":i.z=!1;break;case"x":case"X":i.x=!1;break;case"c":case"C":i.c=!1;break;case"d":case"D":i.d=!1;break}}),h.addEventListener("mousedown",_=>{o.clicking=!0;const b=r.raw_to_stage(_.x,_.y);o.x=b.x,o.y=b.y}),h.addEventListener("mousemove",_=>{const b=r.raw_to_stage(_.x,_.y);o.x=b.x,o.y=b.y}),h.addEventListener("mouseup",_=>{o.clicking=!1;const b=r.raw_to_stage(_.x,_.y);o.x=b.x,o.y=b.y});let f,w;{let _={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1};f=()=>{["up","down","left","right","z","x","c","d"].forEach(b=>{_[b]&&(i.f[b]=!1)}),_={...i.f}},w=()=>{c.tick()}}const{frameWhile:g,frameFor:m,frameLoop:y}=P(f,w);return{canvas:h,ctx:d,Images:n,Audios:s,Fonts:l,inputKeys:i,inputMouse:o,props:p,cLib:e,aLib:c,Sprite:a,for:m,while:g,loop:y}},B=2,G=640,j=480,C=800,T=400,W="canvas",U={display_quality:B,stage_width:G,stage_height:j,display_width:C,display_height:T,canvas_name:W},V=(t,h,d,u)=>{let n={};const s=class z extends d{constructor(p,e,c,a,r,f,w,g,m,y){super(p,e,c,a,void 0,1,1),this.start_x=p,this.start_y=e,this.start_d=c,this.move_x=f,this.move_y=w,this.move_d=g,this.start_len=r,this.move_len=m,this.len=r,this.age=0,this.id=z.current_id,this.b_width=a,n[this.id]=this,z.current_id++}move_self(){this.age++,this.x=this.start_x+z.get_move(this.move_x,this.age),this.y=this.start_y+z.get_move(this.move_y,this.age),this.d=this.start_d+z.get_move(this.move_d,this.age),this.len=this.start_len+z.get_move(this.move_len,this.age)}draw(){v(this.d),t.stamp("bone_head_white",this.x+v(this.d)*this.b_width*8/6,this.y-x(this.d)*this.b_width*8/6,this.d+180,this.b_width*100/6,1,"start"),t.drawRect(this.x+x(this.d)*this.b_width*6/6,this.y+v(this.d)*this.b_width*6/6,this.b_width,this.len+this.b_width*2/6,"white",this.d,1,"start"),t.stamp("bone_head_white",this.x+x(this.d)*(this.len+this.b_width*14/6)-v(this.d)*this.b_width*2/6,this.y+v(this.d)*(this.len+this.b_width*14/6)+x(this.d)*this.b_width*2/6,this.d,this.b_width*100/6,1,"start")}judge(){{const p=u.soul.x-this.x,e=u.soul.y-this.y,c=p*v(this.d)+e*-x(this.d),a=e*v(this.d)+p*x(this.d);this.len+this.b_width*14/6>a&&a>0&&this.b_width>c&&c>0&&u.damage(1)}}static process(){for(const p in n){const e=n[p];e.move_self(),e.draw(),e.judge()}}static get_move(p,e){if(typeof p=="number")return p*e;switch(p.type){case"sin":case"cos":return x(p.cycle*e)*p.amp;case"custom":return p.fn(e)}}};s.current_id=0;let l=s;return{boneDict:n,normal:l,process:()=>{l.process()}}},X={height_basic:15,width_basic:2,name:"determination"},Y={left:10,up:34,width:6,height:9,gap:0},Z={left:20,up:34,width:6,height:9,gap:0},N={left:30,up:34,width:6,height:9,gap:0},Q={left:40,up:34,width:6,height:9,gap:0},H={left:50,up:34,width:6,height:9,gap:0},J={left:60,up:34,width:6,height:9,gap:0},O={left:70,up:34,width:6,height:9,gap:0},tt={left:80,up:34,width:6,height:9,gap:0},et={left:90,up:34,width:6,height:9,gap:0},st={left:100,up:34,width:6,height:9,gap:0},it={left:110,up:34,width:6,height:9,gap:0},ht={left:120,up:34,width:6,height:9,gap:0},at={left:130,up:34,width:7,height:9,gap:0},nt={left:140,up:34,width:6,height:9,gap:0},lt={left:150,up:34,width:6,height:9,gap:0},ot={left:0,up:50,width:6,height:9,gap:0},pt={left:10,up:50,width:6,height:9,gap:0},rt={left:20,up:50,width:6,height:9,gap:0},ct={left:30,up:50,width:6,height:9,gap:0},dt={left:40,up:50,width:6,height:9,gap:0},gt={left:50,up:50,width:6,height:9,gap:0},ut={left:60,up:50,width:6,height:9,gap:0},wt={left:70,up:50,width:7,height:9,gap:0},_t={left:80,up:50,width:6,height:9,gap:0},ft={left:90,up:50,width:6,height:9,gap:0},mt={left:100,up:50,width:6,height:9,gap:0},yt={left:10,up:68,width:6,height:7,gap:2},bt={left:20,up:66,width:6,height:9,gap:0},xt={left:30,up:68,width:6,height:7,gap:2},vt={left:40,up:66,width:6,height:9,gap:0},kt={left:50,up:68,width:6,height:7,gap:2},$t={left:60,up:66,width:6,height:9,gap:0},Lt={left:70,up:68,width:6,height:10,gap:2},Mt={left:80,up:66,width:6,height:9,gap:0},qt={left:90,up:65,width:6,height:10,gap:-1},zt={left:100,up:65,width:6,height:13,gap:2},Et={left:110,up:66,width:6,height:9,gap:0},Pt={left:120,up:66,width:6,height:9,gap:0},At={left:130,up:68,width:7,height:7,gap:2},Kt={left:140,up:68,width:6,height:7,gap:2},Rt={left:150,up:68,width:6,height:7,gap:2},Dt={left:0,up:84,width:6,height:10,gap:2},Ft={left:10,up:84,width:6,height:10,gap:2},It={left:20,up:84,width:6,height:7,gap:2},St={left:30,up:84,width:6,height:7,gap:2},Bt={left:40,up:82,width:6,height:9,gap:0},Gt={left:50,up:84,width:6,height:7,gap:2},jt={left:60,up:84,width:6,height:7,gap:2},Ct={left:70,up:84,width:7,height:7,gap:2},Tt={left:80,up:84,width:6,height:7,gap:2},Wt={left:90,up:84,width:6,height:10,gap:2},Ut={left:100,up:84,width:6,height:7,gap:2},Vt={left:0,up:0,width:6,height:1,gap:0},Xt={left:150,up:82,width:6,height:9,gap:0},Yt={left:40,up:0,width:6,height:13,gap:0},Zt={left:150,up:61,width:4,height:1,gap:8},Nt={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:X,A:Y,B:Z,C:N,D:Q,E:H,F:J,G:O,H:tt,I:et,J:st,K:it,L:ht,M:at,N:nt,O:lt,P:ot,Q:pt,R:rt,S:ct,T:dt,U:gt,V:ut,W:wt,X:_t,Y:ft,Z:mt,a:yt,b:bt,c:xt,d:vt,e:kt,f:$t,g:Lt,h:Mt,i:qt,j:zt,k:Et,l:Pt,m:At,n:Kt,o:Rt,p:Dt,q:Ft,r:It,s:St,t:Bt,u:Gt,v:jt,w:Ct,x:Tt,y:Wt,z:Ut,space:Vt,irregular:Xt,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Yt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:0},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:3},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Zt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Qt={height_basic:6,width_basic:1,name:"status"},Ht={left:6,up:14,width:4,height:5,gap:0},Jt={left:12,up:14,width:4,height:5,gap:0},Ot={left:18,up:14,width:4,height:5,gap:0},te={left:24,up:14,width:4,height:5,gap:0},ee={left:30,up:14,width:4,height:5,gap:0},se={left:36,up:14,width:4,height:5,gap:0},ie={left:42,up:14,width:4,height:5,gap:0},he={left:48,up:14,width:4,height:5,gap:0},ae={left:54,up:14,width:4,height:5,gap:0},ne={left:60,up:14,width:4,height:5,gap:0},le={left:66,up:14,width:4,height:5,gap:0},oe={left:72,up:14,width:4,height:5,gap:0},pe={left:78,up:14,width:5,height:5,gap:0},re={left:84,up:14,width:4,height:5,gap:0},ce={left:90,up:14,width:4,height:5,gap:0},de={left:0,up:21,width:4,height:5,gap:0},ge={left:6,up:21,width:4,height:5,gap:0},ue={left:12,up:21,width:4,height:5,gap:0},we={left:18,up:21,width:4,height:5,gap:0},_e={left:24,up:21,width:4,height:5,gap:0},fe={left:30,up:21,width:4,height:5,gap:0},me={left:36,up:21,width:4,height:5,gap:0},ye={left:42,up:21,width:5,height:5,gap:0},be={left:48,up:21,width:4,height:5,gap:0},xe={left:54,up:21,width:4,height:5,gap:0},ve={left:60,up:21,width:4,height:5,gap:0},ke={left:6,up:28,width:4,height:5,gap:0},$e={left:12,up:28,width:4,height:5,gap:0},Le={left:18,up:28,width:4,height:5,gap:0},Me={left:24,up:28,width:4,height:5,gap:0},qe={left:30,up:28,width:4,height:5,gap:0},ze={left:36,up:28,width:4,height:5,gap:0},Ee={left:42,up:28,width:4,height:5,gap:0},Pe={left:48,up:28,width:4,height:5,gap:0},Ae={left:54,up:28,width:4,height:5,gap:0},Ke={left:60,up:28,width:4,height:5,gap:0},Re={left:66,up:28,width:4,height:5,gap:0},De={left:72,up:28,width:4,height:5,gap:0},Fe={left:78,up:28,width:5,height:5,gap:0},Ie={left:84,up:28,width:4,height:5,gap:0},Se={left:90,up:28,width:4,height:5,gap:0},Be={left:0,up:35,width:4,height:5,gap:0},Ge={left:6,up:35,width:4,height:5,gap:0},je={left:12,up:35,width:4,height:5,gap:0},Ce={left:18,up:35,width:4,height:5,gap:0},Te={left:24,up:35,width:4,height:5,gap:0},We={left:30,up:35,width:4,height:5,gap:0},Ue={left:36,up:35,width:4,height:5,gap:0},Ve={left:42,up:35,width:5,height:5,gap:0},Xe={left:48,up:35,width:4,height:5,gap:0},Ye={left:54,up:35,width:4,height:5,gap:0},Ze={left:60,up:35,width:4,height:5,gap:0},Ne={left:0,up:0,width:4,height:1,gap:0},Qe={left:90,up:35,width:4,height:5,gap:0},He={left:24,up:0,width:5,height:5,gap:0},Je={left:90,up:25,width:4,height:1,gap:4},Oe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Qt,A:Ht,B:Jt,C:Ot,D:te,E:ee,F:se,G:ie,H:he,I:ae,J:ne,K:le,L:oe,M:pe,N:re,O:ce,P:de,Q:ge,R:ue,S:we,T:_e,U:fe,V:me,W:ye,X:be,Y:xe,Z:ve,a:ke,b:$e,c:Le,d:Me,e:qe,f:ze,g:Ee,h:Pe,i:Ae,j:Ke,k:Re,l:De,m:Fe,n:Ie,o:Se,p:Be,q:Ge,r:je,s:Ce,t:Te,u:We,v:Ue,w:Ve,x:Xe,y:Ye,z:Ze,space:Ne,irregular:Qe,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:He,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Je,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},ts=(t,h,d)=>{const u={en:Nt,status:Oe};let n=0,s={};class l{constructor(a){this.name=a}delete(){delete s[this.name]}}class i extends l{constructor(a,r,f,w,g,m,y){super(a),this._={all_str:y.reduce((_,b)=>_+b.str,""),now:[{str:"",color:y[0].color,spacing_x:y[0].spacing_x,spacing_y:y[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=r,this.y=f,this.direction=w,this.size=g,this.data=y,this.font=(_=>{switch(_){case"status":return u.status;default:return u.en}})(m),s[a=="_"?`auto$${n++}`:a]=this,this.process()}write(){const a=this.size,r=this.direction*Math.PI/180,f=this._.now.reduce((_,b)=>_+b.str.length,0);let w=0,g=0,m=0;const y=_=>_ in this.font?this.font[_]:this.font.space;return this._.now.forEach(_=>{_.str.split("").forEach($=>{const k=y($);$==`
`?(w=0,g+=this.font.props.height_basic+_.spacing_y):(t.stamp(this.font.props.name+"_"+_.color,this.x+(Math.cos(r)*w-Math.sin(r)*(g+k.gap/2))*a/100,this.y+(Math.sin(r)*w+Math.cos(r)*(g+k.gap/2))*a/100,this.direction,a,1,"start",1,{left:k.left,top:k.up,width:k.width,height:k.height}),m+1<f&&(w+=k.width+this.font.props.width_basic+_.spacing_x)),m++})}),this}process(){const a=this.data.reduce((r,f)=>r+f.str.length,0);if(this._.len_allow==a&&d.z){delete s[this.name];return}else d.x?(this._.len_allow=a,this._.current_char=a):this._.len_allow<a&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,a);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class o extends l{constructor(a,r,f,w,g,m,y,_,b,$,k="en",L){super(a),this.str_now="",this.len_now=0,this.str=r,this.x=f,this.y=w,this.direction=g,this.size=m,this.color=y,this.spacing_x=_,this.spacing_y=b,this.speed=$,this.font=(M=>{switch(M){case"status":return u.status;default:return u.en}})(k),this.len_allow=0,s[a=="_"?`auto$${n++}`:a]=this,this.voice=L,this.resolve=()=>{},this.promise=(()=>new Promise(M=>{this.resolve=M}))(),this.solved=!1,this.process()}write(){const a=this.str_now,r=this.size,f=this.direction*Math.PI/180;let w,g;[w,g]=[0,0];const m=y=>y in this.font?this.font[y]:this.font.space;for(let y=0;y<a.length;y++){const _=m(a[y]);a[y]==`
`?(w=0,g-=this.font.props.height_basic+this.spacing_y):(t.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(f)*w-Math.sin(f)*(g-_.gap))*r/100,this.y+(Math.sin(f)*w+Math.cos(f)*(g-_.gap))*r/100,this.direction,r,1,"start",1,{left:_.left,top:_.up,width:_.width,height:_.height}),y+1<a.length&&(w+=_.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.str.length<=this.len_allow&&d.z?(this.resolve(),this.solved=!0,delete s[this.name]):d.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed),this.str_now.length<Math.min(this.len_allow,this.str.length)){let a=!1;for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length],a=a||this.str[this.str_now.length]!==" ";this.voice&&a&&h.play(this.voice)}}}return{write:(c,a,r,f,w,g="white",m=0,y=0,_="en")=>{const b=new o("_",c,a,r,f,w,g,m,y,0,_);b.write(),b.delete()},Super:i,Plane:o,process:()=>{for(const c in s)s[c].process()},dict:s}},es=(t,h)=>{class d{constructor(l,i,o,p,e,c,a=4){this.dx=l,this.dy=i,this.dd=o,this.len=p,this.align=e,this.width=a,this.soul_size=6,this.relative=c||(()=>{const r=this.dd,f=h.x-this.dx;return(h.y-this.dy)*v(r)+f*x(r)>0?"plus":"minus"})()}judge(){const l=this.dd,i=h.x-this.dx,o=h.y-this.dy,p=i*v(l)+o*-x(l),e=o*v(l)+i*x(l);if(this.len/2>p&&p>-this.len/2){if(this.relative=="minus"&&e>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>e){const c=p*v(-l)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*x(-l),a=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-v(-l)+p*x(-l);h.x=c+this.dx,h.y=a+this.dy}}else e>0?this.relative="plus":this.relative="minus"}draw(){t.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class u{constructor(l,i,o,p=4){this.dx=l,this.dy=i,this.dd=o,this.width=p}judge(){const l=this.dd,i=h.x-this.dx,o=h.y-this.dy,p=i*v(l)+o*-x(l);if(o*v(l)+i*x(l)>-this.width){const c=p*v(-l)+this.width*x(-l),a=this.width*-v(-l)+p*x(-l);h.x=c+this.dx,h.y=a+this.dy}}draw(){const l=this.dx+320*x(this.dd),i=this.dy+320*v(this.dd);t.drawRect(l,i,640,640,"#ffffff88",this.dd,1,"center++")}}const n={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:5,walls:[],default(){this.center_x=320,this.center_y=240,this.dire=0,this.width=100,this.height=100,this.walls=[],n.init()},set(s,l,i,o,p){this.center_x=s||this.center_x,this.center_y=l||this.center_y,this.dire=i||this.dire,this.width=o||this.width,this.height=p||this.height,n.update()},draw(){this.walls.forEach(s=>{const l=s.dx+640*x(s.dd),i=s.dy+640*v(s.dd);t.drawRect(l,i,1280,1280,"#ffffff",s.dd,1,"center++")}),this.walls.forEach(s=>{const l=s.dx+640*x(s.dd),i=s.dy+640*v(s.dd);t.drawRect(l,i,1280-s.width*2,1280-s.width*2,"#000000",s.dd,1,"center++")})},judge(){this.walls.forEach(s=>{s.judge()})},update(){{const s=this.dire,l=this.center_x,i=this.center_y,o=this.walls[0];o.dd=s,o.dx=l+this.height/2*x(s),o.dy=i+this.height/2*v(s)}{const s=this.dire+90,l=this.center_x,i=this.center_y,o=this.walls[1];o.dd=s,o.dx=l+this.width/2*x(s),o.dy=i+this.width/2*v(s)}{const s=this.dire+180,l=this.center_x,i=this.center_y,o=this.walls[2];o.dd=s,o.dx=l+this.height/2*x(s),o.dy=i+this.height/2*v(s)}{const s=this.dire+270,l=this.center_x,i=this.center_y,o=this.walls[3];o.dd=s,o.dx=l+this.width/2*x(s),o.dy=i+this.width/2*v(s)}},init(){this.walls.push(new u(0,0,0,this.thickness)),this.walls.push(new u(0,0,90,this.thickness)),this.walls.push(new u(0,0,180,this.thickness)),this.walls.push(new u(0,0,270,this.thickness))}};return n.init(),{Wall:d,box:n}},ss=(t,h,d,u)=>{let n={};const s=class E extends d{constructor(p,e,c,a,r,f,w,g,m,y,_){super(a,r,f,w,"gb_1",1,g),this.s_x=a,this.s_y=r,this.s_d=f,this.t_x=p,this.t_y=e,this.t_d=c,this.c_t=m,this.b_s=y,this.b_d=_,this.gb_width=g,this.age=0,this.id=E.current_id,n[this.id]=this,E.current_id++,h.play("gb_charge",1)}move_self(){if(this.age<this.c_t){let p=(this.c_t-this.age)**4/this.c_t**4;this.x=p*this.s_x+(1-p)*this.t_x,this.y=p*this.s_y+(1-p)*this.t_y,this.d=p*this.s_d+(1-p)*this.t_d}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let p=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(p/2)}}draw(){this.b_s+this.c_t<this.age&&t.drawRect(this.x+x(this.d)*4800/-2,this.y+v(this.d)*4800/-2,this.width*this.size/5*(1+x(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const p=u.soul.x-this.x,e=u.soul.y-this.y,c=p*v(this.d)+e*-x(this.d),a=e*v(this.d)+p*x(this.d);this.b_s+this.c_t<=this.age&&0>a&&this.gb_width*this.size/10>c&&c>-this.gb_width*this.size/10&&u.damage(1)}}static process(){for(const p in n){const e=n[p];e.move_self(),e.draw(),e.judge(),e.age++,e.b_d+e.b_s==e.age&&h.play("gb_fire",1),e.b_d+e.b_s+e.c_t<=e.age&&delete n[p]}}};s.current_id=0;let l=s;return{gbDict:n,gb:l,process:()=>{l.process()}}},q={enemy_name:"dummy",items:[{name:"test_food",heal:99,text:"You ate a test.",behavior:"default"}],enemy_speak:[`Lorem Ipsum dolor sit
amet.`],enemy_attack:[300],actions:[{name:"check",text:`Dummy 0 ATK 0 DEF
test enemy.`}]},is=async()=>{const t=await S(U);let[h,d]=["menu","command"];const u=ts(t.cLib,t.aLib,t.inputKeys);{let l=0;await t.while(()=>h==="menu",()=>{t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),t.inputKeys.f.up&&(l--,t.aLib.play("cursor_move")),t.inputKeys.f.down&&(l++,t.aLib.play("cursor_move")),t.cLib.stamp("soul",220,-l*50+240);const i=new u.Plane("_","play",270,250,0,200,"yellow",0,0,0,"en");i.write(),i.delete(),t.inputKeys.f.z&&(h="battle",t.aLib.play("cursor_confirm"))})}let n=0;const s={lv:1,hp:20,hp_max:20,soul:new t.Sprite(320,240,0,80,"soul",1,1),damage(l){this.hp-=l,t.aLib.play("damage",2),this.hp<=0&&(h="game_over")}};{n=0,ss(t.cLib,t.aLib,t.Sprite,s),V(t.cLib,t.aLib,t.Sprite,s);const i=es(t.cLib,s.soul).box,o=hs(t.cLib,u.Plane,s);i.set(320,160,0,562,132);const p=new t.Sprite(300,300,0,200,"enemy",1);for(;h=="battle";)if(d=="command"){let e=[];const c=new u.Plane("_",`You feel like you're going to
have a bad time.`,80,205,0,200,"white",0,0,1,"en","text");let a=0,r;await t.while(()=>d=="command"&&h=="battle"&&d=="command",()=>{if(t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),e.length==0)t.inputKeys.f.right&&(a=(a+1+4)%4,t.aLib.play("cursor_move")),t.inputKeys.f.left&&(a=(a-1+4)%4,t.aLib.play("cursor_move")),t.inputKeys.f.z&&(e.push(a),t.aLib.play("cursor_confirm"),a==2&&e.push(0),a==3&&e.push(0)),c.process(),c.write(),u.write("*",50,205,0,200),[s.soul.x,s.soul.y]=[282+(a-1.5)*155,27];else if(e.length==1)t.inputKeys.f.x&&(e.pop(),t.aLib.play("cursor_move")),t.inputKeys.f.z&&(e.push(0),t.aLib.play("cursor_confirm")),(e[0]==0||e[0]==1)&&(u.write(`${q.enemy_name}`,80,205,0,200),[s.soul.x,s.soul.y]=[55,195]);else if(e.length==2){const w=g=>{t.inputKeys.f.up&&(e[1]-=2,t.aLib.play("cursor_move")),t.inputKeys.f.down&&(e[1]+=2,t.aLib.play("cursor_move")),t.inputKeys.f.right&&(e[1]+=1,t.aLib.play("cursor_move")),t.inputKeys.f.left&&(e[1]-=1,t.aLib.play("cursor_move")),e[1]=Math.max(Math.min(e[1],7,g.length-1),0),[s.soul.x,s.soul.y]=[55+e[1]%2*281,195-Math.floor(e[1]%4/2)*40],e[1]<4?[0,1,2,3].forEach(m=>{m<g.length&&(m!=e[1]&&u.write("*",50+m%2*281,205-Math.floor(m%4/2)*40,0,200),u.write(`${g[m].name}`,80+m%2*281,205-Math.floor(m%4/2)*40,0,200))}):[4,5,6,7].forEach(m=>{m<g.length&&(m!=e[1]&&u.write("*",50+m%2*281,205-Math.floor(m%4/2)*40,0,200),u.write(`${g[m].name}`,80+m%2*281,205-Math.floor(m%4/2)*40,0,200))}),4<=g.length&&u.write(`PAGE ${e[1]<4?1:2}`,361,125,0,200)};if(e[0]!=0&&t.inputKeys.f.x&&(e[0]==1||e.pop(),e.pop(),t.aLib.play("cursor_move")),e[0]==0)s.soul.alpha=0,e[1]++,t.cLib.stamp("attack_gauge",320,160,0,300),t.cLib.stamp(`attack_bar_${Math.floor(e[1]/8%2)}`,80+e[1]*5,160,0,300),t.inputKeys.f.z&&(e.push(e[1]),t.aLib.play("slash"));else if(e[0]==1&&e.length==2)w(q.actions),t.inputKeys.f.z&&e.push(0);else if(e[0]==2){if(w(q.items),t.inputKeys.f.z){e.push(0);const g=q.items[e[1]].behavior;g=="default"?(s.hp=Math.min(s.hp_max,s.hp+q.items[e[1]].heal),t.aLib.play("heal")):g()}}else e[0]==3&&((t.inputKeys.f.up||t.inputKeys.f.down)&&(e[1]=(e[1]+1)%2,t.aLib.play("cursor_move")),t.inputKeys.f.z&&(d="enemy_speak"),[0,1].forEach(g=>{g!=e[1]&&u.write("*",50,205-g*40,0,200),u.write(`${["Spare","Quit"][g]}`,80,205-g*40,0,200)}),[s.soul.x,s.soul.y]=[55,195-e[1]*40])}else e.length==3&&(s.soul.alpha=0,e[0]==0?(s.soul.alpha=0,e[1]++,t.cLib.stamp("attack_gauge",320,160,0,300),t.cLib.stamp(`attack_bar_${Math.floor(e[1]/4%2)}`,80+e[2]*5,160,0,300)):e[0]==1?(r===void 0?r=new u.Plane("_",`${q.actions[e[1]].text}`,80,205,0,200,"white",0,0,1,"en","text"):r.process(),r.solved?d="enemy_speak":(r.write(),u.write("*",50,205,0,200))):e[0]==2&&(r===void 0?r=new u.Plane("_",`${q.items[e[1]].text}`,80,205,0,200,"white",0,0,1,"en","text"):r.process(),r.solved?d="enemy_speak":(r.write(),u.write("*",50,205,0,200))));i.draw(),p.stamp();const f=(w,g,m,y)=>t.cLib.stamp("commands",w,g,0,100,1,"center",1,{left:y?113:0,top:45*m,width:112,height:44});[0,1,2,3].forEach(w=>f(320+(w-1.5)*155,27,w,a==w&&e.length==0)),s.soul.stamp(),o()})}else if(d=="enemy_speak"){s.soul.alpha=1;let e=0;[s.soul.x,s.soul.y]=[i.center_x,i.center_y];const c=new u.Plane("_",q.enemy_speak[0],420,360,0,100,"black",0,0,1,"en","talk_default");await t.while(()=>d=="enemy_speak"&&h=="battle"&&d=="enemy_speak",()=>{e++;const a=Math.min(e/30,1);t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),i.set(320,160,0,132*a+562*(1-a),132),i.draw(),p.stamp(),t.cLib.stamp("speech_bubble",380,380,0,150,1,"start");const r=(f,w,g,m)=>t.cLib.stamp("commands",f,w,0,100,1,"center",1,{left:m?113:0,top:45*g,width:112,height:44});[0,1,2,3].forEach(f=>r(320+(f-1.5)*155,27,f,!1)),s.soul.stamp(),o(),c.process(),c.solved&&a==1?d="enemy_attack":c.write()}),i.set(320,160,0,562,132)}else if(d=="enemy_attack")await t.for(0,e=>e<q.enemy_attack[0]&&h=="battle"&&d=="enemy_attack",e=>{const c=t.inputKeys.x?2:3.5;t.inputKeys.up&&(s.soul.y+=c),t.inputKeys.down&&(s.soul.y-=c),t.inputKeys.right&&(s.soul.x+=c),t.inputKeys.left&&(s.soul.x-=c),t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),i.draw(),i.judge(),p.stamp();const a=(r,f,w,g)=>t.cLib.stamp("commands",r,f,0,100,1,"center",1,{left:g?113:0,top:45*w,width:112,height:44});[0,1,2,3].forEach(r=>a(320+(r-1.5)*155,27,r,!1)),s.soul.stamp(),o()}),await t.for(0,e=>e<30&&h=="battle"&&d=="enemy_attack",e=>{const c=Math.min(e/30,1);i.set(320,160,0,562*c+132*(1-c),132),t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),i.draw(),i.judge(),p.stamp();const a=(r,f,w,g)=>t.cLib.stamp("commands",r,f,0,100,1,"center",1,{left:g?113:0,top:45*w,width:112,height:44});[0,1,2,3].forEach(r=>a(320+(r-1.5)*155,27,r,!1)),s.soul.stamp(),o()}),i.set(320,160,0,132,132),d="command";else throw new Error}{n=0;let l=[];await t.while(()=>h==="game_over",()=>{if(t.ctx.clearRect(0,0,t.canvas.width,t.canvas.height),n==0)t.aLib.play("heartbreak_1",2);else if(n<60)t.cLib.stamp("death_0",s.soul.x,s.soul.y,0,80);else if(n==60){t.aLib.play("heartbreak_2",2);for(let i=0;i<4;i++){let o=Math.random()*12-6,p=Math.random()*8+4;l.push(new t.Sprite(s.soul.x,s.soul.y,Math.random()*360,80,`death_${i+1}`,1,1,e=>{e.x+=o,e.y+=p,e.d+=o,p-=.333,e.stamp()}))}}else 60<n&&n<180?l.forEach(i=>i.act()):n==180&&(h="waiting");n++})}},hs=(t,h,d)=>()=>{const u=new h("_","chara",32,75,0,300,"white",0,0,0,"status");u.write(),u.delete();const n=new h("_","lV",134,75,0,300,"white",0,0,0,"status");n.write(),n.delete();const s=new h("_",`${("00"+d.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");s.write(),s.delete();const l=new h("_",`${("00"+d.hp).slice(-2)}`,d.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");l.write(),l.delete();const i=new h("_","/",d.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");i.write(),i.delete();const o=new h("_",`${("00"+d.hp_max).slice(-2)}`,d.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");o.write(),o.delete(),t.drawRect(256,59,d.hp_max*1.2,21,"red",0,1,"start"),t.drawRect(256,59,d.hp*1.2,21,"yellow",0,1,"start"),t.stamp("hp_white",224,74,0,100,1,"start"),t.stamp("kr_white",d.hp_max*1.2+267,74,0,100,1,"start")};window.onload=is;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
