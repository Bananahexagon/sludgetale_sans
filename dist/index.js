const P=e=>{const t=(i,p,n)=>{i()?(p(),e.tick(),requestAnimationFrame(()=>t(i,p,n))):n()},o=(i,p)=>new Promise(n=>{t(i,p,n)}),r=(i,p,n,s)=>{n<i?(p(n),e.tick(),requestAnimationFrame(()=>r(i,p,n+1,s))):s()},g=(i,p,n=0)=>new Promise(s=>{r(i,p,n,s)}),a=i=>{i(),e.tick(),requestAnimationFrame(()=>a(i))};return{frameWhile:o,frameFor:g,frameLoop:a}},L=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"}],A=async e=>{const t={},o={},r={},g=L,a=[];return console.log(g),g.forEach(i=>a.push(new Promise(p=>{switch(i.type){case"image":{const n=new Image;n.src=i.src,n.onload=()=>{t[i.name]=n,p()}}break;case"audio":{const n=new Audio(i.src);n.autoplay=!1,n.muted=!0,console.log(n),n.addEventListener("loadeddata",()=>{n.muted=!1,(async()=>{const h=await(await fetch(i.src)).arrayBuffer();o[i.name]={ctx:await e.decodeAudioData(h),data:n,time:1/0},n.onload=()=>p()})().then(p)})}break;case"font":(async()=>{const h=await(await(await fetch(i.src)).text()).match(/url\(.+?\)/g);if(!h)throw new Error("フォントが見つかりませんでした");const d=[];h.forEach(l=>{d.push((async()=>{const c=new FontFace(i.name,l);await c.load(),r[i.name]=c,await document.fonts.add(c)})())}),Promise.all(d)})().then(p);break}}))),await Promise.all(a),{Images:t,Audios:o,Fonts:r}},y=e=>Math.sin(e/360*Math.PI*2),m=e=>Math.cos(e/360*Math.PI*2),E=(e,t,o,r,g,a)=>{const i=(h,d,l,c=0,f=100,_=1,u="center",w,b=!1)=>{if(b){const x=o[h],[$,v,q,M]=w===void 0?[0,0,x.width,x.height]:[w.left,w.top,w.width,w.height];switch(t.globalAlpha=_,u){case"center":t.save(),t.translate(d*g.display_quality,-l*g.display_quality+e.height),t.rotate(c*Math.PI/180),t.drawImage(x,$,v,q,M,-q*f/200*g.display_quality,-M*f/200*g.display_quality,q*f/100*g.display_quality,M*f/100*g.display_quality),t.restore();break;case"start":t.save(),t.translate(d*g.display_quality,-l*g.display_quality+e.height),t.rotate(c*Math.PI/180),t.drawImage(x,$,v,q,M,0,0,q*f/100*g.display_quality,M*f/100*g.display_quality),t.restore()}}else{const x=(m(a.d)*d-y(a.d)*l+a.x)*a.size/100,$=(y(a.d)*d+m(a.d)*l+a.y)*a.size/100,v=c+a.d;i(h,x,$,v,f*a.size/100,_,u,w,!0)}};return{stamp:i,drawRect:(h,d,l,c,f,_=0,u,w="center")=>{switch(t.globalAlpha=u===void 0?1:u,t.save(),w){case"center++":t.translate(h*g.display_quality,-d*g.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(-l/2*g.display_quality,-c/2*g.display_quality,l*g.display_quality,c*g.display_quality);break;case"center":t.translate((h-l/2)*g.display_quality,-(d-c/2)*g.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,l*g.display_quality,-c*g.display_quality);break;case"start":default:t.translate(h*g.display_quality,-d*g.display_quality+e.height),t.rotate(_*Math.PI/180),t.beginPath(),t.rect(0,0,l*g.display_quality,-c*g.display_quality);break}t.fillStyle=f,t.fill(),t.restore()},drawLine:(h,d,l,c,f,_,u=0)=>{switch(t.globalAlpha=1,t.beginPath(),u){case 0:t.moveTo((h-c*Math.sin(l)/2)*g.display_quality,-(d+c*Math.cos(l)/2)*g.display_quality+e.height),t.lineTo((h+c*Math.sin(l)/2)*g.display_quality,-(d-c*Math.cos(l)/2)*g.display_quality+e.height);break;case 1:t.moveTo(h*g.display_quality,-d*g.display_quality+e.height),t.lineTo((h+c*Math.sin(l))*g.display_quality,-(d-c*Math.cos(l))*g.display_quality+e.height);break}t.strokeStyle=_,t.lineWidth=f*g.display_quality,t.stroke()},drawText:(h,d,l,c,f,_="serif",u="left")=>{t.globalAlpha=1;const[w,b]=[d*g.display_quality,-l*g.display_quality+e.height];t.font=`${c*g.display_quality}px ${_}`,t.textAlign=u,t.fillStyle=f,t.fillText(h,w,b)}}},D=e=>{class t{constructor(r,g,a=0,i=100,p="",n=!1,s){this.x=r,this.y=g,this.d=a,this.size=i,this.costume=p,this.visible=n,this.act_=s}stamp(){this.visible&&e.stamp(this.costume,this.x,this.y,this.d,this.size)}move(r){this.x+=y(this.d)*r,this.y+=m(this.d)*r}act(){(this.act_||(()=>{}))(this)}}return t},F=(e,t,o)=>({raw_to_stage:(g,a,i=0)=>{const p=e.getBoundingClientRect(),n=((g-p.left)/o.size*100-o.x)*t.stage_width/t.display_width,s=(t.display_height-((a-p.top)/o.size*100-o.y))*t.stage_height/t.display_height,h=i+o.d;return{x:n,y:s,d:h}}}),I=e=>{const t=new(window.AudioContext||window.webkitAudioContext);return{play:(a,i=0)=>{i<=e[a].time&&(e[a].data.currentTime=0,e[a].data.play(),e[a].time=0)},play_ctx:(a,i=0)=>{if(i<=e[a].time){const p=t.createBufferSource();p.buffer=e[a].ctx,p.connect(t.destination),p.start(0),e[a].time=0}},tick:()=>{for(const a in e)e[a].time++}}},R=async e=>{const t=document.getElementById(e.canvas_name);t.height=e.stage_height*e.display_quality,t.width=e.stage_width*e.display_quality;const o=t.getContext("2d"),r=new(window.AudioContext||window.webkitAudioContext),{Images:g,Audios:a,Fonts:i}=await A(r),p={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1},n={x:0,y:0,clicking:!1,is_in_rect(w,b,x,$,v="center"){switch(v){case"center":return w-x/2<this.x&&this.x<w+x/2&&b-$/2<this.y&&this.y<b+$/2;case"start":default:return w<this.x&&this.x<w+x&&b<this.y&&this.y<b+$}}},s={canvas:{size:100,x:0,y:0,d:0}},h=E(t,o,g,i,e,s.canvas),d=I(a),l=D(h);o.imageSmoothingEnabled=!1;const c=F(t,e,s.canvas);window.addEventListener("keydown",w=>{switch(w.key){case"ArrowUp":p.up=!0;break;case"ArrowDown":p.down=!0;break;case"ArrowLeft":p.left=!0;break;case"ArrowRight":p.right=!0;break;case"z":case"Z":p.z=!0;break;case"x":case"X":p.x=!0;break;case"c":case"C":p.c=!0;break;case"d":case"D":p.d=!0;break}}),window.addEventListener("keyup",w=>{switch(w.key){case"ArrowUp":p.up=!1;break;case"ArrowDown":p.down=!1;break;case"ArrowLeft":p.left=!1;break;case"ArrowRight":p.right=!1;break;case"z":case"Z":p.z=!1;break;case"x":case"X":p.x=!1;break;case"c":case"C":p.c=!1;break;case"d":case"D":p.d=!1;break}}),t.addEventListener("mousedown",w=>{n.clicking=!0;const b=c.raw_to_stage(w.x,w.y);n.x=b.x,n.y=b.y}),t.addEventListener("mousemove",w=>{const b=c.raw_to_stage(w.x,w.y);n.x=b.x,n.y=b.y}),t.addEventListener("mouseup",w=>{n.clicking=!1;const b=c.raw_to_stage(w.x,w.y);n.x=b.x,n.y=b.y});const{frameWhile:f,frameFor:_,frameLoop:u}=P(d);return{canvas:t,ctx:o,Images:g,Audios:a,Fonts:i,inputKeys:p,inputMouse:n,props:s,cLib:h,aLib:d,Sprite:l,for:_,while:f,loop:u}},S=2,B=640,C=480,j=800,G=400,T="canvas",W={display_quality:S,stage_width:B,stage_height:C,display_width:j,display_height:G,canvas_name:T},K=(e,t,o,r)=>{let g={};const a=class k extends o{constructor(s,h,d,l,c,f,_,u,w,b){super(s,h,d,l,void 0,!0),this.start_x=s,this.start_y=h,this.start_d=d,this.move_x=f,this.move_y=_,this.move_d=u,this.start_len=c,this.move_len=w,this.len=c,this.age=0,this.id=k.current_id,this.width=l,g[this.id]=this,k.current_id++}move_self(){this.age++,this.x=this.start_x+k.get_move(this.move_x,this.age),this.y=this.start_y+k.get_move(this.move_y,this.age),this.d=this.start_d+k.get_move(this.move_d,this.age),this.len=this.start_len+k.get_move(this.move_len,this.age)}draw(){m(this.d),e.stamp("bone_head_white",this.x+m(this.d)*this.width*8/6,this.y-y(this.d)*this.width*8/6,this.d+180,this.width*100/6,1,"start"),e.drawRect(this.x+y(this.d)*this.width*6/6,this.y+m(this.d)*this.width*6/6,this.width,this.len+this.width*2/6,"white",this.d,1,"start"),e.stamp("bone_head_white",this.x+y(this.d)*(this.len+this.width*14/6)-m(this.d)*this.width*2/6,this.y+m(this.d)*(this.len+this.width*14/6)+y(this.d)*this.width*2/6,this.d,this.width*100/6,1,"start")}judge(){{const s=r.soul.x-this.x,h=r.soul.y-this.y,d=s*m(this.d)+h*-y(this.d),l=h*m(this.d)+s*y(this.d);this.len+this.width*14/6>l&&l>0&&this.width>d&&d>0&&r.damage(2)}}static process(){for(const s in g){const h=g[s];h.move_self(),h.draw(),h.judge()}}static get_move(s,h){if(typeof s=="number")return s*h;switch(s.type){case"sin":case"cos":return y(s.cycle*h)*s.amp;case"custom":return s.fn(h)}}};a.current_id=0;let i=a;return{boneDict:g,normal:i,process:()=>{i.process()}}},U={height_basic:15,width_basic:2,name:"determination"},X={left:10,up:34,width:6,height:9,gap:0},Z={left:20,up:34,width:6,height:9,gap:0},H={left:30,up:34,width:6,height:9,gap:0},V={left:40,up:34,width:6,height:9,gap:0},J={left:50,up:34,width:6,height:9,gap:0},N={left:60,up:34,width:6,height:9,gap:0},O={left:70,up:34,width:6,height:9,gap:0},Q={left:80,up:34,width:6,height:9,gap:0},Y={left:90,up:34,width:6,height:9,gap:0},tt={left:100,up:34,width:6,height:9,gap:0},et={left:110,up:34,width:6,height:9,gap:0},st={left:120,up:34,width:6,height:9,gap:0},it={left:130,up:34,width:7,height:9,gap:0},ht={left:140,up:34,width:6,height:9,gap:0},at={left:150,up:34,width:6,height:9,gap:0},nt={left:0,up:50,width:6,height:9,gap:0},pt={left:10,up:50,width:6,height:9,gap:0},gt={left:20,up:50,width:6,height:9,gap:0},lt={left:30,up:50,width:6,height:9,gap:0},dt={left:40,up:50,width:6,height:9,gap:0},ot={left:50,up:50,width:6,height:9,gap:0},ct={left:60,up:50,width:6,height:9,gap:0},rt={left:70,up:50,width:7,height:9,gap:0},ut={left:80,up:50,width:6,height:9,gap:0},wt={left:90,up:50,width:6,height:9,gap:0},_t={left:100,up:50,width:6,height:9,gap:0},ft={left:10,up:68,width:6,height:7,gap:2},yt={left:20,up:66,width:6,height:9,gap:0},mt={left:30,up:68,width:6,height:7,gap:2},bt={left:40,up:66,width:6,height:9,gap:0},xt={left:50,up:68,width:6,height:7,gap:2},$t={left:60,up:66,width:6,height:9,gap:0},kt={left:70,up:68,width:6,height:10,gap:5},vt={left:80,up:66,width:6,height:9,gap:0},qt={left:90,up:65,width:6,height:10,gap:-1},Mt={left:100,up:65,width:6,height:13,gap:2},zt={left:110,up:66,width:6,height:9,gap:0},Pt={left:120,up:66,width:6,height:9,gap:0},Lt={left:130,up:68,width:7,height:7,gap:2},At={left:140,up:68,width:6,height:7,gap:2},Et={left:150,up:68,width:6,height:7,gap:2},Dt={left:0,up:84,width:6,height:10,gap:5},Ft={left:10,up:84,width:6,height:10,gap:5},It={left:20,up:84,width:6,height:7,gap:2},Rt={left:30,up:84,width:6,height:7,gap:2},St={left:40,up:82,width:6,height:9,gap:0},Bt={left:50,up:84,width:6,height:7,gap:2},Ct={left:60,up:84,width:6,height:7,gap:2},jt={left:70,up:84,width:7,height:7,gap:2},Gt={left:80,up:84,width:6,height:7,gap:2},Tt={left:90,up:84,width:6,height:10,gap:5},Wt={left:100,up:84,width:6,height:7,gap:2},Kt={left:0,up:0,width:1,height:1,gap:0},Ut={left:150,up:82,width:6,height:9,gap:0},Xt={left:40,up:0,width:6,height:13,gap:0},Zt={left:150,up:61,width:4,height:1,gap:14},Ht={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:U,A:X,B:Z,C:H,D:V,E:J,F:N,G:O,H:Q,I:Y,J:tt,K:et,L:st,M:it,N:ht,O:at,P:nt,Q:pt,R:gt,S:lt,T:dt,U:ot,V:ct,W:rt,X:ut,Y:wt,Z:_t,a:ft,b:yt,c:mt,d:bt,e:xt,f:$t,g:kt,h:vt,i:qt,j:Mt,k:zt,l:Pt,m:Lt,n:At,o:Et,p:Dt,q:Ft,r:It,s:Rt,t:St,u:Bt,v:Ct,w:jt,x:Gt,y:Tt,z:Wt,space:Kt,irregular:Ut,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Xt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:-5},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:0},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Zt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Vt={height_basic:6,width_basic:1,name:"status"},Jt={left:6,up:14,width:4,height:5,gap:0},Nt={left:12,up:14,width:4,height:5,gap:0},Ot={left:18,up:14,width:4,height:5,gap:0},Qt={left:24,up:14,width:4,height:5,gap:0},Yt={left:30,up:14,width:4,height:5,gap:0},te={left:36,up:14,width:4,height:5,gap:0},ee={left:42,up:14,width:4,height:5,gap:0},se={left:48,up:14,width:4,height:5,gap:0},ie={left:54,up:14,width:4,height:5,gap:0},he={left:60,up:14,width:4,height:5,gap:0},ae={left:66,up:14,width:4,height:5,gap:0},ne={left:72,up:14,width:4,height:5,gap:0},pe={left:78,up:14,width:5,height:5,gap:0},ge={left:84,up:14,width:4,height:5,gap:0},le={left:90,up:14,width:4,height:5,gap:0},de={left:0,up:21,width:4,height:5,gap:0},oe={left:6,up:21,width:4,height:5,gap:0},ce={left:12,up:21,width:4,height:5,gap:0},re={left:18,up:21,width:4,height:5,gap:0},ue={left:24,up:21,width:4,height:5,gap:0},we={left:30,up:21,width:4,height:5,gap:0},_e={left:36,up:21,width:4,height:5,gap:0},fe={left:42,up:21,width:5,height:5,gap:0},ye={left:48,up:21,width:4,height:5,gap:0},me={left:54,up:21,width:4,height:5,gap:0},be={left:60,up:21,width:4,height:5,gap:0},xe={left:6,up:28,width:4,height:5,gap:0},$e={left:12,up:28,width:4,height:5,gap:0},ke={left:18,up:28,width:4,height:5,gap:0},ve={left:24,up:28,width:4,height:5,gap:0},qe={left:30,up:28,width:4,height:5,gap:0},Me={left:36,up:28,width:4,height:5,gap:0},ze={left:42,up:28,width:4,height:5,gap:0},Pe={left:48,up:28,width:4,height:5,gap:0},Le={left:54,up:28,width:4,height:5,gap:0},Ae={left:60,up:28,width:4,height:5,gap:0},Ee={left:66,up:28,width:4,height:5,gap:0},De={left:72,up:28,width:4,height:5,gap:0},Fe={left:78,up:28,width:5,height:5,gap:0},Ie={left:84,up:28,width:4,height:5,gap:0},Re={left:90,up:28,width:4,height:5,gap:0},Se={left:0,up:35,width:4,height:5,gap:0},Be={left:6,up:35,width:4,height:5,gap:0},Ce={left:12,up:35,width:4,height:5,gap:0},je={left:18,up:35,width:4,height:5,gap:0},Ge={left:24,up:35,width:4,height:5,gap:0},Te={left:30,up:35,width:4,height:5,gap:0},We={left:36,up:35,width:4,height:5,gap:0},Ke={left:42,up:35,width:5,height:5,gap:0},Ue={left:48,up:35,width:4,height:5,gap:0},Xe={left:54,up:35,width:4,height:5,gap:0},Ze={left:60,up:35,width:4,height:5,gap:0},He={left:0,up:0,width:4,height:1,gap:0},Ve={left:90,up:35,width:4,height:5,gap:0},Je={left:24,up:0,width:5,height:5,gap:0},Ne={left:90,up:25,width:4,height:1,gap:4},Oe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Vt,A:Jt,B:Nt,C:Ot,D:Qt,E:Yt,F:te,G:ee,H:se,I:ie,J:he,K:ae,L:ne,M:pe,N:ge,O:le,P:de,Q:oe,R:ce,S:re,T:ue,U:we,V:_e,W:fe,X:ye,Y:me,Z:be,a:xe,b:$e,c:ke,d:ve,e:qe,f:Me,g:ze,h:Pe,i:Le,j:Ae,k:Ee,l:De,m:Fe,n:Ie,o:Re,p:Se,q:Be,r:Ce,s:je,t:Ge,u:Te,v:We,w:Ke,x:Ue,y:Xe,z:Ze,space:He,irregular:Ve,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:Je,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Ne,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},Qe=(e,t)=>{const o={en:Ht,status:Oe};let r={};class g{constructor(s){this.name=s}delete(){delete r[this.name]}}class a extends g{constructor(s,h,d,l,c,f,_){super(s),this._={all_str:_.reduce((u,w)=>u+w.str,""),now:[{str:"",color:_[0].color,spacing_x:_[0].spacing_x,spacing_y:_[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=h,this.y=d,this.direction=l,this.size=c,this.data=_,this.font=(u=>{switch(u){case"status":return o.status;default:return o.en}})(f),r[s]=this,this.process()}write(){const s=this.size,h=this.direction*Math.PI/180,d=this._.now.reduce((u,w)=>u+w.str.length,0);let l=0,c=0,f=0;const _=u=>u in this.font?this.font[u]:this.font.space;return this._.now.forEach(u=>{u.str.split("").forEach(b=>{const x=_(b);b==`
`?(l=0,c+=this.font.props.height_basic+u.spacing_y):(e.stamp(this.font.props.name+"_"+u.color,this.x+(Math.cos(h)*l-Math.sin(h)*(c+x.gap/2))*s/100,this.y+(Math.sin(h)*l+Math.cos(h)*(c+x.gap/2))*s/100,this.direction,s,1,"start",{left:x.left,top:x.up,width:x.width,height:x.height}),f+1<d&&(l+=x.width+this.font.props.width_basic+u.spacing_x)),f++})}),this}process(){const s=this.data.reduce((h,d)=>h+d.str.length,0);if(this._.len_allow==s&&t.z){delete r[this.name];return}else t.x?(this._.len_allow=s,this._.current_char=s):this._.len_allow<s&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,s);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class i extends g{constructor(s,h,d,l,c,f,_,u,w,b,x){super(s),this.str_now="",this.len_now=0,this.str=h,this.x=d,this.y=l,this.direction=c,this.size=f,this.color=_,this.spacing_x=u,this.spacing_y=w,this.speed=b,this.font=($=>{switch($){case"status":return o.status;default:return o.en}})(x),this.len_allow=0,r[s]=this,this.process()}write(){const s=this.str_now,h=this.size,d=this.direction*Math.PI/180;let l,c;[l,c]=[0,0];const f=_=>_ in this.font?this.font[_]:this.font.space;for(let _=0;_<s.length;_++){const u=f(s[_]);s[_]==`
`?(l=0,c+=this.font.props.height_basic+this.spacing_y):(e.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(d)*l-Math.sin(d)*(c-u.gap))*h/100,this.y+(Math.sin(d)*l+Math.cos(d)*(c-u.gap))*h/100,this.direction,h,1,"start",{left:u.left,top:u.up,width:u.width,height:u.height}),_+1<s.length&&(l+=u.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.len_allow==this.str.length&&t.z){delete r[this.name];return}else t.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed);for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length]}}return{Super:a,Plane:i,process:()=>{for(const n in r)r[n].process()},dict:r}},Ye=(e,t)=>{class o{constructor(i,p,n,s,h,d,l=4){this.dx=i,this.dy=p,this.dd=n,this.len=s,this.align=h,this.width=l,this.soul_size=6,this.relative=d||(()=>{const c=this.dd,f=t.x-this.dx;return(t.y-this.dy)*m(c)+f*y(c)>0?"plus":"minus"})()}judge(){const i=this.dd,p=t.x-this.dx,n=t.y-this.dy,s=p*m(i)+n*-y(i),h=n*m(i)+p*y(i);if(this.len/2>s&&s>-this.len/2){if(this.relative=="minus"&&h>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>h){const d=s*m(-i)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*y(-i),l=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-m(-i)+s*y(-i);t.x=d+this.dx,t.y=l+this.dy}}else h>0?this.relative="plus":this.relative="minus"}draw(){e.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class r{constructor(i,p,n,s=4){this.dx=i,this.dy=p,this.dd=n,this.width=s}judge(){const i=this.dd,p=t.x-this.dx,n=t.y-this.dy,s=p*m(i)+n*-y(i);if(n*m(i)+p*y(i)>-this.width){const d=s*m(-i)+this.width*y(-i),l=this.width*-m(-i)+s*y(-i);t.x=d+this.dx,t.y=l+this.dy}}draw(){const i=this.dx+320*y(this.dd),p=this.dy+320*m(this.dd);e.drawRect(i,p,640,640,"#ffffff88",this.dd,1,"center++")}}const g={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:6,walls:[],draw(){this.walls.forEach(a=>{const i=a.dx+640*y(a.dd),p=a.dy+640*m(a.dd);e.drawRect(i,p,1280,1280,"#ffffff",a.dd,1,"center++")}),this.walls.forEach(a=>{const i=a.dx+640*y(a.dd),p=a.dy+640*m(a.dd);e.drawRect(i,p,1280-a.width*2,1280-a.width*2,"#000000",a.dd,1,"center++")})},judge(){this.walls.forEach(a=>{a.judge()})},update(){{const a=this.dire,i=this.center_x,p=this.center_y,n=this.walls[0];n.dd=a,n.dx=i+this.height/2*y(a),n.dy=p+this.height/2*m(a)}{const a=this.dire+90,i=this.center_x,p=this.center_y,n=this.walls[1];n.dd=a,n.dx=i+this.height/2*y(a),n.dy=p+this.height/2*m(a)}{const a=this.dire+180,i=this.center_x,p=this.center_y,n=this.walls[2];n.dd=a,n.dx=i+this.height/2*y(a),n.dy=p+this.height/2*m(a)}{const a=this.dire+270,i=this.center_x,p=this.center_y,n=this.walls[3];n.dd=a,n.dx=i+this.height/2*y(a),n.dy=p+this.height/2*m(a)}},init(){this.walls.push(new r(0,0,0,this.thickness)),this.walls.push(new r(0,0,90,this.thickness)),this.walls.push(new r(0,0,180,this.thickness)),this.walls.push(new r(0,0,270,this.thickness))}};return g.init(),{Wall:o,box:g}},ts=(e,t,o,r)=>{let g={};const a=class z extends o{constructor(s,h,d,l,c,f,_,u,w,b,x){super(l,c,f,_,"gb_1",!0),this.s_x=l,this.s_y=c,this.s_d=f,this.t_x=s,this.t_y=h,this.t_d=d,this.c_t=w,this.b_s=b,this.b_d=x,this.width=u,this.age=0,this.id=z.current_id,g[z.current_id]=this,z.current_id++,t.play_ctx("gb_charge",1)}move_self(){if(this.age<this.c_t){let s=(this.c_t-this.age)**4/this.c_t**4;this.x=s*this.s_x+(1-s)*this.t_x,this.y=s*this.s_y+(1-s)*this.t_y,this.d=s*this.s_d+(1-s)*this.t_d,console.log(s)}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let s=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(s/2)}}draw(){this.b_s+this.c_t<this.age&&e.drawRect(this.x+y(this.d)*4800/-2,this.y+m(this.d)*4800/-2,this.width*this.size/5*(1+y(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const s=r.soul.x-this.x,h=r.soul.y-this.y,d=s*m(this.d)+h*-y(this.d),l=h*m(this.d)+s*y(this.d);this.b_s+this.c_t<=this.age&&0>l&&this.width*this.size/10>d&&d>-this.width*this.size/10&&r.damage(2)}}static process(){for(const s in g){const h=g[s];h.move_self(),h.draw(),h.judge(),h.age++,h.b_d+h.b_s==h.age&&t.play_ctx("gb_fire",1),h.b_d+h.b_s+h.c_t<=h.age&&delete g[s]}}};a.current_id=0;let i=a;return{gbDict:g,gb:i,process:()=>{i.process()}}},es=async()=>{const e=await R(W);let t="battle";const o={lv:1,hp:20,hp_max:20,soul:new e.Sprite(320,240,0,80,"soul",!0),damage(h){this.hp-=h,e.aLib.play_ctx("damage",2),this.hp<=0&&(t="game_over")}},r=ts(e.cLib,e.aLib,e.Sprite,o),g=K(e.cLib,e.aLib,e.Sprite,o),a=Qe(e.cLib,e.inputKeys);Ye(e.cLib,o.soul);const i=ss(e.cLib,a.Plane,o);let p=new a.Plane("test","Hello, world!",60,180,0,400,"white",0,0,5,"en"),n=0;new r.gb(100,200,0,400,600,90,100,1,60,60,60),await e.while(()=>t==="battle",()=>{n++,e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),e.inputKeys.up&&(o.soul.y+=3.5),e.inputKeys.down&&(o.soul.y-=3.5),e.inputKeys.right&&(o.soul.x+=3.5),e.inputKeys.left&&(o.soul.x-=3.5),g.process(),r.process(),a.process(),p.write(),i(),o.soul.stamp(),e.cLib.stamp("back",320,240,0,100,.2)}),n=0;let s=[];await e.while(()=>t==="game_over",()=>{if(e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),n==0)e.aLib.play_ctx("heartbreak_1",2);else if(n<60)e.cLib.stamp("death_0",o.soul.x,o.soul.y,0,80);else if(n==60){e.aLib.play_ctx("heartbreak_2",2);for(let h=0;h<4;h++){let d=Math.random()*12-6,l=Math.random()*8+4;s.push(new e.Sprite(o.soul.x,o.soul.y,Math.random()*360,80,`death_${h+1}`,!0,c=>{c.x+=d,c.y+=l,c.d+=d,l-=.333,c.stamp()}))}}else 60<n&&n<180?s.forEach(h=>h.act()):n==180&&(t="waiting");n++})},ss=(e,t,o)=>()=>{const r=new t("_","chara",32,75,0,300,"white",0,0,0,"status");r.write(),r.delete();const g=new t("_","lV",134,75,0,300,"white",0,0,0,"status");g.write(),g.delete();const a=new t("_",`${("00"+o.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");a.write(),a.delete();const i=new t("_",`${("00"+o.hp).slice(-2)}`,o.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");i.write(),i.delete();const p=new t("_","/",o.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");p.write(),p.delete();const n=new t("_",`${("00"+o.hp_max).slice(-2)}`,o.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");n.write(),n.delete(),e.drawRect(256,59,o.hp_max*1.2,21,"red",0,1,"start"),e.drawRect(256,59,o.hp*1.2,21,"yellow",0,1,"start"),e.stamp("hp_white",224,74,0,100,1,"start"),e.stamp("kr_white",o.hp_max*1.2+267,74,0,100,1,"start")};window.onload=es;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
