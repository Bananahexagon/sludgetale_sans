const A=(e,t)=>{const c=(i,l,s)=>{i()?(e(),l(),t(),requestAnimationFrame(()=>c(i,l,s))):s()},o=(i,l)=>new Promise(s=>{c(i,l,s)}),h=(i,l,s,a)=>{s<i?(e(),l(s),t(),requestAnimationFrame(()=>h(i,l,s+1,a))):a()},p=(i,l,s=0)=>new Promise(a=>{h(i,l,s,a)}),n=i=>{e(),i(),t(),requestAnimationFrame(()=>n(i))};return{frameWhile:o,frameFor:p,frameLoop:n}},P=[{type:"image",name:"soul",src:"./assets/images/soul.png"},{type:"image",name:"soul_blue",src:"./assets/images/soul_blue.png"},{type:"image",name:"commands",src:"./assets/images/commands.png"},{type:"image",name:"back",src:"./assets/images/back.png"},{type:"image",name:"sans",src:"./assets/images/sans.png"},{type:"image",name:"hp_kr_purple",src:"./assets/images/hp_kr_purple.png"},{type:"image",name:"determination_white",src:"./assets/images/font/determination_white.png"},{type:"image",name:"determination_red",src:"./assets/images/font/determination_red.png"},{type:"image",name:"determination_orange",src:"./assets/images/font/determination_orange.png"},{type:"image",name:"determination_blue",src:"./assets/images/font/determination_blue.png"},{type:"image",name:"determination_yellow",src:"./assets/images/font/determination_yellow.png"},{type:"image",name:"status_white",src:"./assets/images/font/status_white.png"},{type:"image",name:"status_red",src:"./assets/images/font/status_red.png"},{type:"image",name:"status_orange",src:"./assets/images/font/status_orange.png"},{type:"image",name:"status_blue",src:"./assets/images/font/status_blue.png"},{type:"image",name:"status_yellow",src:"./assets/images/font/status_yellow.png"},{type:"image",name:"status_purple",src:"./assets/images/font/status_purple.png"},{type:"image",name:"kr_white",src:"./assets/images/kr_white.png"},{type:"image",name:"hp_white",src:"./assets/images/hp_white.png"},{type:"image",name:"bone_head_white",src:"./assets/images/bone_head_white.png"},{type:"image",name:"bananahexagon",src:"./assets/images/normal_icon.png"},{type:"image",name:"death_0",src:"./assets/images/death_0.png"},{type:"image",name:"death_1",src:"./assets/images/death_1.png"},{type:"image",name:"death_2",src:"./assets/images/death_2.png"},{type:"image",name:"death_3",src:"./assets/images/death_3.png"},{type:"image",name:"death_4",src:"./assets/images/death_4.png"},{type:"image",name:"gb_1",src:"./assets/images/gb_1.png"},{type:"image",name:"gb_2",src:"./assets/images/gb_2.png"},{type:"image",name:"gb_3",src:"./assets/images/gb_3.png"},{type:"image",name:"gb_4",src:"./assets/images/gb_4.png"},{type:"image",name:"gb_5",src:"./assets/images/gb_5.png"},{type:"image",name:"gb_6",src:"./assets/images/gb_6.png"},{type:"audio",name:"damage",src:"./assets/audios/p_damage.wav"},{type:"audio",name:"heartbreak_1",src:"./assets/audios/heartbreak_1.wav"},{type:"audio",name:"heartbreak_2",src:"./assets/audios/heartbreak_2.wav"},{type:"audio",name:"gb_charge",src:"./assets/audios/gb_charge.wav"},{type:"audio",name:"gb_fire",src:"./assets/audios/gb_fire.wav"},{type:"audio",name:"cursor_move",src:"./assets/audios/cursor_move.wav"},{type:"audio",name:"cursor_confirm",src:"./assets/audios/cursor_confirm.wav"}],E=async e=>{const t={},c={},o={},h=P,p=[];return h.forEach(n=>p.push(new Promise(i=>{switch(n.type){case"image":{const l=new Image;l.src=n.src,l.onload=()=>{t[n.name]=l,i()}}break;case"audio":{const l=new Audio(n.src);l.autoplay=!1,l.muted=!0,l.addEventListener("loadeddata",()=>{l.muted=!1,(async()=>{const a=await(await fetch(n.src)).arrayBuffer();c[n.name]={ctx:await e.decodeAudioData(a),data:l,time:1/0},l.onload=()=>i()})().then(i)})}break;case"font":(async()=>{const a=await(await(await fetch(n.src)).text()).match(/url\(.+?\)/g);if(!a)throw new Error("フォントが見つかりませんでした");const d=[];a.forEach(g=>{d.push((async()=>{const r=new FontFace(n.name,g);await r.load(),o[n.name]=r,await document.fonts.add(r)})())}),Promise.all(d)})().then(i);break}}))),await Promise.all(p),{Images:t,Audios:c,Fonts:o}},m=e=>Math.sin(e/360*Math.PI*2),y=e=>Math.cos(e/360*Math.PI*2),D=(e,t,c,o,h,p)=>{const n=(a,d,g,r=0,f=100,w=1,u="center",x=1,$,_=!1)=>{if(_){const b=c[a],[v,k,q,z]=$===void 0?[0,0,b.width,b.height]:[$.left,$.top,$.width,$.height];switch(t.globalAlpha=w,u){case"center":t.save(),t.translate(d*h.display_quality,-g*h.display_quality+e.height),t.rotate(r*Math.PI/180),t.drawImage(b,v,k,q,z,-q*x*f/200*h.display_quality,-z*f/200*h.display_quality,q*x*f/100*h.display_quality,z*f/100*h.display_quality),t.restore();break;case"start":t.save(),t.translate(d*h.display_quality,-g*h.display_quality+e.height),t.rotate(r*Math.PI/180),t.drawImage(b,v,k,q,z,0,0,q*x*f/100*h.display_quality,z*f/100*h.display_quality),t.restore()}}else{const b=(y(p.d)*d-m(p.d)*g+p.x)*p.size/100,v=(m(p.d)*d+y(p.d)*g+p.y)*p.size/100,k=r+p.d;n(a,b,v,k,f*p.size/100,w,u,x,$,!0)}};return{stamp:n,drawRect:(a,d,g,r,f,w=0,u,x="center")=>{switch(t.globalAlpha=u===void 0?1:u,t.save(),x){case"center++":t.translate(a*h.display_quality,-d*h.display_quality+e.height),t.rotate(w*Math.PI/180),t.beginPath(),t.rect(-g/2*h.display_quality,-r/2*h.display_quality,g*h.display_quality,r*h.display_quality);break;case"center":t.translate((a-g/2)*h.display_quality,-(d-r/2)*h.display_quality+e.height),t.rotate(w*Math.PI/180),t.beginPath(),t.rect(0,0,g*h.display_quality,-r*h.display_quality);break;case"start":default:t.translate(a*h.display_quality,-d*h.display_quality+e.height),t.rotate(w*Math.PI/180),t.beginPath(),t.rect(0,0,g*h.display_quality,-r*h.display_quality);break}t.fillStyle=f,t.fill(),t.restore()},drawLine:(a,d,g,r,f,w,u=0)=>{switch(t.globalAlpha=1,t.beginPath(),u){case 0:t.moveTo((a-r*Math.sin(g)/2)*h.display_quality,-(d+r*Math.cos(g)/2)*h.display_quality+e.height),t.lineTo((a+r*Math.sin(g)/2)*h.display_quality,-(d-r*Math.cos(g)/2)*h.display_quality+e.height);break;case 1:t.moveTo(a*h.display_quality,-d*h.display_quality+e.height),t.lineTo((a+r*Math.sin(g))*h.display_quality,-(d-r*Math.cos(g))*h.display_quality+e.height);break}t.strokeStyle=w,t.lineWidth=f*h.display_quality,t.stroke()},drawText:(a,d,g,r,f,w="serif",u="left")=>{t.globalAlpha=1;const[x,$]=[d*h.display_quality,-g*h.display_quality+e.height];t.font=`${r*h.display_quality}px ${w}`,t.textAlign=u,t.fillStyle=f,t.fillText(a,x,$)}}},F=e=>{class t{constructor(o,h,p=0,n=100,i="",l=0,s=1,a){this.x=o,this.y=h,this.d=p,this.size=n,this.costume=i,this.alpha=l,this.width=s,this.act_=a}stamp(){this.alpha!=0&&e.stamp(this.costume,this.x,this.y,this.d,this.size,this.alpha,"center",this.width)}move(o){this.x+=m(this.d)*o,this.y+=y(this.d)*o}act(){(this.act_||(()=>{}))(this)}}return t},I=(e,t,c)=>({raw_to_stage:(h,p,n=0)=>{const i=e.getBoundingClientRect(),l=((h-i.left)/c.size*100-c.x)*t.stage_width/t.display_width,s=(t.display_height-((p-i.top)/c.size*100-c.y))*t.stage_height/t.display_height,a=n+c.d;return{x:l,y:s,d:a}}}),R=e=>{const t=new(window.AudioContext||window.webkitAudioContext);return{play:(h,p=0,n=1)=>{if(p<=e[h].time){const i=t.createGain(),l=t.createBufferSource();l.buffer=e[h].ctx,i.gain.setValueAtTime(n,t.currentTime),l.connect(i),i.connect(t.destination),l.start(0),e[h].time=0}},tick:()=>{for(const h in e)e[h].time++}}},S=async e=>{const t=document.getElementById(e.canvas_name);t.height=e.stage_height*e.display_quality,t.width=e.stage_width*e.display_quality;const c=t.getContext("2d"),o=new(window.AudioContext||window.webkitAudioContext),{Images:h,Audios:p,Fonts:n}=await E(o),i={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1,f:{up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1}},l={x:0,y:0,clicking:!1,is_in_rect(_,b,v,k,q="center"){switch(q){case"center":return _-v/2<this.x&&this.x<_+v/2&&b-k/2<this.y&&this.y<b+k/2;case"start":default:return _<this.x&&this.x<_+v&&b<this.y&&this.y<b+k}}},s={canvas:{size:100,x:0,y:0,d:0}},a=D(t,c,h,n,e,s.canvas),d=R(p),g=F(a);c.imageSmoothingEnabled=!1;const r=I(t,e,s.canvas);window.addEventListener("keydown",_=>{switch(_.key){case"ArrowUp":i.up=!0,i.f.up=!0;break;case"ArrowDown":i.down=!0,i.f.down=!0;break;case"ArrowLeft":i.left=!0,i.f.left=!0;break;case"ArrowRight":i.right=!0,i.f.right=!0;break;case"z":case"Z":i.z=!0,i.f.z=!0;break;case"x":case"X":i.x=!0,i.f.x=!0;break;case"c":case"C":i.c=!0,i.f.c=!0;break;case"d":case"D":i.d=!0,i.f.d=!0;break}}),window.addEventListener("keyup",_=>{switch(_.key){case"ArrowUp":i.up=!1;break;case"ArrowDown":i.down=!1;break;case"ArrowLeft":i.left=!1;break;case"ArrowRight":i.right=!1;break;case"z":case"Z":i.z=!1;break;case"x":case"X":i.x=!1;break;case"c":case"C":i.c=!1;break;case"d":case"D":i.d=!1;break}}),t.addEventListener("mousedown",_=>{l.clicking=!0;const b=r.raw_to_stage(_.x,_.y);l.x=b.x,l.y=b.y}),t.addEventListener("mousemove",_=>{const b=r.raw_to_stage(_.x,_.y);l.x=b.x,l.y=b.y}),t.addEventListener("mouseup",_=>{l.clicking=!1;const b=r.raw_to_stage(_.x,_.y);l.x=b.x,l.y=b.y});let f,w;{let _={up:!1,down:!1,left:!1,right:!1,z:!1,x:!1,c:!1,d:!1};f=()=>{["up","down","left","right","z","x","c","d"].forEach(b=>{_[b]&&(i.f[b]=!1)}),_={...i.f}},w=()=>{d.tick()}}const{frameWhile:u,frameFor:x,frameLoop:$}=A(f,w);return{canvas:t,ctx:c,Images:h,Audios:p,Fonts:n,inputKeys:i,inputMouse:l,props:s,cLib:a,aLib:d,Sprite:g,for:x,while:u,loop:$}},B=2,C=640,G=480,j=800,T=400,K="canvas",W={display_quality:B,stage_width:C,stage_height:G,display_width:j,display_height:T,canvas_name:K},U=(e,t,c,o)=>{let h={};const p=class M extends c{constructor(s,a,d,g,r,f,w,u,x,$){super(s,a,d,g,void 0,1,1),this.start_x=s,this.start_y=a,this.start_d=d,this.move_x=f,this.move_y=w,this.move_d=u,this.start_len=r,this.move_len=x,this.len=r,this.age=0,this.id=M.current_id,this.b_width=g,h[this.id]=this,M.current_id++}move_self(){this.age++,this.x=this.start_x+M.get_move(this.move_x,this.age),this.y=this.start_y+M.get_move(this.move_y,this.age),this.d=this.start_d+M.get_move(this.move_d,this.age),this.len=this.start_len+M.get_move(this.move_len,this.age)}draw(){y(this.d),e.stamp("bone_head_white",this.x+y(this.d)*this.b_width*8/6,this.y-m(this.d)*this.b_width*8/6,this.d+180,this.b_width*100/6,1,"start"),e.drawRect(this.x+m(this.d)*this.b_width*6/6,this.y+y(this.d)*this.b_width*6/6,this.b_width,this.len+this.b_width*2/6,"white",this.d,1,"start"),e.stamp("bone_head_white",this.x+m(this.d)*(this.len+this.b_width*14/6)-y(this.d)*this.b_width*2/6,this.y+y(this.d)*(this.len+this.b_width*14/6)+m(this.d)*this.b_width*2/6,this.d,this.b_width*100/6,1,"start")}judge(){{const s=o.soul.x-this.x,a=o.soul.y-this.y,d=s*y(this.d)+a*-m(this.d),g=a*y(this.d)+s*m(this.d);this.len+this.b_width*14/6>g&&g>0&&this.b_width>d&&d>0&&o.damage(1)}}static process(){for(const s in h){const a=h[s];a.move_self(),a.draw(),a.judge()}}static get_move(s,a){if(typeof s=="number")return s*a;switch(s.type){case"sin":case"cos":return m(s.cycle*a)*s.amp;case"custom":return s.fn(a)}}};p.current_id=0;let n=p;return{boneDict:h,normal:n,process:()=>{n.process()}}},V={height_basic:15,width_basic:2,name:"determination"},X={left:10,up:34,width:6,height:9,gap:0},Z={left:20,up:34,width:6,height:9,gap:0},N={left:30,up:34,width:6,height:9,gap:0},H={left:40,up:34,width:6,height:9,gap:0},J={left:50,up:34,width:6,height:9,gap:0},O={left:60,up:34,width:6,height:9,gap:0},Q={left:70,up:34,width:6,height:9,gap:0},Y={left:80,up:34,width:6,height:9,gap:0},tt={left:90,up:34,width:6,height:9,gap:0},et={left:100,up:34,width:6,height:9,gap:0},st={left:110,up:34,width:6,height:9,gap:0},it={left:120,up:34,width:6,height:9,gap:0},ht={left:130,up:34,width:7,height:9,gap:0},at={left:140,up:34,width:6,height:9,gap:0},nt={left:150,up:34,width:6,height:9,gap:0},pt={left:0,up:50,width:6,height:9,gap:0},lt={left:10,up:50,width:6,height:9,gap:0},gt={left:20,up:50,width:6,height:9,gap:0},dt={left:30,up:50,width:6,height:9,gap:0},ot={left:40,up:50,width:6,height:9,gap:0},rt={left:50,up:50,width:6,height:9,gap:0},ct={left:60,up:50,width:6,height:9,gap:0},ut={left:70,up:50,width:7,height:9,gap:0},wt={left:80,up:50,width:6,height:9,gap:0},_t={left:90,up:50,width:6,height:9,gap:0},ft={left:100,up:50,width:6,height:9,gap:0},mt={left:10,up:68,width:6,height:7,gap:2},yt={left:20,up:66,width:6,height:9,gap:0},bt={left:30,up:68,width:6,height:7,gap:2},xt={left:40,up:66,width:6,height:9,gap:0},$t={left:50,up:68,width:6,height:7,gap:2},vt={left:60,up:66,width:6,height:9,gap:0},kt={left:70,up:68,width:6,height:10,gap:5},qt={left:80,up:66,width:6,height:9,gap:0},Mt={left:90,up:65,width:6,height:10,gap:-1},zt={left:100,up:65,width:6,height:13,gap:2},Lt={left:110,up:66,width:6,height:9,gap:0},At={left:120,up:66,width:6,height:9,gap:0},Pt={left:130,up:68,width:7,height:7,gap:2},Et={left:140,up:68,width:6,height:7,gap:2},Dt={left:150,up:68,width:6,height:7,gap:2},Ft={left:0,up:84,width:6,height:10,gap:2},It={left:10,up:84,width:6,height:10,gap:2},Rt={left:20,up:84,width:6,height:7,gap:2},St={left:30,up:84,width:6,height:7,gap:2},Bt={left:40,up:82,width:6,height:9,gap:0},Ct={left:50,up:84,width:6,height:7,gap:2},Gt={left:60,up:84,width:6,height:7,gap:2},jt={left:70,up:84,width:7,height:7,gap:2},Tt={left:80,up:84,width:6,height:7,gap:2},Kt={left:90,up:84,width:6,height:10,gap:2},Wt={left:100,up:84,width:6,height:7,gap:2},Ut={left:0,up:0,width:1,height:1,gap:0},Vt={left:150,up:82,width:6,height:9,gap:0},Xt={left:40,up:0,width:6,height:13,gap:0},Zt={left:150,up:61,width:4,height:1,gap:14},Nt={0:{left:0,up:18,width:6,height:9,gap:0},1:{left:10,up:18,width:6,height:9,gap:0},2:{left:20,up:18,width:6,height:9,gap:0},3:{left:30,up:18,width:6,height:9,gap:0},4:{left:40,up:18,width:6,height:9,gap:0},5:{left:50,up:18,width:6,height:9,gap:0},6:{left:60,up:18,width:6,height:9,gap:0},7:{left:70,up:18,width:6,height:9,gap:0},8:{left:80,up:18,width:6,height:9,gap:0},9:{left:90,up:18,width:6,height:9,gap:0},props:V,A:X,B:Z,C:N,D:H,E:J,F:O,G:Q,H:Y,I:tt,J:et,K:st,L:it,M:ht,N:at,O:nt,P:pt,Q:lt,R:gt,S:dt,T:ot,U:rt,V:ct,W:ut,X:wt,Y:_t,Z:ft,a:mt,b:yt,c:bt,d:xt,e:$t,f:vt,g:kt,h:qt,i:Mt,j:zt,k:Lt,l:At,m:Pt,n:Et,o:Dt,p:Ft,q:It,r:Rt,s:St,t:Bt,u:Ct,v:Gt,w:jt,x:Tt,y:Kt,z:Wt,space:Ut,irregular:Vt,"!":{left:10,up:1,width:4,height:10,gap:-1},'"':{left:20,up:2,width:5,height:4,gap:-5},"#":{left:30,up:2,width:7,height:9,gap:0},$:Xt,"%":{left:50,up:2,width:7,height:9,gap:0},"&":{left:60,up:2,width:7,height:9,gap:0},"'":{left:70,up:2,width:2,height:4,gap:-5},"(":{left:80,up:2,width:4,height:9,gap:0},")":{left:90,up:2,width:4,height:9,gap:0},"*":{left:100,up:4,width:8,height:5,gap:0},"+":{left:110,up:4,width:6,height:5,gap:0},",":{left:120,up:9,width:2,height:4,gap:7},"-":{left:130,up:6,width:5,height:1,gap:0},".":{left:140,up:9,width:2,height:2,gap:7},"/":{left:150,up:2,width:6,height:10,gap:1},":":{left:100,up:20,width:2,height:7,gap:2},";":{left:110,up:20,width:2,height:9,gap:4},"<":{left:120,up:18,width:5,height:9,gap:0},"=":{left:130,up:21,width:5,height:3,gap:0},">":{left:140,up:18,width:5,height:9,gap:0},"?":{left:150,up:18,width:6,height:9,gap:0},"@":{left:0,up:34,width:6,height:9,gap:0},"[":{left:110,up:50,width:4,height:9,gap:0},"\\":{left:120,up:50,width:6,height:10,gap:1},"]":{left:130,up:50,width:4,height:9,gap:0},"^":{left:140,up:49,width:6,height:4,gap:-5},_:Zt,"`":{left:10,up:68,width:3,height:2,gap:2},"{":{left:110,up:82,width:5,height:9,gap:0},"|":{left:120,up:82,width:2,height:9,gap:0},"}":{left:130,up:82,width:5,height:9,gap:0},"~":{left:140,up:85,width:7,height:2,gap:-1}},Ht={height_basic:6,width_basic:1,name:"status"},Jt={left:6,up:14,width:4,height:5,gap:0},Ot={left:12,up:14,width:4,height:5,gap:0},Qt={left:18,up:14,width:4,height:5,gap:0},Yt={left:24,up:14,width:4,height:5,gap:0},te={left:30,up:14,width:4,height:5,gap:0},ee={left:36,up:14,width:4,height:5,gap:0},se={left:42,up:14,width:4,height:5,gap:0},ie={left:48,up:14,width:4,height:5,gap:0},he={left:54,up:14,width:4,height:5,gap:0},ae={left:60,up:14,width:4,height:5,gap:0},ne={left:66,up:14,width:4,height:5,gap:0},pe={left:72,up:14,width:4,height:5,gap:0},le={left:78,up:14,width:5,height:5,gap:0},ge={left:84,up:14,width:4,height:5,gap:0},de={left:90,up:14,width:4,height:5,gap:0},oe={left:0,up:21,width:4,height:5,gap:0},re={left:6,up:21,width:4,height:5,gap:0},ce={left:12,up:21,width:4,height:5,gap:0},ue={left:18,up:21,width:4,height:5,gap:0},we={left:24,up:21,width:4,height:5,gap:0},_e={left:30,up:21,width:4,height:5,gap:0},fe={left:36,up:21,width:4,height:5,gap:0},me={left:42,up:21,width:5,height:5,gap:0},ye={left:48,up:21,width:4,height:5,gap:0},be={left:54,up:21,width:4,height:5,gap:0},xe={left:60,up:21,width:4,height:5,gap:0},$e={left:6,up:28,width:4,height:5,gap:0},ve={left:12,up:28,width:4,height:5,gap:0},ke={left:18,up:28,width:4,height:5,gap:0},qe={left:24,up:28,width:4,height:5,gap:0},Me={left:30,up:28,width:4,height:5,gap:0},ze={left:36,up:28,width:4,height:5,gap:0},Le={left:42,up:28,width:4,height:5,gap:0},Ae={left:48,up:28,width:4,height:5,gap:0},Pe={left:54,up:28,width:4,height:5,gap:0},Ee={left:60,up:28,width:4,height:5,gap:0},De={left:66,up:28,width:4,height:5,gap:0},Fe={left:72,up:28,width:4,height:5,gap:0},Ie={left:78,up:28,width:5,height:5,gap:0},Re={left:84,up:28,width:4,height:5,gap:0},Se={left:90,up:28,width:4,height:5,gap:0},Be={left:0,up:35,width:4,height:5,gap:0},Ce={left:6,up:35,width:4,height:5,gap:0},Ge={left:12,up:35,width:4,height:5,gap:0},je={left:18,up:35,width:4,height:5,gap:0},Te={left:24,up:35,width:4,height:5,gap:0},Ke={left:30,up:35,width:4,height:5,gap:0},We={left:36,up:35,width:4,height:5,gap:0},Ue={left:42,up:35,width:5,height:5,gap:0},Ve={left:48,up:35,width:4,height:5,gap:0},Xe={left:54,up:35,width:4,height:5,gap:0},Ze={left:60,up:35,width:4,height:5,gap:0},Ne={left:0,up:0,width:4,height:1,gap:0},He={left:90,up:35,width:4,height:5,gap:0},Je={left:24,up:0,width:5,height:5,gap:0},Oe={left:90,up:25,width:4,height:1,gap:4},Qe={0:{left:0,up:7,width:4,height:5,gap:0},1:{left:6,up:7,width:4,height:5,gap:0},2:{left:12,up:7,width:4,height:5,gap:0},3:{left:18,up:7,width:4,height:5,gap:0},4:{left:24,up:7,width:4,height:5,gap:0},5:{left:30,up:7,width:4,height:5,gap:0},6:{left:36,up:7,width:4,height:5,gap:0},7:{left:42,up:7,width:4,height:5,gap:0},8:{left:48,up:7,width:4,height:5,gap:0},9:{left:54,up:7,width:4,height:5,gap:0},props:Ht,A:Jt,B:Ot,C:Qt,D:Yt,E:te,F:ee,G:se,H:ie,I:he,J:ae,K:ne,L:pe,M:le,N:ge,O:de,P:oe,Q:re,R:ce,S:ue,T:we,U:_e,V:fe,W:me,X:ye,Y:be,Z:xe,a:$e,b:ve,c:ke,d:qe,e:Me,f:ze,g:Le,h:Ae,i:Pe,j:Ee,k:De,l:Fe,m:Ie,n:Re,o:Se,p:Be,q:Ce,r:Ge,s:je,t:Te,u:Ke,v:We,w:Ue,x:Ve,y:Xe,z:Ze,space:Ne,irregular:He,"!":{left:6,up:0,width:4,height:5,gap:0},'"':{left:12,up:0,width:3,height:2,gap:0},"#":{left:18,up:0,width:5,height:5,gap:0},$:Je,"%":{left:30,up:1,width:4,height:4,gap:1},"&":{left:36,up:0,width:5,height:5,gap:0},"'":{left:42,up:0,width:1,height:2,gap:-3},"(":{left:48,up:0,width:3,height:5,gap:0},")":{left:54,up:0,width:3,height:5,gap:0},"*":{left:60,up:0,width:5,height:5,gap:0},"+":{left:66,up:0,width:5,height:5,gap:0},",":{left:72,up:3,width:1,height:2,gap:3},"-":{left:78,up:2,width:5,height:1,gap:0},".":{left:84,up:4,width:1,height:1,gap:4},"/":{left:90,up:1,width:4,height:4,gap:1},":":{left:60,up:8,width:1,height:3,gap:0},";":{left:66,up:8,width:1,height:4,gap:1},"<":{left:72,up:7,width:3,height:5,gap:0},"=":{left:78,up:8,width:5,height:3,gap:0},">":{left:84,up:7,width:3,height:5,gap:0},"?":{left:90,up:7,width:4,height:5,gap:0},"@":{left:0,up:14,width:4,height:5,gap:0},"[":{left:66,up:21,width:4,height:5,gap:0},"\\":{left:72,up:22,width:4,height:4,gap:1},"]":{left:78,up:21,width:4,height:5,gap:0},"^":{left:84,up:21,width:5,height:3,gap:-1},_:Oe,"`":{left:0,up:27,width:1,height:2,gap:-5},"{":{left:66,up:35,width:3,height:5,gap:0},"|":{left:72,up:35,width:1,height:5,gap:0},"}":{left:78,up:35,width:3,height:5,gap:0},"~":{left:84,up:35,width:4,height:2,gap:-3}},Ye=(e,t)=>{const c={en:Nt,status:Qe};let o={};class h{constructor(s){this.name=s}delete(){delete o[this.name]}}class p extends h{constructor(s,a,d,g,r,f,w){super(s),this._={all_str:w.reduce((u,x)=>u+x.str,""),now:[{str:"",color:w[0].color,spacing_x:w[0].spacing_x,spacing_y:w[0].spacing_y}],len_allow:0,count:0,current_char:0,current_char_true:0},this.x=a,this.y=d,this.direction=g,this.size=r,this.data=w,this.font=(u=>{switch(u){case"status":return c.status;default:return c.en}})(f),o[s]=this,this.process()}write(){const s=this.size,a=this.direction*Math.PI/180,d=this._.now.reduce((u,x)=>u+x.str.length,0);let g=0,r=0,f=0;const w=u=>u in this.font?this.font[u]:this.font.space;return this._.now.forEach(u=>{u.str.split("").forEach($=>{const _=w($);$==`
`?(g=0,r+=this.font.props.height_basic+u.spacing_y):(e.stamp(this.font.props.name+"_"+u.color,this.x+(Math.cos(a)*g-Math.sin(a)*(r+_.gap/2))*s/100,this.y+(Math.sin(a)*g+Math.cos(a)*(r+_.gap/2))*s/100,this.direction,s,1,"start",1,{left:_.left,top:_.up,width:_.width,height:_.height}),f+1<d&&(g+=_.width+this.font.props.width_basic+u.spacing_x)),f++})}),this}process(){const s=this.data.reduce((a,d)=>a+d.str.length,0);if(this._.len_allow==s&&t.z){delete o[this.name];return}else t.x?(this._.len_allow=s,this._.current_char=s):this._.len_allow<s&&(this._.len_allow+=1/this.data[this._.count].speed,this._.current_char+=1/this.data[this._.count].speed);for(;this._.current_char_true<Math.min(this._.len_allow,s);)for(this._.now[this._.count].str+=this.data[this._.count].str[this._.now[this._.count].str.length],this._.current_char_true++;this.data[this._.count].str.length<=this._.now[this._.count].str.length&&this._.count+1<this.data.length;)this._.count++,this._.now.push({str:"",color:this.data[this._.count].color===void 0?"white":this.data[this._.count].color,spacing_x:this.data[this._.count].spacing_x,spacing_y:this.data[this._.count].spacing_y}),this._.current_char-=this.data[this._.count].str.length}}class n extends h{constructor(s,a,d,g,r,f,w,u,x,$,_){super(s),this.str_now="",this.len_now=0,this.str=a,this.x=d,this.y=g,this.direction=r,this.size=f,this.color=w,this.spacing_x=u,this.spacing_y=x,this.speed=$,this.font=(b=>{switch(b){case"status":return c.status;default:return c.en}})(_),this.len_allow=0,o[s]=this,this.process()}write(){const s=this.str_now,a=this.size,d=this.direction*Math.PI/180;let g,r;[g,r]=[0,0];const f=w=>w in this.font?this.font[w]:this.font.space;for(let w=0;w<s.length;w++){const u=f(s[w]);s[w]==`
`?(g=0,r+=this.font.props.height_basic+this.spacing_y):(e.stamp(this.font.props.name+"_"+(this.color?this.color:"white"),this.x+(Math.cos(d)*g-Math.sin(d)*(r-u.gap))*a/100,this.y+(Math.sin(d)*g+Math.cos(d)*(r-u.gap))*a/100,this.direction,a,1,"start",1,{left:u.left,top:u.up,width:u.width,height:u.height}),w+1<s.length&&(g+=u.width+this.font.props.width_basic+this.spacing_x))}return this}process(){if(this.len_allow==this.str.length&&t.z){delete o[this.name];return}else t.x?this.len_allow=this.str.length:this.len_allow<this.str.length&&(this.len_allow+=1/this.speed);for(;this.str_now.length<Math.min(this.len_allow,this.str.length);)this.str_now+=this.str[this.str_now.length]}}return{Super:p,Plane:n,process:()=>{for(const l in o)o[l].process()},dict:o}},ts=(e,t)=>{class c{constructor(n,i,l,s,a,d,g=4){this.dx=n,this.dy=i,this.dd=l,this.len=s,this.align=a,this.width=g,this.soul_size=6,this.relative=d||(()=>{const r=this.dd,f=t.x-this.dx;return(t.y-this.dy)*y(r)+f*m(r)>0?"plus":"minus"})()}judge(){const n=this.dd,i=t.x-this.dx,l=t.y-this.dy,s=i*y(n)+l*-m(n),a=l*y(n)+i*m(n);if(this.len/2>s&&s>-this.len/2){if(this.relative=="minus"&&a>-(this.width/2+this.soul_size)||this.relative=="plus"&&this.width/2+this.soul_size>a){const d=s*y(-n)+(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*m(-n),g=(this.width/2+this.soul_size)*(this.relative=="minus"?1:-1)*-y(-n)+s*m(-n);t.x=d+this.dx,t.y=g+this.dy}}else a>0?this.relative="plus":this.relative="minus"}draw(){e.drawRect(this.dx,this.dy,this.len,this.width,"white",this.dd,1,"center++")}}class o{constructor(n,i,l,s=4){this.dx=n,this.dy=i,this.dd=l,this.width=s}judge(){const n=this.dd,i=t.x-this.dx,l=t.y-this.dy,s=i*y(n)+l*-m(n);if(l*y(n)+i*m(n)>-this.width){const d=s*y(-n)+this.width*m(-n),g=this.width*-y(-n)+s*m(-n);t.x=d+this.dx,t.y=g+this.dy}}draw(){const n=this.dx+320*m(this.dd),i=this.dy+320*y(this.dd);e.drawRect(n,i,640,640,"#ffffff88",this.dd,1,"center++")}}const h={center_x:320,center_y:240,dire:0,width:100,height:100,thickness:6,walls:[],draw(){this.walls.forEach(p=>{const n=p.dx+640*m(p.dd),i=p.dy+640*y(p.dd);e.drawRect(n,i,1280,1280,"#ffffff",p.dd,1,"center++")}),this.walls.forEach(p=>{const n=p.dx+640*m(p.dd),i=p.dy+640*y(p.dd);e.drawRect(n,i,1280-p.width*2,1280-p.width*2,"#000000",p.dd,1,"center++")})},judge(){this.walls.forEach(p=>{p.judge()})},update(){{const p=this.dire,n=this.center_x,i=this.center_y,l=this.walls[0];l.dd=p,l.dx=n+this.height/2*m(p),l.dy=i+this.height/2*y(p)}{const p=this.dire+90,n=this.center_x,i=this.center_y,l=this.walls[1];l.dd=p,l.dx=n+this.height/2*m(p),l.dy=i+this.height/2*y(p)}{const p=this.dire+180,n=this.center_x,i=this.center_y,l=this.walls[2];l.dd=p,l.dx=n+this.height/2*m(p),l.dy=i+this.height/2*y(p)}{const p=this.dire+270,n=this.center_x,i=this.center_y,l=this.walls[3];l.dd=p,l.dx=n+this.height/2*m(p),l.dy=i+this.height/2*y(p)}},init(){this.walls.push(new o(0,0,0,this.thickness)),this.walls.push(new o(0,0,90,this.thickness)),this.walls.push(new o(0,0,180,this.thickness)),this.walls.push(new o(0,0,270,this.thickness))}};return h.init(),{Wall:c,box:h}},es=(e,t,c,o)=>{let h={};const p=class L extends c{constructor(s,a,d,g,r,f,w,u,x,$,_){super(g,r,f,w,"gb_1",1,u),this.s_x=g,this.s_y=r,this.s_d=f,this.t_x=s,this.t_y=a,this.t_d=d,this.c_t=x,this.b_s=$,this.b_d=_,this.gb_width=u,this.age=0,this.id=L.current_id,h[this.id]=this,L.current_id++,t.play("gb_charge",1)}move_self(){if(this.age<this.c_t){let s=(this.c_t-this.age)**4/this.c_t**4;this.x=s*this.s_x+(1-s)*this.t_x,this.y=s*this.s_y+(1-s)*this.t_y,this.d=s*this.s_d+(1-s)*this.t_d}else this.age==this.c_t&&(this.x=this.t_x,this.y=this.t_y,this.d=this.t_d);if(this.b_s+this.c_t<=this.age&&-640<this.x&&this.x<640&&-640<this.y&&this.y<640){let s=(this.age-(this.b_s+this.c_t))**2;this.x=this.t_x,this.y=this.t_y,this.move(s/2)}}draw(){this.b_s+this.c_t<this.age&&e.drawRect(this.x+m(this.d)*4800/-2,this.y+y(this.d)*4800/-2,this.width*this.size/5*(1+m(this.age*10)*.2),4800,"white",this.d+180,Math.min((this.b_d+this.b_s+this.c_t-this.age)/15,1),"center++"),this.age==this.b_s+this.c_t-2&&(this.costume="gb_2"),this.age==this.b_s+this.c_t-1&&(this.costume="gb_3"),this.age==this.b_s+this.c_t&&(this.costume="gb_4"),this.b_s+this.c_t<this.age&&(this.costume=`gb_${(this.age-(this.b_s+this.c_t))%2+5}`),this.stamp()}judge(){{const s=o.soul.x-this.x,a=o.soul.y-this.y,d=s*y(this.d)+a*-m(this.d),g=a*y(this.d)+s*m(this.d);this.b_s+this.c_t<=this.age&&0>g&&this.gb_width*this.size/10>d&&d>-this.gb_width*this.size/10&&o.damage(1)}}static process(){for(const s in h){const a=h[s];a.move_self(),a.draw(),a.judge(),a.age++,a.b_d+a.b_s==a.age&&t.play("gb_fire",1),a.b_d+a.b_s+a.c_t<=a.age&&delete h[s]}}};p.current_id=0;let n=p;return{gbDict:h,gb:n,process:()=>{n.process()}}},ss=async()=>{const e=await S(W);let t="menu";const c=Ye(e.cLib,e.inputKeys);{let p=0;await e.while(()=>t==="menu",()=>{e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),e.inputKeys.f.up&&(p--,e.aLib.play("cursor_move")),e.inputKeys.f.down&&(p++,e.aLib.play("cursor_move")),e.cLib.stamp("soul",220,-p*50+240);const n=new c.Plane("_","play",270,250,0,200,"yellow",0,0,0,"en");n.write(),n.delete(),e.inputKeys.f.z&&(t="battle",e.aLib.play("cursor_confirm"))})}let o=0;const h={lv:1,hp:20,hp_max:20,soul:new e.Sprite(320,240,0,80,"soul",1,1),damage(p){this.hp-=p,e.aLib.play("damage",2),this.hp<=0&&(t="game_over")}};{o=0;const p=es(e.cLib,e.aLib,e.Sprite,h),n=U(e.cLib,e.aLib,e.Sprite,h);ts(e.cLib,h.soul);const i=is(e.cLib,c.Plane,h);new p.gb(100,200,0,400,600,90,100,2,60,60,60),await e.while(()=>t==="battle",()=>{o++,e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),e.inputKeys.up&&(h.soul.y+=3.5),e.inputKeys.down&&(h.soul.y-=3.5),e.inputKeys.right&&(h.soul.x+=3.5),e.inputKeys.left&&(h.soul.x-=3.5),n.process(),p.process(),c.process(),i(),h.soul.stamp(),e.cLib.stamp("back",320,240,0,100,.2)})}{o=0;let p=[];await e.while(()=>t==="game_over",()=>{if(e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height),o==0)e.aLib.play("heartbreak_1",2);else if(o<60)e.cLib.stamp("death_0",h.soul.x,h.soul.y,0,80);else if(o==60){e.aLib.play("heartbreak_2",2);for(let n=0;n<4;n++){let i=Math.random()*12-6,l=Math.random()*8+4;p.push(new e.Sprite(h.soul.x,h.soul.y,Math.random()*360,80,`death_${n+1}`,1,1,s=>{s.x+=i,s.y+=l,s.d+=i,l-=.333,s.stamp()}))}}else 60<o&&o<180?p.forEach(n=>n.act()):o==180&&(t="waiting");o++})}},is=(e,t,c)=>()=>{const o=new t("_","chara",32,75,0,300,"white",0,0,0,"status");o.write(),o.delete();const h=new t("_","lV",134,75,0,300,"white",0,0,0,"status");h.write(),h.delete();const p=new t("_",`${("00"+c.lv).slice(-2)}`,173,75,0,300,"white",0,0,0,"status");p.write(),p.delete();const n=new t("_",`${("00"+c.hp).slice(-2)}`,c.hp_max*1.2+306,77,0,300,"white",0,0,0,"status");n.write(),n.delete();const i=new t("_","/",c.hp_max*1.2+345,77,0,300,"white",0,0,0,"status");i.write(),i.delete();const l=new t("_",`${("00"+c.hp_max).slice(-2)}`,c.hp_max*1.2+369,77,0,300,"white",0,0,0,"status");l.write(),l.delete(),e.drawRect(256,59,c.hp_max*1.2,21,"red",0,1,"start"),e.drawRect(256,59,c.hp*1.2,21,"yellow",0,1,"start"),e.stamp("hp_white",224,74,0,100,1,"start"),e.stamp("kr_white",c.hp_max*1.2+267,74,0,100,1,"start")};window.onload=ss;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvZnJhbWUudHMiLCIuLi9zcmMvbGliL2xvYWRlci50cyIsIi4uL3NyYy9saWIvdXRpbHMudHMiLCIuLi9zcmMvbGliL2NhbnZhcy50cyIsIi4uL3NyYy9saWIvc3ByaXRlLnRzIiwiLi4vc3JjL2xpYi9wb3NpdGlvbi50cyIsIi4uL3NyYy9saWIvYXVkaW9zLnRzIiwiLi4vc3JjL2xpYi9jb3JlLnRzIiwiLi4vc3JjL2JvbmUudHMiLCIuLi9zcmMvZm9udC50cyIsIi4uL3NyYy9ib3gudHMiLCIuLi9zcmMvZ2IudHMiLCIuLi9zcmMvZ2FtZS50cyIsIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWN0IH0gZnJvbSBcIi4vdXRpbHNcIlxyXG5pbXBvcnQgeyBhTGliVCB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnJhbWVMaWJHZW4gPSAoYl90aWNrOigpPT52b2lkLGFfdGljazooKT0+dm9pZCkgPT4ge1xyXG4gICAgY29uc3QgZlcgPSAoY29uZGl0aW9uOiAoKSA9PiBib29sZWFuLCBwcm9jOiAoKSA9PiB2b2lkLCByZXNvbHZlOiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbigpKSB7IGJfdGljaygpOyBwcm9jKCk7IGFfdGljaygpOyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gZlcoY29uZGl0aW9uLCBwcm9jLCByZXNvbHZlKSkgfSBlbHNlIHtyZXNvbHZlKCl9XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFtZVdoaWxlID0gKGNvbmRpdGlvbjogKCkgPT4gYm9vbGVhbiwgcHJvYzogKCkgPT4gdm9pZCk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBmVyhjb25kaXRpb24sIHByb2MsIHJlc29sdmUpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBjb25zdCBmRiA9IChjb25kaXRpb246IG51bWJlciwgcHJvYzogKGFyZzogbnVtYmVyKSA9PiB2b2lkLCBpOiBudW1iZXIsIHJlc29sdmU6ICgpID0+IHZvaWQpID0+IHtcclxuICAgICAgICBpZiAoaSA8IGNvbmRpdGlvbikgeyBiX3RpY2soKTsgcHJvYyhpKTsgYV90aWNrKCk7IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBmRihjb25kaXRpb24sIHByb2MsIGkgKyAxLCByZXNvbHZlKSkgfSBlbHNlIHtyZXNvbHZlKCl9XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFtZUZvciA9IChjb25kaXRpb246IG51bWJlciwgcHJvYzogKGFyZzogbnVtYmVyKSA9PiB2b2lkLCBpOiBudW1iZXIgPSAwKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGZGKGNvbmRpdGlvbiwgcHJvYywgaSwgcmVzb2x2ZSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBmcmFtZUxvb3AgPSAocHJvYzogKCkgPT4gdm9pZCkgPT4geyBiX3RpY2soKTsgcHJvYygpOyBhX3RpY2soKTsgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IGZyYW1lTG9vcChwcm9jKSkgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZnJhbWVXaGlsZSwgZnJhbWVGb3IsIGZyYW1lTG9vcFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRGljdCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7IEFzc2V0cyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCBqc29uIGZyb20gXCIuLi9hc3NldHMuanNvblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGxvYWRBc3NldHMgPSBhc3luYyAoYXVkaW9Db250ZXh0OiBBdWRpb0NvbnRleHQpOiBQcm9taXNlPEFzc2V0cz4gPT4ge1xyXG4gICAgdHlwZSBBc3NldERhdGEgPSB7XHJcbiAgICAgICAgdHlwZTogXCJpbWFnZVwiIHwgXCJhdWRpb1wiIHwgXCJmb250XCIsXHJcbiAgICAgICAgc3JjOiBzdHJpbmcsXHJcbiAgICAgICAgbmFtZTogc3RyaW5nLFxyXG4gICAgfVxyXG4gICAgY29uc3QgSW1hZ2VzOiBEaWN0PEhUTUxJbWFnZUVsZW1lbnQ+ID0ge307XHJcbiAgICBjb25zdCBBdWRpb3M6IERpY3Q8eyBjdHg6IEF1ZGlvQnVmZmVyLCBkYXRhOiBIVE1MQXVkaW9FbGVtZW50LCB0aW1lOiBudW1iZXIgfT4gPSB7fTtcclxuICAgIGNvbnN0IEZvbnRzOiBEaWN0PEZvbnRGYWNlPiA9IHt9O1xyXG4gICAgY29uc3QgaW5kZXg6IEFzc2V0RGF0YVtdID0ganNvbiBhcyB1bmtub3duIGFzIEFzc2V0RGF0YVtdO1xyXG4gICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xyXG4gICAgaW5kZXguZm9yRWFjaCgoZTogQXNzZXREYXRhKSA9PiBwcm9taXNlcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChlLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcImltYWdlXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSBlLnNyYztcclxuICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBJbWFnZXNbZS5uYW1lXSA9IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImF1ZGlvXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvID0gbmV3IEF1ZGlvKGUuc3JjKTtcclxuICAgICAgICAgICAgICAgIGF1ZGlvLmF1dG9wbGF5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhdWRpby5tdXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVkZGF0YVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW8ubXV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGUuc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXVkaW9EYXRhID0gYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9zW2UubmFtZV0gPSB7IGN0eDogYXdhaXQgYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShhdWRpb0RhdGEpLCBkYXRhOiBhdWRpbywgdGltZTogSW5maW5pdHkgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW8ub25sb2FkID0gKCkgPT4gcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKCkudGhlbihyZXNvbHZlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZm9udFwiOiB7XHJcbiAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZS5zcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzc0ZvbnRGYWNlID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoVXJscyA9IGF3YWl0IGNzc0ZvbnRGYWNlLm1hdGNoKC91cmxcXCguKz9cXCkvZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaFVybHMpIHRocm93IG5ldyBFcnJvcihcIuODleOCqeODs+ODiOOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OBp+OBl+OBn1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlc19zdWI6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoVXJscy5mb3JFYWNoKChmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzX3N1Yi5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250ID0gbmV3IEZvbnRGYWNlKGUubmFtZSwgZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZm9udC5sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9udHNbZS5uYW1lXSA9IGZvbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZG9jdW1lbnQuZm9udHMuYWRkKGZvbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXNfc3ViKVxyXG4gICAgICAgICAgICAgICAgfSkoKS50aGVuKHJlc29sdmUpXHJcbiAgICAgICAgICAgIH0gYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSkpKTtcclxuICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICAgIHJldHVybiB7IEltYWdlcywgIEF1ZGlvcywgRm9udHMgfTtcclxufTsiLCJcclxuY2xhc3MgT3B0PFQ+IHtcclxuICAgIGlzX3NvbWU6IGJvb2xlYW47XHJcbiAgICB2YWx1ZTogVCB8IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0cnVjdG9yKGlzX3NvbWU6IGJvb2xlYW4sIHZhbHVlOiBUIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5pc19zb21lID0gaXNfc29tZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICB1bndyYXAoKTogVCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfc29tZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdW53cmFwX29yKGFyZzogVCk6IFQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzX3NvbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdW53cmFwX29yX2Vsc2UoZm46ICgpID0+IFQpOiBUIHtcclxuICAgICAgICBpZiAodGhpcy5pc19zb21lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlITtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgTm9uZTxUPigpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9wdDxUPihmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgU29tZTxUPihhcmc6IFQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9wdDxUPih0cnVlLCBhcmcpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHRyeTxUPihmbjogKCkgPT4gVCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHYgPSBmbigpO1xyXG4gICAgICAgICAgICByZXR1cm4gT3B0LlNvbWU8VD4odik7XHJcbiAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgIHJldHVybiBPcHQuTm9uZTxUPigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgUmVzPFQsIEU+IHtcclxuICAgIGlzX29rOiBib29sZWFuO1xyXG4gICAgdmFsdWU6IFQgfCBFIHwgdW5kZWZpbmVkO1xyXG4gICAgY29uc3RydWN0b3IoaXNfb2s6IGJvb2xlYW4sIHZhbHVlOiBUIHwgRSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMuaXNfb2sgPSBpc19vaztcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICB1bndyYXAoKTogVCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfb2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgYXMgVDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy52YWx1ZSBhcyBFIGFzIHN0cmluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdW53cmFwX29yKGFyZzogVCk6IFQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzX29rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlIGFzIFQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFyZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB1bndyYXBfb3JfZWxzZShmbjogKGFyZzA6IEUpID0+IFQpOiBUIHtcclxuICAgICAgICBpZiAodGhpcy5pc19vaykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSBhcyBUO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbih0aGlzLnZhbHVlIGFzIEUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBPazxULCBFPihhcmc6IFQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJlczxULCBFPih0cnVlLCBhcmcpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIEVycjxULCBFPihlcnI6IEUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJlczxULCBFPihmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdHJ5PFQ+KGZuOiAoKSA9PiBUKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgdiA9IGZuKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBSZXMuT2sodik7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZXMuRXJyKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxudHlwZSBEaWN0PFQ+ID0ge1xyXG4gICAgW2tleXM6IHN0cmluZ106IFQsXHJcbn1cclxuXHJcbmNvbnN0IHNpbjM2MCA9IChkOiBudW1iZXIpID0+IE1hdGguc2luKGQgLyAzNjAgKiBNYXRoLlBJICogMik7XHJcbmNvbnN0IGNvczM2MCA9IChkOiBudW1iZXIpID0+IE1hdGguY29zKGQgLyAzNjAgKiBNYXRoLlBJICogMik7XHJcbmNvbnN0IHRhbjM2MCA9IChkOiBudW1iZXIpID0+IE1hdGgudGFuKGQgLyAzNjAgKiBNYXRoLlBJICogMik7XHJcblxyXG5jb25zdCBkaXN0YW5jZSA9IChseDogbnVtYmVyLCBseTogbnVtYmVyLCByeDogbnVtYmVyLCByeTogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQoKHJ4IC0gbHgpICoqIDIgKyAocnkgLSBseSkgKiogMilcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICAgIE9wdCxcclxuICAgIFJlcyxcclxuICAgIERpY3QsXHJcbiAgICBzaW4zNjAsXHJcbiAgICBjb3MzNjAsXHJcbiAgICB0YW4zNjAsXHJcbiAgICBkaXN0YW5jZSxcclxufSIsImltcG9ydCB7IGNvbmZpZ1QsIENhbnZhc1Byb3BzLCBjTGliVCB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IHNpbjM2MCwgY29zMzYwIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBDYW52YXNMaWJHZW4gPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIEltYWdlczogeyBba2V5czogc3RyaW5nXTogSFRNTEltYWdlRWxlbWVudCwgfSwgRm9udHM6IHsgW2tleXM6IHN0cmluZ106IEZvbnRGYWNlIH0sIGNvbmZpZzogY29uZmlnVCwgcHJvcHM6IENhbnZhc1Byb3BzKTogY0xpYlQgPT4ge1xyXG4gICAgY29uc3Qgc3RhbXAgPSAobmFtZTogc3RyaW5nLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBkZDogbnVtYmVyID0gMCwgc2l6ZTogbnVtYmVyID0gMTAwLCBhbHBoYTogbnVtYmVyID0gMSwgYWxpZ246IFwiY2VudGVyXCIgfCBcInN0YXJ0XCIgPSBcImNlbnRlclwiLGV4X3dpZHRoOm51bWJlcj0xLCBib3g/OiB7IGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCB9LCBhYnNvbHV0ZSA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgaWYgKGFic29sdXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvc3R1bWUgPSBJbWFnZXNbbmFtZV07XHJcbiAgICAgICAgICAgIGNvbnN0IFtzeCwgc3ksIHN3LCBzaF0gPSBib3ggPT09IHVuZGVmaW5lZCA/IFswLCAwLCBjb3N0dW1lLndpZHRoLCBjb3N0dW1lLmhlaWdodF0gOiBbYm94LmxlZnQsIGJveC50b3AsIGJveC53aWR0aCwgYm94LmhlaWdodF07XHJcbiAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IGFscGhhO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGFsaWduKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2VudGVyXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoZHggKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAtZHkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5ICsgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJvdGF0ZShkZCAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoY29zdHVtZSwgc3gsIHN5LCBzdywgc2gsICgtc3cqIGV4X3dpZHRoICogc2l6ZSAvIDIwMCkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAoLXNoICogc2l6ZSAvIDIwMCkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAoc3cgKiBleF93aWR0aCAqIHNpemUgLyAxMDApICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSwgKHNoICogc2l6ZSAvIDEwMCkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5KTtcclxuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdGFydFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKGR4ICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSwgLWR5ICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSArIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eC5yb3RhdGUoZGQgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGNvc3R1bWUsIHN4LCBzeSwgc3csIHNoLCAwLCAwLCAoc3cgKiBleF93aWR0aCAqIHNpemUgLyAxMDApICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSwgKHNoICogc2l6ZSAvIDEwMCkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5KTtcclxuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgeCA9IChjb3MzNjAocHJvcHMuZCkgKiBkeCAtIHNpbjM2MChwcm9wcy5kKSAqIGR5ICsgcHJvcHMueCkgKiBwcm9wcy5zaXplIC8gMTAwO1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gKHNpbjM2MChwcm9wcy5kKSAqIGR4ICsgY29zMzYwKHByb3BzLmQpICogZHkgKyBwcm9wcy55KSAqIHByb3BzLnNpemUgLyAxMDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSBkZCArIHByb3BzLmQ7XHJcbiAgICAgICAgICAgIHN0YW1wKG5hbWUsIHgsIHksIGQsIHNpemUgKiBwcm9wcy5zaXplIC8gMTAwLCBhbHBoYSwgYWxpZ24sZXhfd2lkdGgsIGJveCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGRyYXdSZWN0ID0gKGR4OiBudW1iZXIsIGR5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjb2xvcjogc3RyaW5nLCBkaXJlY3Rpb246IG51bWJlciA9IDAsIGFscGhhPzogbnVtYmVyLCB0eXBlOiBzdHJpbmcgPSBcImNlbnRlclwiKSA9PiB7XHJcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gYWxwaGEgPT09IHVuZGVmaW5lZCA/IDEgOiBhbHBoYTtcclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiY2VudGVyKytcIjoge1xyXG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShkeCAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHksIC1keSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHkgKyBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGN0eC5yb3RhdGUoZGlyZWN0aW9uICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBjdHgucmVjdCgoLXdpZHRoIC8gMikgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAoLWhlaWdodCAvIDIpICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSwgKHdpZHRoKSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHksIChoZWlnaHQpICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSk7XHJcbiAgICAgICAgICAgIH0gYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjZW50ZXJcIjoge1xyXG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgoZHggLSB3aWR0aCAvIDIpICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSwgLShkeSAtIGhlaWdodCAvIDIpICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSArIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgY3R4LnJvdGF0ZShkaXJlY3Rpb24gKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGN0eC5yZWN0KDAsIDAsICh3aWR0aCkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAtKGhlaWdodCkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5KTtcclxuICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInN0YXJ0XCI6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoZHggKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAtZHkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5ICsgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjdHgucm90YXRlKGRpcmVjdGlvbiAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgY3R4LnJlY3QoMCwgMCwgKHdpZHRoKSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHksIC0oaGVpZ2h0KSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHkpO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGRyYXdMaW5lID0gKGx4OiBudW1iZXIsIGx5OiBudW1iZXIsIGQ6IG51bWJlciwgbGVuOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGNvbG9yOiBzdHJpbmcsIHR5cGU6IG51bWJlciA9IDApID0+IHtcclxuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAwOiB7XHJcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKChseCAtIGxlbiAqIE1hdGguc2luKGQpIC8gMikgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAtKGx5ICsgbGVuICogTWF0aC5jb3MoZCkgLyAyKSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHkgKyBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oKGx4ICsgbGVuICogTWF0aC5zaW4oZCkgLyAyKSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHksIC0obHkgLSBsZW4gKiBNYXRoLmNvcyhkKSAvIDIpICogY29uZmlnLmRpc3BsYXlfcXVhbGl0eSArIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8obHggKiBjb25maWcuZGlzcGxheV9xdWFsaXR5LCAtbHkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5ICsgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKChseCArIGxlbiAqIE1hdGguc2luKGQpKSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHksIC0obHkgLSBsZW4gKiBNYXRoLmNvcyhkKSkgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5ICsgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH0gYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB3aWR0aCAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZHJhd1RleHQgPSAodHg6IHN0cmluZywgbHg6IG51bWJlciwgbHk6IG51bWJlciwgc2l6ZTogbnVtYmVyLCBjb2xvcjogc3RyaW5nLCBmb250OiBzdHJpbmcgPSBcInNlcmlmXCIsIGFsaWduOiBcImxlZnRcIiB8IFwicmlnaHRcIiB8IFwiY2VudGVyXCIgfCBcInN0YXJ0XCIgfCBcImVuZFwiID0gXCJsZWZ0XCIpID0+IHtcclxuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xyXG4gICAgICAgIGNvbnN0IFt4LCB5XSA9IFtseCAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHksIC1seSAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHkgKyBjYW52YXMuaGVpZ2h0XTtcclxuICAgICAgICBjdHguZm9udCA9IGAke3NpemUgKiBjb25maWcuZGlzcGxheV9xdWFsaXR5fXB4ICR7Zm9udH1gO1xyXG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBhbGlnbjtcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICAgICAgY3R4LmZpbGxUZXh0KHR4LCB4LCB5KTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhbXAsXHJcbiAgICAgICAgZHJhd1JlY3QsXHJcbiAgICAgICAgZHJhd0xpbmUsXHJcbiAgICAgICAgZHJhd1RleHQsXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29yZVQsIGNMaWJULCBTcHJpdGVDbGFzc1QgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBEaWN0LCBPcHQsIHNpbjM2MCwgY29zMzYwIH0gZnJvbSBcIi4vdXRpbHNcIlxyXG5cclxuZXhwb3J0IGNvbnN0IFNwcml0ZUxpYkdlbiA9IChjTGliOiBjTGliVCk6IFNwcml0ZUNsYXNzVCA9PiB7XHJcbiAgICB0eXBlIFNlbGYgPSB7XHJcbiAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgIHk6IG51bWJlcixcclxuICAgICAgICBkOiBudW1iZXIsXHJcbiAgICAgICAgc2l6ZTogbnVtYmVyLFxyXG4gICAgICAgIGNvc3R1bWU6IHN0cmluZyxcclxuICAgICAgICBhbHBoYTogbnVtYmVyLFxyXG4gICAgICAgIHdpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgc3RhbXA6ICgpID0+IHZvaWQsXHJcbiAgICAgICAgbW92ZTogKGY6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIH07XHJcbiAgICBjbGFzcyBTcHJpdGUge1xyXG4gICAgICAgIHg6IG51bWJlcjtcclxuICAgICAgICB5OiBudW1iZXI7XHJcbiAgICAgICAgZDogbnVtYmVyO1xyXG4gICAgICAgIHNpemU6IG51bWJlcjtcclxuICAgICAgICBjb3N0dW1lOiBzdHJpbmc7XHJcbiAgICAgICAgYWxwaGE6IG51bWJlcjtcclxuICAgICAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgICAgIGFjdF86IHVuZGVmaW5lZCB8ICgoc2VsZjogU2VsZikgPT4gdm9pZCk7XHJcbiAgICAgICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIGQ6IG51bWJlciA9IDAsIHNpemU6IG51bWJlciA9IDEwMCwgY29zdHVtZTogc3RyaW5nID0gXCJcIiwgYWxwaGE6IG51bWJlcj0wLHdpZHRoOm51bWJlcj0xLCBhY3Q/OiAoc2VsZjogU2VsZikgPT4gdm9pZCkge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgICAgICB0aGlzLmQgPSBkO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgICAgICB0aGlzLmNvc3R1bWUgPSBjb3N0dW1lO1xyXG4gICAgICAgICAgICB0aGlzLmFscGhhID0gYWxwaGE7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5hY3RfID0gYWN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGFtcCgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWxwaGEhPTApIHtcclxuICAgICAgICAgICAgICAgIGNMaWIuc3RhbXAodGhpcy5jb3N0dW1lLCB0aGlzLngsIHRoaXMueSwgdGhpcy5kLCB0aGlzLnNpemUsdGhpcy5hbHBoYSxcImNlbnRlclwiLHRoaXMud2lkdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1vdmUoZmFyOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgdGhpcy54ICs9IHNpbjM2MCh0aGlzLmQpICogZmFyO1xyXG4gICAgICAgICAgICB0aGlzLnkgKz0gY29zMzYwKHRoaXMuZCkgKiBmYXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdCgpIHtcclxuICAgICAgICAgICAgKHRoaXMuYWN0XyB8fCAoKCkgPT4geyB9KSkodGhpcylcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3ByaXRlO1xyXG59IiwiaW1wb3J0IHsgY29uZmlnVCwgQ2FudmFzUHJvcHMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBzaW4zNjAsIGNvczM2MCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgUG9zaXRpb25MaWJHZW4gPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgY29uZmlnOiBjb25maWdULCBwcm9wczogQ2FudmFzUHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHJhd190b19zdGFnZSA9IChyeDogbnVtYmVyLCByeTogbnVtYmVyLCByZDogbnVtYmVyID0gMCk6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIsIGQ6IG51bWJlciB9ID0+IHtcclxuICAgICAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSAoKHJ4IC0gcmVjdC5sZWZ0KSAvIHByb3BzLnNpemUgKiAxMDAgLSBwcm9wcy54KSAqIGNvbmZpZy5zdGFnZV93aWR0aCAvIGNvbmZpZy5kaXNwbGF5X3dpZHRoO1xyXG4gICAgICAgIGNvbnN0IHkgPSAoY29uZmlnLmRpc3BsYXlfaGVpZ2h0IC0gKChyeSAtIHJlY3QudG9wKSAvIHByb3BzLnNpemUgKiAxMDAgLSBwcm9wcy55KSkgKiBjb25maWcuc3RhZ2VfaGVpZ2h0IC8gY29uZmlnLmRpc3BsYXlfaGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IGQgPSByZCArIHByb3BzLmQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeCwgeSwgZFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmF3X3RvX3N0YWdlXHJcbiAgICB9XHJcbn1cclxuY29uc3Qgc3RhbXAgPSAobmFtZTogc3RyaW5nLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyLCBkZDogbnVtYmVyID0gMCwgc2l6ZTogbnVtYmVyID0gMTAwLCBhYnNvbHV0ZSA9IGZhbHNlKSA9PiB7XHJcbiAgICBjb25zdCBbcHJvcHNfeCwgcHJvcHNfeSwgcHJvcHNfc2l6ZV0gPSBbMCwgMCwgMF1cclxuICAgIGNvbnN0IHggPSAoZHggKyBwcm9wc194KSAqIHByb3BzX3NpemUgLyAxMDA7XHJcbiAgICBjb25zdCB5ID0gKGR5ICsgcHJvcHNfeSkgKiBwcm9wc19zaXplIC8gMTAwO1xyXG4gICAgY29uc3QgW2Rpc3BsYXlfcXVhbGl0eSwgaGVpZ2h0XSA9IFswLCAwXTtcclxuICAgIGNvbnN0IFtwYWlyX3gsIHBhaXJfeV0gPSBbeCAqIGRpc3BsYXlfcXVhbGl0eSwgLXkgKiBkaXNwbGF5X3F1YWxpdHkgKyBoZWlnaHRdO1xyXG4gICAgY29uc3QgW3Jhd194LCByYXdfeV0gPSBbcGFpcl94IC8gZGlzcGxheV9xdWFsaXR5LCAtKHBhaXJfeSAtIGhlaWdodCkgLyBkaXNwbGF5X3F1YWxpdHldXHJcbn07IiwiaW1wb3J0IHsgY29uZmlnVCwgYUxpYlQgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBzaW4zNjAsIGNvczM2MCwgRGljdCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQXVkaW9MaWJHZW4gPSAoQXVkaW9zOiBEaWN0PHsgY3R4OiBBdWRpb0J1ZmZlciwgZGF0YTogSFRNTEF1ZGlvRWxlbWVudCwgdGltZTogbnVtYmVyIH0+KTogYUxpYlQgPT4ge1xyXG4gICAgY29uc3QgY3R4ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8ICh3aW5kb3cgYXMgYW55KS53ZWJraXRBdWRpb0NvbnRleHQpKCk7XHJcbiAgICBjb25zdCBwbGF5ID0gKG5hbWU6IHN0cmluZywgZGVsYXk6IG51bWJlciA9IDAsIGdhaW46bnVtYmVyPTEpID0+IHtcclxuICAgICAgICBpZiAoZGVsYXkgPD0gQXVkaW9zW25hbWVdLnRpbWUpIHtcclxuICAgICAgICAgICAgY29uc3QgZ2Fpbk5vZGUgPSBjdHguY3JlYXRlR2FpbigpO1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBjdHguY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5idWZmZXIgPSBBdWRpb3NbbmFtZV0uY3R4O1xyXG4gICAgICAgICAgICBnYWluTm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKGdhaW4sIGN0eC5jdXJyZW50VGltZSk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5jb25uZWN0KGdhaW5Ob2RlKVxyXG4gICAgICAgICAgICBnYWluTm9kZS5jb25uZWN0KGN0eC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgIHNvdXJjZS5zdGFydCgwKTtcclxuICAgICAgICAgICAgQXVkaW9zW25hbWVdLnRpbWUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHRpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBuIGluIEF1ZGlvcykge1xyXG4gICAgICAgICAgICBBdWRpb3Nbbl0udGltZSsrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7IHBsYXksIHRpY2sgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBEaWN0IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgQ29yZVQsIGNvbmZpZ1QsIGNMaWJULCBhTGliVCB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IGZyYW1lTGliR2VuIH0gZnJvbSBcIi4vZnJhbWVcIjtcclxuaW1wb3J0IHsgbG9hZEFzc2V0cyB9IGZyb20gXCIuL2xvYWRlclwiO1xyXG5pbXBvcnQgeyBDYW52YXNMaWJHZW4gfSBmcm9tIFwiLi9jYW52YXNcIjtcclxuaW1wb3J0IHsgU3ByaXRlTGliR2VuIH0gZnJvbSBcIi4vc3ByaXRlXCI7XHJcbmltcG9ydCB7IFBvc2l0aW9uTGliR2VuIH0gZnJvbSBcIi4vcG9zaXRpb25cIjtcclxuaW1wb3J0IHsgQXVkaW9MaWJHZW4gfSBmcm9tIFwiLi9hdWRpb3NcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBpbml0ID0gYXN5bmMgKGNvbmZpZzogY29uZmlnVCk6IFByb21pc2U8Q29yZVQ+ID0+IHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbmZpZy5jYW52YXNfbmFtZSkgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gY29uZmlnLnN0YWdlX2hlaWdodCAqIGNvbmZpZy5kaXNwbGF5X3F1YWxpdHk7XHJcbiAgICBjYW52YXMud2lkdGggPSBjb25maWcuc3RhZ2Vfd2lkdGggKiBjb25maWcuZGlzcGxheV9xdWFsaXR5O1xyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSE7XHJcbiAgICBjb25zdCBhdWRpb0NvbnRleHQgPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgKHdpbmRvdyBhcyBhbnkpLndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcclxuICAgIGNvbnN0IHsgSW1hZ2VzLCBBdWRpb3MsIEZvbnRzIH0gPSBhd2FpdCBsb2FkQXNzZXRzKGF1ZGlvQ29udGV4dCk7XHJcbiAgICBjb25zdCBpbnB1dEtleXMgPSB7XHJcbiAgICAgICAgdXA6IGZhbHNlLCBkb3duOiBmYWxzZSwgbGVmdDogZmFsc2UsIHJpZ2h0OiBmYWxzZSwgejogZmFsc2UsIHg6IGZhbHNlLCBjOiBmYWxzZSwgZDogZmFsc2UsXHJcbiAgICAgICAgZjoge1xyXG4gICAgICAgICAgICB1cDogZmFsc2UsIGRvd246IGZhbHNlLCBsZWZ0OiBmYWxzZSwgcmlnaHQ6IGZhbHNlLCB6OiBmYWxzZSwgeDogZmFsc2UsIGM6IGZhbHNlLCBkOiBmYWxzZSxcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaW5wdXRNb3VzZSA9IHtcclxuICAgICAgICB4OiAwLCB5OiAwLCBjbGlja2luZzogZmFsc2UsIGlzX2luX3JlY3QoZHg6IG51bWJlciwgZHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIsIHR5cGU6IHN0cmluZyA9IFwiY2VudGVyXCIpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2VudGVyXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGR4IC0gdyAvIDIgPCB0aGlzLnggJiYgdGhpcy54IDwgZHggKyB3IC8gMikgJiYgKGR5IC0gaCAvIDIgPCB0aGlzLnkgJiYgdGhpcy55IDwgZHkgKyBoIC8gMik7XHJcbiAgICAgICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInN0YXJ0XCI6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChkeCA8IHRoaXMueCAmJiB0aGlzLnggPCBkeCArIHcpICYmIChkeSA8IHRoaXMueSAmJiB0aGlzLnkgPCBkeSArIGgpO1xyXG4gICAgICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwcm9wcyA9IHtcclxuICAgICAgICBjYW52YXM6IHtcclxuICAgICAgICAgICAgc2l6ZTogMTAwLFxyXG4gICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICBkOiAwLFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgY29uc3QgY0xpYjogY0xpYlQgPSBDYW52YXNMaWJHZW4oY2FudmFzLCBjdHgsIEltYWdlcywgRm9udHMsIGNvbmZpZywgcHJvcHMuY2FudmFzKTtcclxuICAgIGNvbnN0IGFMaWI6IGFMaWJUID0gQXVkaW9MaWJHZW4oQXVkaW9zKTtcclxuICAgIGNvbnN0IFNwcml0ZSA9IFNwcml0ZUxpYkdlbihjTGliKTtcclxuXHJcbiAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XHJcbiAgICBjb25zdCBwTGliID0gUG9zaXRpb25MaWJHZW4oY2FudmFzLCBjb25maWcsIHByb3BzLmNhbnZhcyk7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMudXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRLZXlzLmYudXAgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6IHtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5kb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5mLmRvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6IHtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5sZWZ0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5mLmxlZnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMucmlnaHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRLZXlzLmYucmlnaHQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwielwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiWlwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMueiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMuZi56ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInhcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlhcIjoge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRLZXlzLnggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaW5wdXRLZXlzLmYueCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJDXCI6IHtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5jID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5mLmMgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiRFwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMuZi5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgZSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChlLmtleSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMudXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIkFycm93RG93blwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMuZG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6IHtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5sZWZ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6IHtcclxuICAgICAgICAgICAgICAgIGlucHV0S2V5cy5yaWdodCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwielwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiWlwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMueiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwieFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiWFwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMueCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY1wiOlxyXG4gICAgICAgICAgICBjYXNlIFwiQ1wiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMuYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiRFwiOiB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dEtleXMuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZSA9PiB7XHJcbiAgICAgICAgaW5wdXRNb3VzZS5jbGlja2luZyA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgcCA9IHBMaWIucmF3X3RvX3N0YWdlKGUueCwgZS55KTtcclxuICAgICAgICBpbnB1dE1vdXNlLnggPSBwLng7XHJcbiAgICAgICAgaW5wdXRNb3VzZS55ID0gcC55O1xyXG4gICAgfSk7XHJcbiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBlID0+IHtcclxuICAgICAgICBjb25zdCBwID0gcExpYi5yYXdfdG9fc3RhZ2UoZS54LCBlLnkpO1xyXG4gICAgICAgIGlucHV0TW91c2UueCA9IHAueDtcclxuICAgICAgICBpbnB1dE1vdXNlLnkgPSBwLnk7XHJcbiAgICB9KTtcclxuICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBlID0+IHtcclxuICAgICAgICBpbnB1dE1vdXNlLmNsaWNraW5nID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgcCA9IHBMaWIucmF3X3RvX3N0YWdlKGUueCwgZS55KTtcclxuICAgICAgICBpbnB1dE1vdXNlLnggPSBwLng7XHJcbiAgICAgICAgaW5wdXRNb3VzZS55ID0gcC55O1xyXG4gICAgfSk7XHJcbiAgICBsZXQgYl90aWNrOigpPT52b2lkO1xyXG4gICAgbGV0IGFfdGljazooKT0+dm9pZDtcclxuICAgIHtcclxuICAgICAgICBsZXQgYmsgPSB7XHJcbiAgICAgICAgICAgIHVwOiBmYWxzZSwgZG93bjogZmFsc2UsIGxlZnQ6IGZhbHNlLCByaWdodDogZmFsc2UsIHo6IGZhbHNlLCB4OiBmYWxzZSwgYzogZmFsc2UsIGQ6IGZhbHNlLFxyXG4gICAgICAgIH1cclxuICAgICAgICBiX3RpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIChbXCJ1cFwiLCBcImRvd25cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJ6XCIsIFwieFwiLCBcImNcIiwgXCJkXCJdIGFzIChcInVwXCIgfCBcImRvd25cIiB8IFwibGVmdFwiIHwgXCJyaWdodFwiIHwgXCJ6XCIgfCBcInhcIiB8IFwiY1wiIHwgXCJkXCIpW10pLmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmtbZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEtleXMuZltlXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBiayA9IHsgLi4uaW5wdXRLZXlzLmYgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhX3RpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGFMaWIudGljaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHsgZnJhbWVXaGlsZSwgZnJhbWVGb3IsIGZyYW1lTG9vcCB9ID0gZnJhbWVMaWJHZW4oYl90aWNrLGFfdGljayk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNhbnZhcyxcclxuICAgICAgICBjdHgsXHJcbiAgICAgICAgSW1hZ2VzLFxyXG4gICAgICAgIEF1ZGlvcyxcclxuICAgICAgICBGb250cyxcclxuICAgICAgICBpbnB1dEtleXMsXHJcbiAgICAgICAgaW5wdXRNb3VzZSxcclxuICAgICAgICBwcm9wcyxcclxuICAgICAgICBjTGliLFxyXG4gICAgICAgIGFMaWIsXHJcbiAgICAgICAgU3ByaXRlLFxyXG4gICAgICAgIGZvcjogZnJhbWVGb3IsXHJcbiAgICAgICAgd2hpbGU6IGZyYW1lV2hpbGUsXHJcbiAgICAgICAgbG9vcDogZnJhbWVMb29wLFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU3ByaXRlQ2xhc3NULCBTcHJpdGVULCBhTGliVCwgY0xpYlQgfSBmcm9tIFwiLi9saWIvdHlwZXNcIjtcclxuaW1wb3J0IHsgc2luMzYwLCBjb3MzNjAgfSBmcm9tIFwiLi9saWIvdXRpbHNcIjtcclxuaW1wb3J0IHsgRGljdCB9IGZyb20gXCIuL2xpYi91dGlsc1wiO1xyXG5cclxudHlwZSBNb3ZlID0gbnVtYmVyIHwge1xyXG4gICAgdHlwZTogXCJzaW5cIiB8IFwiY29zXCIsXHJcbiAgICBhbXA6IG51bWJlcixcclxuICAgIGN5Y2xlOiBudW1iZXIsXHJcbn0gfCB7XHJcbiAgICB0eXBlOiBcImN1c3RvbVwiLFxyXG4gICAgZm46IChhZ2U6IG51bWJlcikgPT4gbnVtYmVyXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgYm9uZUZuc0dlbiA9IChjTGliOiBjTGliVCwgYUxpYjogYUxpYlQsIFNwcml0ZTogU3ByaXRlQ2xhc3NULCBwbGF5ZXI6IHtcclxuICAgIGRhbWFnZShhcmcwOiBudW1iZXIpOiB2b2lkOyBzb3VsOiBTcHJpdGVULCBocDogbnVtYmVyXHJcbn0pID0+IHtcclxuICAgIGxldCBib25lRGljdDogRGljdDxhbnk+ID0ge31cclxuICAgIGNsYXNzIG5vcm1hbEJvbmUgZXh0ZW5kcyBTcHJpdGUge1xyXG4gICAgICAgIHByaXZhdGUgc3RhcnRfeDogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgc3RhcnRfeTogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgc3RhcnRfZDogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgbW92ZV94OiBNb3ZlO1xyXG4gICAgICAgIHByaXZhdGUgbW92ZV95OiBNb3ZlO1xyXG4gICAgICAgIHByaXZhdGUgbW92ZV9kOiBNb3ZlO1xyXG4gICAgICAgIHByaXZhdGUgc3RhcnRfbGVuOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBtb3ZlX2xlbjogTW92ZTtcclxuICAgICAgICBwcml2YXRlIGxlbjogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgYWdlOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBpZDogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgYl93aWR0aDogbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCBkOiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGxlbjogbnVtYmVyLCBteDogTW92ZSwgbXk6IE1vdmUsIG1kOiBNb3ZlLCBtbDogTW92ZSwgbGlmZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKHgsIHksIGQsIHdpZHRoLCB1bmRlZmluZWQsIDEsMSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfeCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfeSA9IHk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfZCA9IGQ7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZV94ID0gbXg7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZV95ID0gbXk7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZV9kID0gbWQ7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRfbGVuID0gbGVuO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVfbGVuID0gbWw7XHJcbiAgICAgICAgICAgIHRoaXMubGVuID0gbGVuO1xyXG4gICAgICAgICAgICB0aGlzLmFnZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaWQgPSBub3JtYWxCb25lLmN1cnJlbnRfaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuYl93aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICBib25lRGljdFt0aGlzLmlkXSA9IHRoaXM7XHJcbiAgICAgICAgICAgIG5vcm1hbEJvbmUuY3VycmVudF9pZCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIG1vdmVfc2VsZigpIHtcclxuICAgICAgICAgICAgdGhpcy5hZ2UrKztcclxuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy5zdGFydF94ICsgbm9ybWFsQm9uZS5nZXRfbW92ZSh0aGlzLm1vdmVfeCwgdGhpcy5hZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnN0YXJ0X3kgKyBub3JtYWxCb25lLmdldF9tb3ZlKHRoaXMubW92ZV95LCB0aGlzLmFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZCA9IHRoaXMuc3RhcnRfZCArIG5vcm1hbEJvbmUuZ2V0X21vdmUodGhpcy5tb3ZlX2QsIHRoaXMuYWdlKTtcclxuICAgICAgICAgICAgdGhpcy5sZW4gPSB0aGlzLnN0YXJ0X2xlbiArIG5vcm1hbEJvbmUuZ2V0X21vdmUodGhpcy5tb3ZlX2xlbiwgdGhpcy5hZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGRyYXcoKSB7XHJcbiAgICAgICAgICAgIGNvczM2MCh0aGlzLmQpXHJcbiAgICAgICAgICAgIGNMaWIuc3RhbXAoXCJib25lX2hlYWRfd2hpdGVcIixcclxuICAgICAgICAgICAgICAgIHRoaXMueCArIGNvczM2MCh0aGlzLmQpICogdGhpcy5iX3dpZHRoICogOCAvIDYsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgLSBzaW4zNjAodGhpcy5kKSAqIHRoaXMuYl93aWR0aCAqIDggLyA2LFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kICsgMTgwLCB0aGlzLmJfd2lkdGggKiAxMDAgLyA2LCAxLCBcInN0YXJ0XCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY0xpYi5kcmF3UmVjdChcclxuICAgICAgICAgICAgICAgIHRoaXMueCArIHNpbjM2MCh0aGlzLmQpICogdGhpcy5iX3dpZHRoICogNiAvIDYsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgKyBjb3MzNjAodGhpcy5kKSAqIHRoaXMuYl93aWR0aCAqIDYgLyA2LFxyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5iX3dpZHRoLCB0aGlzLmxlbiArIHRoaXMuYl93aWR0aCAqIDIgLyA2LCBcIndoaXRlXCIsIHRoaXMuZCwgMSxcInN0YXJ0XCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY0xpYi5zdGFtcChcImJvbmVfaGVhZF93aGl0ZVwiLFxyXG4gICAgICAgICAgICAgICAgdGhpcy54ICsgc2luMzYwKHRoaXMuZCkgKiAodGhpcy5sZW4gKyB0aGlzLmJfd2lkdGggKiAxNCAvIDYpIC0gY29zMzYwKHRoaXMuZCkgKiB0aGlzLmJfd2lkdGggKiAyIC8gNixcclxuICAgICAgICAgICAgICAgIHRoaXMueSArIGNvczM2MCh0aGlzLmQpICogKHRoaXMubGVuICsgdGhpcy5iX3dpZHRoICogMTQgLyA2KSArIHNpbjM2MCh0aGlzLmQpICogdGhpcy5iX3dpZHRoICogMiAvIDYsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmQsIHRoaXMuYl93aWR0aCAqIDEwMCAvIDYsIDEsIFwic3RhcnRcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGp1ZGdlKCkge1xyXG4gICAgICAgICAgICAvL2NMaWIuZHJhd1JlY3QoXHJcbiAgICAgICAgICAgIC8vICAgIHRoaXMueCxcclxuICAgICAgICAgICAgLy8gICAgdGhpcy55LFxyXG4gICAgICAgICAgICAvLyAgICB0aGlzLndpZHRoLCB0aGlzLmxlbiArIHRoaXMud2lkdGggKiAxNCAvIDYsIFwicmVkXCIsIHRoaXMuZCwgXCJzdGFydFwiXHJcbiAgICAgICAgICAgIC8vKTtcclxuICAgICAgICAgICAgLy9jTGliLmRyYXdSZWN0KFxyXG4gICAgICAgICAgICAvLyAgICB0aGlzLnggKyBzaW4zNjAodGhpcy5kKSAqICh0aGlzLmxlbiAvIDIgKyB0aGlzLndpZHRoICogNyAvIDYpICsgY29zMzYwKHRoaXMuZCkgKiB0aGlzLndpZHRoICogMyAvIDYsXHJcbiAgICAgICAgICAgIC8vICAgIHRoaXMueSArIGNvczM2MCh0aGlzLmQpICogKHRoaXMubGVuIC8gMiArIHRoaXMud2lkdGggKiA3IC8gNikgLSBzaW4zNjAodGhpcy5kKSAqIHRoaXMud2lkdGggKiAzIC8gNixcclxuICAgICAgICAgICAgLy8gICAgdGhpcy53aWR0aCwgdGhpcy5sZW4gKyB0aGlzLndpZHRoICogMTQgLyA2LCBcImJsdWVcIiwgdGhpcy5kLCBcImNlbnRlcisrXCJcclxuICAgICAgICAgICAgLy8pO1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZV94ID0gcGxheWVyLnNvdWwueCAtIHRoaXMueDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlX3kgPSBwbGF5ZXIuc291bC55IC0gdGhpcy55O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHVybmVkX3ggPSByZWxhdGl2ZV94ICogY29zMzYwKHRoaXMuZCkgKyByZWxhdGl2ZV95ICogLXNpbjM2MCh0aGlzLmQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHVybmVkX3kgPSByZWxhdGl2ZV95ICogY29zMzYwKHRoaXMuZCkgKyByZWxhdGl2ZV94ICogc2luMzYwKHRoaXMuZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZW4gKyB0aGlzLmJfd2lkdGggKiAxNCAvIDYgPiB0dXJuZWRfeSAmJiB0dXJuZWRfeSA+IDAgJiYgdGhpcy5iX3dpZHRoID4gdHVybmVkX3ggJiYgdHVybmVkX3ggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyLmRhbWFnZSgxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBwcm9jZXNzKCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGJvbmVEaWN0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBib25lID0gYm9uZURpY3RbaWRdO1xyXG4gICAgICAgICAgICAgICAgYm9uZS5tb3ZlX3NlbGYoKTtcclxuICAgICAgICAgICAgICAgIGJvbmUuZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgYm9uZS5qdWRnZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGN1cnJlbnRfaWQgPSAwO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIGdldF9tb3ZlKG1vdmU6IE1vdmUsIGFnZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtb3ZlID09IFwibnVtYmVyXCIpIHJldHVybiBtb3ZlICogYWdlO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG1vdmUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInNpblwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNvc1wiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpbjM2MChtb3ZlLmN5Y2xlICogYWdlKSAqIG1vdmUuYW1wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBcImN1c3RvbVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vdmUuZm4oYWdlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNvbnN0IHByb2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgbm9ybWFsQm9uZS5wcm9jZXNzKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBib25lRGljdDogYm9uZURpY3QgYXMgRGljdDxub3JtYWxCb25lPixcclxuICAgICAgICBub3JtYWw6IG5vcm1hbEJvbmUsXHJcbiAgICAgICAgcHJvY2Vzc1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IGZvbnREYXRhRW4gZnJvbSBcIi4vZGF0YS9mb250X2VuLmpzb25cIjtcclxuaW1wb3J0IGZvbnREYXRhU3RhdHVzIGZyb20gXCIuL2RhdGEvZm9udF9zdGF0dXMuanNvblwiO1xyXG5cclxuaW1wb3J0IHsgY0xpYlQsIGlucHV0S2V5c1QgfSBmcm9tIFwiLi9saWIvdHlwZXNcIjtcclxuXHJcblxyXG50eXBlIGNoYXJEYXRhVCA9IHtcclxuICAgIGxlZnQ6IG51bWJlcixcclxuICAgIHVwOiBudW1iZXIsXHJcbiAgICB3aWR0aDogbnVtYmVyLFxyXG4gICAgaGVpZ2h0OiBudW1iZXIsXHJcbiAgICBnYXA6IG51bWJlcixcclxufVxyXG5cclxudHlwZSBGb250RGF0YVQgPSB0eXBlb2YgZm9udERhdGFFbjtcclxuXHJcbmV4cG9ydCBjb25zdCBmb250Rm5zR2VuID0gKGNMaWI6IGNMaWJULCBpbnB1dEtleXM6IGlucHV0S2V5c1QpID0+IHtcclxuICAgIGNvbnN0IGZvbnREYXRhID0ge1xyXG4gICAgICAgIGVuOiBmb250RGF0YUVuLFxyXG4gICAgICAgIHN0YXR1czogZm9udERhdGFTdGF0dXNcclxuICAgIH07XHJcbiAgICBsZXQgZGlzcGxheURpY3Q6IHsgW2tleXM6IHN0cmluZ106IGFueSB9ID0ge31cclxuICAgIGNsYXNzIEZvbnQge1xyXG4gICAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykgeyB0aGlzLm5hbWUgPSBuYW1lIH1cclxuICAgICAgICBkZWxldGUoKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBkaXNwbGF5RGljdFt0aGlzLm5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBTdXBlciBleHRlbmRzIEZvbnQge1xyXG4gICAgICAgIF86IHtcclxuICAgICAgICAgICAgYWxsX3N0cjogc3RyaW5nLFxyXG4gICAgICAgICAgICBub3c6IHsgc3RyOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcsIHNwYWNpbmdfeDogbnVtYmVyLCBzcGFjaW5nX3k6IG51bWJlciB9W10sXHJcbiAgICAgICAgICAgIGxlbl9hbGxvdzogbnVtYmVyLFxyXG4gICAgICAgICAgICBjb3VudDogbnVtYmVyLFxyXG4gICAgICAgICAgICBjdXJyZW50X2NoYXI6IG51bWJlcixcclxuICAgICAgICAgICAgY3VycmVudF9jaGFyX3RydWU6IG51bWJlcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHg6IG51bWJlcjtcclxuICAgICAgICB5OiBudW1iZXI7XHJcbiAgICAgICAgZGlyZWN0aW9uOiBudW1iZXI7XHJcbiAgICAgICAgc2l6ZTogbnVtYmVyO1xyXG4gICAgICAgIGRhdGE6IHsgc3RyOiBzdHJpbmcsIHNwZWVkOiBudW1iZXIsIGNvbG9yOiBzdHJpbmcsIHNwYWNpbmdfeDogbnVtYmVyLCBzcGFjaW5nX3k6IG51bWJlciB9W11cclxuICAgICAgICBmb250OiBGb250RGF0YVRcclxuICAgICAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkOiBudW1iZXIsIHNpemU6IG51bWJlciwgZm9udDogc3RyaW5nLCBpbnB1dDogeyBzdHI6IHN0cmluZywgc3BlZWQ6IG51bWJlciwgY29sb3I6IHN0cmluZywgc3BhY2luZ194OiBudW1iZXIsIHNwYWNpbmdfeTogbnVtYmVyIH1bXSkge1xyXG4gICAgICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5fID0ge1xyXG4gICAgICAgICAgICAgICAgYWxsX3N0cjogaW5wdXQucmVkdWNlKChhLCBjKSA9PiBhICsgYy5zdHIsIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgbm93OiBbeyBzdHI6IFwiXCIsIGNvbG9yOiBpbnB1dFswXS5jb2xvciwgc3BhY2luZ194OiBpbnB1dFswXS5zcGFjaW5nX3gsIHNwYWNpbmdfeTogaW5wdXRbMF0uc3BhY2luZ195IH1dLFxyXG4gICAgICAgICAgICAgICAgbGVuX2FsbG93OiAwLFxyXG4gICAgICAgICAgICAgICAgY291bnQ6IDAsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50X2NoYXI6IDAsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50X2NoYXJfdHJ1ZTogMCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGlucHV0O1xyXG4gICAgICAgICAgICB0aGlzLmZvbnQgPSAoKGYpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdGF0dXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvbnREYXRhLnN0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9udERhdGEuZW47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKGZvbnQpXHJcbiAgICAgICAgICAgIGRpc3BsYXlEaWN0W25hbWVdID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdyaXRlKCkge1xyXG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5zaXplO1xyXG4gICAgICAgICAgICBjb25zdCBkID0gdGhpcy5kaXJlY3Rpb24gKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dF9zdHJfbGVuZ3RoID0gdGhpcy5fLm5vdy5yZWR1Y2UoKGEsIGMpID0+IGEgKyBjLnN0ci5sZW5ndGgsIDApO1xyXG4gICAgICAgICAgICBsZXQgeCA9IDA7XHJcbiAgICAgICAgICAgIGxldCB5ID0gMDtcclxuICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICAgICAgY29uc3QgY2hhckRhdGFmID0gKChjOiBzdHJpbmcpOiBjaGFyRGF0YVQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGMgaW4gdGhpcy5mb250KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9udFtjIGFzIGtleW9mIEZvbnREYXRhVF0gYXMgdW5rbm93biBhcyBjaGFyRGF0YVQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvbnQuc3BhY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuXy5ub3cuZm9yRWFjaCgoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGUuc3RyLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgcy5mb3JFYWNoKChjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhckRhdGEgPSBjaGFyRGF0YWYoYylcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PSBcIlxcblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ICs9IHRoaXMuZm9udC5wcm9wcy5oZWlnaHRfYmFzaWMgKyBlLnNwYWNpbmdfeTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjTGliLnN0YW1wKHRoaXMuZm9udC5wcm9wcy5uYW1lICsgXCJfXCIgKyBlLmNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54ICsgKE1hdGguY29zKGQpICogeCAtIE1hdGguc2luKGQpICogKHkgKyBjaGFyRGF0YS5nYXAgLyAyKSkgKiBzaXplIC8gMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ICsgKE1hdGguc2luKGQpICogeCArIE1hdGguY29zKGQpICogKHkgKyBjaGFyRGF0YS5nYXAgLyAyKSkgKiBzaXplIC8gMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24sIHNpemUsIDEsIFwic3RhcnRcIiwxLCB7IGxlZnQ6IGNoYXJEYXRhLmxlZnQsIHRvcDogY2hhckRhdGEudXAsIHdpZHRoOiBjaGFyRGF0YS53aWR0aCwgaGVpZ2h0OiBjaGFyRGF0YS5oZWlnaHQgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgKyAxIDwgaW5wdXRfc3RyX2xlbmd0aCkgeCArPSBjaGFyRGF0YS53aWR0aCArIHRoaXMuZm9udC5wcm9wcy53aWR0aF9iYXNpYyArIGUuc3BhY2luZ194O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb3VudCsrXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBwcm9jZXNzKCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbnB1dF9zdHJfbGVuZ3RoID0gdGhpcy5kYXRhLnJlZHVjZSgoYSwgYykgPT4gYSArIGMuc3RyLmxlbmd0aCwgMCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl8ubGVuX2FsbG93ID09IGlucHV0X3N0cl9sZW5ndGggJiYgaW5wdXRLZXlzLnopIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkaXNwbGF5RGljdFt0aGlzLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0S2V5cy54KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8ubGVuX2FsbG93ID0gaW5wdXRfc3RyX2xlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5jdXJyZW50X2NoYXIgPSBpbnB1dF9zdHJfbGVuZ3RoO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuXy5sZW5fYWxsb3cgPCBpbnB1dF9zdHJfbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8ubGVuX2FsbG93ICs9IDEgLyB0aGlzLmRhdGFbdGhpcy5fLmNvdW50XS5zcGVlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5jdXJyZW50X2NoYXIgKz0gMSAvIHRoaXMuZGF0YVt0aGlzLl8uY291bnRdLnNwZWVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLl8uY3VycmVudF9jaGFyX3RydWUgPCBNYXRoLm1pbih0aGlzLl8ubGVuX2FsbG93LCBpbnB1dF9zdHJfbGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLm5vd1t0aGlzLl8uY291bnRdLnN0ciArPSB0aGlzLmRhdGFbdGhpcy5fLmNvdW50XS5zdHJbdGhpcy5fLm5vd1t0aGlzLl8uY291bnRdLnN0ci5sZW5ndGhdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmN1cnJlbnRfY2hhcl90cnVlKytcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmRhdGFbdGhpcy5fLmNvdW50XS5zdHIubGVuZ3RoIDw9IHRoaXMuXy5ub3dbdGhpcy5fLmNvdW50XS5zdHIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuXy5jb3VudCArIDEgPCB0aGlzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy5jb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8ubm93LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICgodGhpcy5kYXRhW3RoaXMuXy5jb3VudF0uY29sb3IgPT09IHVuZGVmaW5lZCkgPyBcIndoaXRlXCIgOiB0aGlzLmRhdGFbdGhpcy5fLmNvdW50XS5jb2xvciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjaW5nX3g6IHRoaXMuZGF0YVt0aGlzLl8uY291bnRdLnNwYWNpbmdfeCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNpbmdfeTogdGhpcy5kYXRhW3RoaXMuXy5jb3VudF0uc3BhY2luZ195XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy5jdXJyZW50X2NoYXIgLT0gdGhpcy5kYXRhW3RoaXMuXy5jb3VudF0uc3RyLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNsYXNzIFBsYW5lIGV4dGVuZHMgRm9udCB7XHJcbiAgICAgICAgc3RyX25vdzogc3RyaW5nO1xyXG4gICAgICAgIGxlbl9ub3c6IG51bWJlcjtcclxuICAgICAgICBzdHI6IHN0cmluZztcclxuICAgICAgICB4OiBudW1iZXI7XHJcbiAgICAgICAgeTogbnVtYmVyO1xyXG4gICAgICAgIGRpcmVjdGlvbjogbnVtYmVyO1xyXG4gICAgICAgIHNpemU6IG51bWJlcjtcclxuICAgICAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgICAgIHNwYWNpbmdfeDogbnVtYmVyO1xyXG4gICAgICAgIHNwYWNpbmdfeTogbnVtYmVyO1xyXG4gICAgICAgIHNwZWVkOiBudW1iZXI7XHJcbiAgICAgICAgZm9udDogRm9udERhdGFUO1xyXG4gICAgICAgIGxlbl9hbGxvdzogbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc3RyOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkOiBudW1iZXIsIHNpemU6IG51bWJlciwgY29sb3I6IHN0cmluZywgc3BhY2luZ194OiBudW1iZXIsIHNwYWNpbmdfeTogbnVtYmVyLCBzcGVlZDogbnVtYmVyLCBmb250OiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgc3VwZXIobmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyX25vdyA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMubGVuX25vdyA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyID0gc3RyXHJcbiAgICAgICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZDtcclxuICAgICAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgICAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gICAgICAgICAgICB0aGlzLnNwYWNpbmdfeCA9IHNwYWNpbmdfeDtcclxuICAgICAgICAgICAgdGhpcy5zcGFjaW5nX3kgPSBzcGFjaW5nX3k7XHJcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcclxuICAgICAgICAgICAgdGhpcy5mb250ID0gKChmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGYpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic3RhdHVzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb250RGF0YS5zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvbnREYXRhLmVuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KShmb250KVxyXG4gICAgICAgICAgICB0aGlzLmxlbl9hbGxvdyA9IDA7XHJcbiAgICAgICAgICAgIGRpc3BsYXlEaWN0W25hbWVdID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdyaXRlKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGFycyA9IHRoaXMuc3RyX25vdztcclxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc2l6ZTtcclxuICAgICAgICAgICAgY29uc3QgZCA9IHRoaXMuZGlyZWN0aW9uICogTWF0aC5QSSAvIDE4MDtcclxuICAgICAgICAgICAgbGV0IHgsIHk7XHJcbiAgICAgICAgICAgIFt4LCB5XSA9IFswLCAwXTtcclxuICAgICAgICAgICAgY29uc3QgY2hhckRhdGFmID0gKChjOiBzdHJpbmcpOiBjaGFyRGF0YVQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGMgaW4gdGhpcy5mb250KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9udFtjIGFzIGtleW9mIEZvbnREYXRhVF0gYXMgdW5rbm93biBhcyBjaGFyRGF0YVQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZvbnQuc3BhY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJEYXRhOiBjaGFyRGF0YVQgPSBjaGFyRGF0YWYoY2hhcnNbaV0gYXMga2V5b2YgRm9udERhdGFUKVxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXJzW2ldID09IFwiXFxuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB5ICs9IHRoaXMuZm9udC5wcm9wcy5oZWlnaHRfYmFzaWMgKyB0aGlzLnNwYWNpbmdfeTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY0xpYi5zdGFtcCh0aGlzLmZvbnQucHJvcHMubmFtZSArIFwiX1wiICsgKCF0aGlzLmNvbG9yID8gXCJ3aGl0ZVwiIDogdGhpcy5jb2xvciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueCArIChNYXRoLmNvcyhkKSAqIHggLSBNYXRoLnNpbihkKSAqICh5IC0gY2hhckRhdGEuZ2FwKSkgKiBzaXplIC8gMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnkgKyAoTWF0aC5zaW4oZCkgKiB4ICsgTWF0aC5jb3MoZCkgKiAoeSAtIGNoYXJEYXRhLmdhcCkpICogc2l6ZSAvIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24sIHNpemUsIDEsIFwic3RhcnRcIiwxLCB7IGxlZnQ6IGNoYXJEYXRhLmxlZnQsIHRvcDogY2hhckRhdGEudXAsIHdpZHRoOiBjaGFyRGF0YS53aWR0aCwgaGVpZ2h0OiBjaGFyRGF0YS5oZWlnaHQgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgKyAxIDwgY2hhcnMubGVuZ3RoKSB4ICs9IGNoYXJEYXRhLndpZHRoICsgdGhpcy5mb250LnByb3BzLndpZHRoX2Jhc2ljICsgdGhpcy5zcGFjaW5nX3g7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHByb2Nlc3MoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbl9hbGxvdyA9PSB0aGlzLnN0ci5sZW5ndGggJiYgaW5wdXRLZXlzLnopIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkaXNwbGF5RGljdFt0aGlzLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0S2V5cy54KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlbl9hbGxvdyA9IHRoaXMuc3RyLmxlbmd0aFxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGVuX2FsbG93IDwgdGhpcy5zdHIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlbl9hbGxvdyArPSAxIC8gdGhpcy5zcGVlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSAodGhpcy5zdHJfbm93Lmxlbmd0aCA8IE1hdGgubWluKHRoaXMubGVuX2FsbG93LCB0aGlzLnN0ci5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cl9ub3cgKz0gdGhpcy5zdHJbdGhpcy5zdHJfbm93Lmxlbmd0aF07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBwcm9jZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBkaXNwbGF5RGljdCkge1xyXG4gICAgICAgICAgICBkaXNwbGF5RGljdFtuYW1lXS5wcm9jZXNzKClcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIC8qXHJcbiAgICAgKlRlbXBsYXRlXHJcbiAgICAgKm5ldyBGb250U3VwZXIoXCJuYW1lXCIsIDY0LCAxMjgsIDAsIDQwMCwgXCJkZXRlcm1pbmF0aW9uXCIsIFtcclxuICAgICAqICAgIHsgc3RyOiBcInRleHRcIiwgY29sb3I6IFwid2hpdGVcIiwgc3BhY2luZ194OiAwLCBzcGFjaW5nX3k6IDAsIHNwZWVkOiAyIH0sXHJcbiAgICAgKl0pXHJcbiAgICAgKi9cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgU3VwZXIsXHJcbiAgICAgICAgUGxhbmUsXHJcbiAgICAgICAgcHJvY2VzcyxcclxuICAgICAgICBkaWN0OiBkaXNwbGF5RGljdCBhcyAoUGxhbmUgfCBTdXBlcilbXSxcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgdG1wID0gY2xhc3MgUGxhbmUge1xyXG4gICAgc3RyX25vdzogc3RyaW5nO1xyXG4gICAgbGVuX25vdzogbnVtYmVyO1xyXG4gICAgc3RyOiBzdHJpbmc7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICBkaXJlY3Rpb246IG51bWJlcjtcclxuICAgIHNpemU6IG51bWJlcjtcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICBzcGFjaW5nX3g6IG51bWJlcjtcclxuICAgIHNwYWNpbmdfeTogbnVtYmVyO1xyXG4gICAgc3BlZWQ6IG51bWJlcjtcclxuICAgIGZvbnQ6IEZvbnREYXRhVDtcclxuICAgIGxlbl9hbGxvdzogbnVtYmVyO1xyXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBzdHI6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIsIGQ6IG51bWJlciwgc2l6ZTogbnVtYmVyLCBjb2xvcjogc3RyaW5nLCBzcGFjaW5nX3g6IG51bWJlciwgc3BhY2luZ195OiBudW1iZXIsIHNwZWVkOiBudW1iZXIsIGZvbnQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc3RyX25vdyA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5sZW5fbm93ID0gMDtcclxuICAgICAgICB0aGlzLnN0ciA9IHN0clxyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGQ7XHJcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgdGhpcy5zcGFjaW5nX3ggPSBzcGFjaW5nX3g7XHJcbiAgICAgICAgdGhpcy5zcGFjaW5nX3kgPSBzcGFjaW5nX3k7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IHNwZWVkO1xyXG4gICAgICAgIHRoaXMuZm9udCA9IHVuZGVmaW5lZCBhcyB1bmtub3duIGFzIEZvbnREYXRhVDtcclxuICAgICAgICB0aGlzLmxlbl9hbGxvdyA9IDA7XHJcbiAgICB9XHJcbiAgICB3cml0ZSgpIHt9O1xyXG4gICAgcHJvY2VzcygpIHt9O1xyXG4gICAgZGVsZXRlKCkge307XHJcbn1cclxuZXhwb3J0IHR5cGUgUGxhbmUgPSB0eXBlb2YgdG1wOyIsImltcG9ydCB7IFNwcml0ZVQsIGNMaWJUIH0gZnJvbSBcIi4vbGliL3R5cGVzXCI7XHJcbmltcG9ydCB7IGNvczM2MCwgc2luMzYwIH0gZnJvbSBcIi4vbGliL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQm94Rm5zR2VuID0gKGNMaWI6IGNMaWJULCBzb3VsOiBTcHJpdGVUKSA9PiB7XHJcbiAgICBjbGFzcyBXYWxsIHtcclxuICAgICAgICBkeDogbnVtYmVyO1xyXG4gICAgICAgIGR5OiBudW1iZXI7XHJcbiAgICAgICAgZGQ6IG51bWJlcjtcclxuICAgICAgICBsZW46IG51bWJlcjtcclxuICAgICAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgICAgIGFsaWduOiBcImNlbnRlclwiIHwgXCJzdGFydFwiO1xyXG4gICAgICAgIHJlbGF0aXZlOiBcIm1pbnVzXCIgfCBcInVua25vd25cIiB8IFwicGx1c1wiXHJcbiAgICAgICAgc291bF9zaXplOiBudW1iZXI7XHJcbiAgICAgICAgY29uc3RydWN0b3IoZHg6IG51bWJlciwgZHk6IG51bWJlciwgZGQ6IG51bWJlciwgbGVuOiBudW1iZXIsIGFsaWduOiBcImNlbnRlclwiIHwgXCJzdGFydFwiLCByZWxhdGl2ZT86IFwibWludXNcIiB8IFwicGx1c1wiLCB3aWR0aDogbnVtYmVyID0gNCkge1xyXG4gICAgICAgICAgICB0aGlzLmR4ID0gZHg7XHJcbiAgICAgICAgICAgIHRoaXMuZHkgPSBkeTtcclxuICAgICAgICAgICAgdGhpcy5kZCA9IGRkO1xyXG4gICAgICAgICAgICB0aGlzLmxlbiA9IGxlbjtcclxuICAgICAgICAgICAgdGhpcy5hbGlnbiA9IGFsaWduO1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuc291bF9zaXplID0gNjtcclxuICAgICAgICAgICAgdGhpcy5yZWxhdGl2ZSA9IHJlbGF0aXZlID8gcmVsYXRpdmUgOiAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IHRoaXMuZGRcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlX3ggPSBzb3VsLnggLSB0aGlzLmR4O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVfeSA9IHNvdWwueSAtIHRoaXMuZHk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0dXJuZWRfeSA9IHJlbGF0aXZlX3kgKiBjb3MzNjAoZCkgKyByZWxhdGl2ZV94ICogc2luMzYwKGQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR1cm5lZF95ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInBsdXNcIlxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJtaW51c1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pKClcclxuICAgICAgICB9XHJcbiAgICAgICAganVkZ2UoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSB0aGlzLmRkXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlX3ggPSBzb3VsLnggLSB0aGlzLmR4O1xyXG4gICAgICAgICAgICBjb25zdCByZWxhdGl2ZV95ID0gc291bC55IC0gdGhpcy5keTtcclxuICAgICAgICAgICAgY29uc3QgdHVybmVkX3ggPSByZWxhdGl2ZV94ICogY29zMzYwKGQpICsgcmVsYXRpdmVfeSAqIC1zaW4zNjAoZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR1cm5lZF95ID0gcmVsYXRpdmVfeSAqIGNvczM2MChkKSArIHJlbGF0aXZlX3ggKiBzaW4zNjAoZCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbiAvIDIgPiB0dXJuZWRfeCAmJiB0dXJuZWRfeCA+IC10aGlzLmxlbiAvIDIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbGF0aXZlID09IFwibWludXNcIiAmJiB0dXJuZWRfeSA+IC0odGhpcy53aWR0aCAvIDIgKyB0aGlzLnNvdWxfc2l6ZSkgfHwgdGhpcy5yZWxhdGl2ZSA9PSBcInBsdXNcIiAmJiAodGhpcy53aWR0aCAvIDIgKyB0aGlzLnNvdWxfc2l6ZSkgPiB0dXJuZWRfeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldHVybmVkX3ggPSB0dXJuZWRfeCAqIGNvczM2MCgtZCkgKyAoKHRoaXMud2lkdGggLyAyICsgdGhpcy5zb3VsX3NpemUpICogKHRoaXMucmVsYXRpdmUgPT0gXCJtaW51c1wiID8gMSA6IC0xKSkgKiBzaW4zNjAoLWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJldHVybmVkX3kgPSAoKHRoaXMud2lkdGggLyAyICsgdGhpcy5zb3VsX3NpemUpICogKHRoaXMucmVsYXRpdmUgPT0gXCJtaW51c1wiID8gMSA6IC0xKSkgKiAtY29zMzYwKC1kKSArIHR1cm5lZF94ICogc2luMzYwKC1kKVxyXG4gICAgICAgICAgICAgICAgICAgIHNvdWwueCA9IHJldHVybmVkX3ggKyB0aGlzLmR4O1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdWwueSA9IHJldHVybmVkX3kgKyB0aGlzLmR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR1cm5lZF95ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsYXRpdmUgPSBcInBsdXNcIlxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0aXZlID0gXCJtaW51c1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZHJhdygpIHtcclxuICAgICAgICAgICAgY0xpYi5kcmF3UmVjdCh0aGlzLmR4LCB0aGlzLmR5LCB0aGlzLmxlbiwgdGhpcy53aWR0aCwgXCJ3aGl0ZVwiLCB0aGlzLmRkLDEsIFwiY2VudGVyKytcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xhc3MgV2FsbDIge1xyXG4gICAgICAgIGR4OiBudW1iZXI7XHJcbiAgICAgICAgZHk6IG51bWJlcjtcclxuICAgICAgICBkZDogbnVtYmVyO1xyXG4gICAgICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgY29uc3RydWN0b3IoZHg6IG51bWJlciwgZHk6IG51bWJlciwgZGQ6IG51bWJlciwgd2lkdGg6IG51bWJlciA9IDQpIHtcclxuICAgICAgICAgICAgdGhpcy5keCA9IGR4O1xyXG4gICAgICAgICAgICB0aGlzLmR5ID0gZHk7XHJcbiAgICAgICAgICAgIHRoaXMuZGQgPSBkZDtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBqdWRnZSgpIHtcclxuICAgICAgICAgICAgY29uc3QgZCA9IHRoaXMuZGRcclxuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVfeCA9IHNvdWwueCAtIHRoaXMuZHg7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aXZlX3kgPSBzb3VsLnkgLSB0aGlzLmR5O1xyXG4gICAgICAgICAgICBjb25zdCB0dXJuZWRfeCA9IHJlbGF0aXZlX3ggKiBjb3MzNjAoZCkgKyByZWxhdGl2ZV95ICogLXNpbjM2MChkKTtcclxuICAgICAgICAgICAgY29uc3QgdHVybmVkX3kgPSByZWxhdGl2ZV95ICogY29zMzYwKGQpICsgcmVsYXRpdmVfeCAqIHNpbjM2MChkKTtcclxuICAgICAgICAgICAgaWYgKHR1cm5lZF95ID4gLXRoaXMud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJldHVybmVkX3ggPSB0dXJuZWRfeCAqIGNvczM2MCgtZCkgKyB0aGlzLndpZHRoICogc2luMzYwKC1kKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJldHVybmVkX3kgPSB0aGlzLndpZHRoICogLWNvczM2MCgtZCkgKyB0dXJuZWRfeCAqIHNpbjM2MCgtZClcclxuICAgICAgICAgICAgICAgIHNvdWwueCA9IHJldHVybmVkX3ggKyB0aGlzLmR4O1xyXG4gICAgICAgICAgICAgICAgc291bC55ID0gcmV0dXJuZWRfeSArIHRoaXMuZHk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyYXcoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSB0aGlzLmR4ICsgMzIwICogc2luMzYwKHRoaXMuZGQpXHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLmR5ICsgMzIwICogY29zMzYwKHRoaXMuZGQpXHJcbiAgICAgICAgICAgIGNMaWIuZHJhd1JlY3QoeCwgeSwgNjQwLCA2NDAsIFwiI2ZmZmZmZjg4XCIsIHRoaXMuZGQsIDEsXCJjZW50ZXIrK1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBib3ggPSB7XHJcbiAgICAgICAgY2VudGVyX3g6IDMyMCxcclxuICAgICAgICBjZW50ZXJfeTogMjQwLFxyXG4gICAgICAgIGRpcmU6IDAsXHJcbiAgICAgICAgd2lkdGg6IDEwMCxcclxuICAgICAgICBoZWlnaHQ6IDEwMCxcclxuICAgICAgICB0aGlja25lc3M6IDYsXHJcbiAgICAgICAgd2FsbHM6IFtdIGFzIFdhbGwyW10sXHJcbiAgICAgICAgZHJhdygpIHtcclxuICAgICAgICAgICAgdGhpcy53YWxscy5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd3ggPSBlLmR4ICsgNjQwICogc2luMzYwKGUuZGQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd3kgPSBlLmR5ICsgNjQwICogY29zMzYwKGUuZGQpO1xyXG4gICAgICAgICAgICAgICAgY0xpYi5kcmF3UmVjdCh3eCwgd3ksIDEyODAsIDEyODAsIFwiI2ZmZmZmZlwiLCBlLmRkLCAxLFwiY2VudGVyKytcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLndhbGxzLmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3eCA9IGUuZHggKyA2NDAgKiBzaW4zNjAoZS5kZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3eSA9IGUuZHkgKyA2NDAgKiBjb3MzNjAoZS5kZCk7XHJcbiAgICAgICAgICAgICAgICBjTGliLmRyYXdSZWN0KHd4LCB3eSwgMTI4MCAtIGUud2lkdGggKiAyLCAxMjgwIC0gZS53aWR0aCAqIDIsIFwiIzAwMDAwMFwiLCBlLmRkLDEsIFwiY2VudGVyKytcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAganVkZ2UoKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2FsbHMuZm9yRWFjaChlID0+IHsgZS5qdWRnZSgpIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXBkYXRlKCkge1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gdGhpcy5kaXJlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMuY2VudGVyX3g7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gdGhpcy5jZW50ZXJfeTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdhbGwgPSB0aGlzLndhbGxzWzBdO1xyXG4gICAgICAgICAgICAgICAgd2FsbC5kZCA9IGQ7XHJcbiAgICAgICAgICAgICAgICB3YWxsLmR4ID0geCArICh0aGlzLmhlaWdodCAvIDIpICogc2luMzYwKGQpO1xyXG4gICAgICAgICAgICAgICAgd2FsbC5keSA9IHkgKyAodGhpcy5oZWlnaHQgLyAyKSAqIGNvczM2MChkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gdGhpcy5kaXJlICsgOTA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5jZW50ZXJfeDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLmNlbnRlcl95O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2FsbCA9IHRoaXMud2FsbHNbMV07XHJcbiAgICAgICAgICAgICAgICB3YWxsLmRkID0gZDtcclxuICAgICAgICAgICAgICAgIHdhbGwuZHggPSB4ICsgKHRoaXMuaGVpZ2h0IC8gMikgKiBzaW4zNjAoZCk7XHJcbiAgICAgICAgICAgICAgICB3YWxsLmR5ID0geSArICh0aGlzLmhlaWdodCAvIDIpICogY29zMzYwKGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSB0aGlzLmRpcmUgKyAxODA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5jZW50ZXJfeDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLmNlbnRlcl95O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2FsbCA9IHRoaXMud2FsbHNbMl07XHJcbiAgICAgICAgICAgICAgICB3YWxsLmRkID0gZDtcclxuICAgICAgICAgICAgICAgIHdhbGwuZHggPSB4ICsgKHRoaXMuaGVpZ2h0IC8gMikgKiBzaW4zNjAoZCk7XHJcbiAgICAgICAgICAgICAgICB3YWxsLmR5ID0geSArICh0aGlzLmhlaWdodCAvIDIpICogY29zMzYwKGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSB0aGlzLmRpcmUgKyAyNzA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5jZW50ZXJfeDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLmNlbnRlcl95O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2FsbCA9IHRoaXMud2FsbHNbM107XHJcbiAgICAgICAgICAgICAgICB3YWxsLmRkID0gZDtcclxuICAgICAgICAgICAgICAgIHdhbGwuZHggPSB4ICsgKHRoaXMuaGVpZ2h0IC8gMikgKiBzaW4zNjAoZCk7XHJcbiAgICAgICAgICAgICAgICB3YWxsLmR5ID0geSArICh0aGlzLmhlaWdodCAvIDIpICogY29zMzYwKGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICB0aGlzLndhbGxzLnB1c2gobmV3IFdhbGwyKDAsIDAsIDAsIHRoaXMudGhpY2tuZXNzKSk7XHJcbiAgICAgICAgICAgIHRoaXMud2FsbHMucHVzaChuZXcgV2FsbDIoMCwgMCwgOTAsIHRoaXMudGhpY2tuZXNzKSk7XHJcbiAgICAgICAgICAgIHRoaXMud2FsbHMucHVzaChuZXcgV2FsbDIoMCwgMCwgMTgwLCB0aGlzLnRoaWNrbmVzcykpO1xyXG4gICAgICAgICAgICB0aGlzLndhbGxzLnB1c2gobmV3IFdhbGwyKDAsIDAsIDI3MCwgdGhpcy50aGlja25lc3MpKTtcclxuICAgICAgICB9LFxyXG4gICAgfVxyXG4gICAgYm94LmluaXQoKTtcclxuICAgIHJldHVybiB7IFdhbGwsIGJveCB9O1xyXG59IiwiaW1wb3J0IHsgU3ByaXRlQ2xhc3NULCBTcHJpdGVULCBhTGliVCwgY0xpYlQgfSBmcm9tIFwiLi9saWIvdHlwZXNcIjtcclxuaW1wb3J0IHsgc2luMzYwLCBjb3MzNjAgfSBmcm9tIFwiLi9saWIvdXRpbHNcIjtcclxuaW1wb3J0IHsgRGljdCB9IGZyb20gXCIuL2xpYi91dGlsc1wiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZ2JGbnNHZW4gPSAoY0xpYjogY0xpYlQsIGFMaWI6IGFMaWJULCBTcHJpdGU6IFNwcml0ZUNsYXNzVCwgcGxheWVyOiB7XHJcbiAgICBkYW1hZ2UoYXJnMDogbnVtYmVyKTogdm9pZDsgc291bDogU3ByaXRlVCwgaHA6IG51bWJlclxyXG59KSA9PiB7XHJcbiAgICBsZXQgZ2JEaWN0OiBEaWN0PGFueT4gPSB7fVxyXG4gICAgY2xhc3MgQmxhc3RlciBleHRlbmRzIFNwcml0ZSB7XHJcbiAgICAgICAgcHJpdmF0ZSBzX3g6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIHNfeTogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgc19kOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSB0X3g6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIHRfeTogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgdF9kOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBhZ2U6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIGlkOiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBnYl93aWR0aDogbnVtYmVyO1xyXG4gICAgICAgIHByaXZhdGUgY190OiBudW1iZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBiX3M6IG51bWJlcjtcclxuICAgICAgICBwcml2YXRlIGJfZDogbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHR4OiBudW1iZXIsIHR5OiBudW1iZXIsIHRkOiBudW1iZXIsIGZ4OiBudW1iZXIsIGZ5OiBudW1iZXIsIGZkOiBudW1iZXIsIHNpemU6IG51bWJlciwgd2lkdGg6IG51bWJlciwgY3Q6IG51bWJlciwgYnM6IG51bWJlciwgYmQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICBzdXBlcihmeCwgZnksIGZkLCBzaXplLCBcImdiXzFcIiwgMSx3aWR0aCk7XHJcbiAgICAgICAgICAgIHRoaXMuc194ID0gZng7XHJcbiAgICAgICAgICAgIHRoaXMuc195ID0gZnk7XHJcbiAgICAgICAgICAgIHRoaXMuc19kID0gZmQ7XHJcbiAgICAgICAgICAgIHRoaXMudF94ID0gdHg7XHJcbiAgICAgICAgICAgIHRoaXMudF95ID0gdHk7XHJcbiAgICAgICAgICAgIHRoaXMudF9kID0gdGQ7XHJcbiAgICAgICAgICAgIHRoaXMuY190ID0gY3Q7XHJcbiAgICAgICAgICAgIHRoaXMuYl9zID0gYnM7XHJcbiAgICAgICAgICAgIHRoaXMuYl9kID0gYmQ7XHJcbiAgICAgICAgICAgIHRoaXMuZ2Jfd2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5hZ2UgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gQmxhc3Rlci5jdXJyZW50X2lkO1xyXG4gICAgICAgICAgICBnYkRpY3RbdGhpcy5pZF0gPSB0aGlzO1xyXG4gICAgICAgICAgICBCbGFzdGVyLmN1cnJlbnRfaWQrK1xyXG4gICAgICAgICAgICBhTGliLnBsYXkoXCJnYl9jaGFyZ2VcIiwgMSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBtb3ZlX3NlbGYoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFnZSA8IHRoaXMuY190KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmF0aW8gPSAoKHRoaXMuY190IC0gdGhpcy5hZ2UpICoqIDQpIC8gKHRoaXMuY190ICoqIDQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy54ID0gcmF0aW8gKiB0aGlzLnNfeCArICgxIC0gcmF0aW8pICogdGhpcy50X3g7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgPSByYXRpbyAqIHRoaXMuc195ICsgKDEgLSByYXRpbykgKiB0aGlzLnRfeTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZCA9IHJhdGlvICogdGhpcy5zX2QgKyAoMSAtIHJhdGlvKSAqIHRoaXMudF9kO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWdlID09IHRoaXMuY190KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnggPSB0aGlzLnRfeDtcclxuICAgICAgICAgICAgICAgIHRoaXMueSA9IHRoaXMudF95O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kID0gdGhpcy50X2Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYl9zICsgdGhpcy5jX3QgPD0gdGhpcy5hZ2UgJiYgLTY0MCA8IHRoaXMueCAmJiB0aGlzLnggPCA2NDAgJiYgLTY0MCA8IHRoaXMueSAmJiB0aGlzLnkgPCA2NDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBmYXIgPSAoKHRoaXMuYWdlIC0gKHRoaXMuYl9zICsgdGhpcy5jX3QpKSAqKiAyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMueCA9IHRoaXMudF94O1xyXG4gICAgICAgICAgICAgICAgdGhpcy55ID0gdGhpcy50X3k7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUoZmFyIC8gMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBkcmF3KCkge1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSA0ODAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5iX3MgKyB0aGlzLmNfdCA8IHRoaXMuYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjTGliLmRyYXdSZWN0KFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCArIHNpbjM2MCh0aGlzLmQpICogbGVuIC8gLTIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ICsgY29zMzYwKHRoaXMuZCkgKiBsZW4gLyAtMixcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoICogdGhpcy5zaXplIC8gNSAqICgxICsgc2luMzYwKHRoaXMuYWdlICogMTApICogMC4yKSxcclxuICAgICAgICAgICAgICAgICAgICBsZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ3aGl0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZCArIDE4MCxcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbigodGhpcy5iX2QgKyB0aGlzLmJfcyArIHRoaXMuY190IC0gdGhpcy5hZ2UpIC8gMTUsIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2VudGVyKytcIlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5hZ2UgPT0gdGhpcy5iX3MgKyB0aGlzLmNfdCAtIDIpIHRoaXMuY29zdHVtZSA9IFwiZ2JfMlwiO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hZ2UgPT0gdGhpcy5iX3MgKyB0aGlzLmNfdCAtIDEpIHRoaXMuY29zdHVtZSA9IFwiZ2JfM1wiO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hZ2UgPT0gdGhpcy5iX3MgKyB0aGlzLmNfdCkgdGhpcy5jb3N0dW1lID0gXCJnYl80XCI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJfcyArIHRoaXMuY190IDwgdGhpcy5hZ2UpIHRoaXMuY29zdHVtZSA9IGBnYl8keyh0aGlzLmFnZSAtICh0aGlzLmJfcyArIHRoaXMuY190KSkgJSAyICsgNX1gO1xyXG4gICAgICAgICAgICB0aGlzLnN0YW1wKClcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBqdWRnZSgpIHtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVfeCA9IHBsYXllci5zb3VsLnggLSB0aGlzLng7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWxhdGl2ZV95ID0gcGxheWVyLnNvdWwueSAtIHRoaXMueTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5lZF94ID0gcmVsYXRpdmVfeCAqIGNvczM2MCh0aGlzLmQpICsgcmVsYXRpdmVfeSAqIC1zaW4zNjAodGhpcy5kKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5lZF95ID0gcmVsYXRpdmVfeSAqIGNvczM2MCh0aGlzLmQpICsgcmVsYXRpdmVfeCAqIHNpbjM2MCh0aGlzLmQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYl9zICsgdGhpcy5jX3QgPD0gdGhpcy5hZ2UgJiYgMCA+IHR1cm5lZF95ICYmIHRoaXMuZ2Jfd2lkdGggKiB0aGlzLnNpemUgLyAxMCA+IHR1cm5lZF94ICYmIHR1cm5lZF94ID4gLXRoaXMuZ2Jfd2lkdGggKiB0aGlzLnNpemUgLyAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5kYW1hZ2UoMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgcHJvY2VzcygpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBnYkRpY3QpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdiID0gZ2JEaWN0W2lkXSBhcyBCbGFzdGVyO1xyXG4gICAgICAgICAgICAgICAgZ2IubW92ZV9zZWxmKCk7XHJcbiAgICAgICAgICAgICAgICBnYi5kcmF3KCk7XHJcbiAgICAgICAgICAgICAgICBnYi5qdWRnZSgpO1xyXG4gICAgICAgICAgICAgICAgZ2IuYWdlKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2IuYl9kICsgZ2IuYl9zID09IGdiLmFnZSkgYUxpYi5wbGF5KFwiZ2JfZmlyZVwiLCAxKVxyXG4gICAgICAgICAgICAgICAgaWYgKGdiLmJfZCArIGdiLmJfcyArIGdiLmNfdCA8PSBnYi5hZ2UpIGRlbGV0ZSBnYkRpY3RbaWRdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgY3VycmVudF9pZCA9IDA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9jZXNzID0gKCkgPT4ge1xyXG4gICAgICAgIEJsYXN0ZXIucHJvY2VzcygpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2JEaWN0OiBnYkRpY3QgYXMgRGljdDxCbGFzdGVyPixcclxuICAgICAgICBnYjogQmxhc3RlcixcclxuICAgICAgICBwcm9jZXNzXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBpbml0IH0gZnJvbSBcIi4vbGliL2NvcmVcIjtcclxuaW1wb3J0IHsgQ29yZVQsIFNwcml0ZVQsIFNwcml0ZUNsYXNzVCwgY0xpYlQgfSBmcm9tIFwiLi9saWIvdHlwZXNcIjtcclxuaW1wb3J0IHsgRGljdCwgT3B0LCBzaW4zNjAsIGRpc3RhbmNlLCBjb3MzNjAgfSBmcm9tIFwiLi9saWIvdXRpbHNcIjtcclxuaW1wb3J0IGNvbmZpZyBmcm9tIFwiLi9jb25maWcuanNvblwiO1xyXG5pbXBvcnQgeyBib25lRm5zR2VuIH0gZnJvbSBcIi4vYm9uZVwiO1xyXG5pbXBvcnQgeyBmb250Rm5zR2VuLCBQbGFuZSBhcyBGb250UGxhbmVUIH0gZnJvbSBcIi4vZm9udFwiO1xyXG5pbXBvcnQgeyBCb3hGbnNHZW4gfSBmcm9tIFwiLi9ib3hcIjtcclxuaW1wb3J0IHsgZ2JGbnNHZW4gfSBmcm9tIFwiLi9nYlwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1haW4gPSBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBDb3JlID0gYXdhaXQgaW5pdChjb25maWcpO1xyXG4gICAgbGV0IHNjZW5lID0gXCJtZW51XCI7XHJcbiAgICBjb25zdCBGb250ID0gZm9udEZuc0dlbihDb3JlLmNMaWIsIENvcmUuaW5wdXRLZXlzKTtcclxuICAgIHtcclxuICAgICAgICBsZXQgY3Vyc29yID0gMDtcclxuICAgICAgICBhd2FpdCBDb3JlLndoaWxlKCgpID0+IChzY2VuZSA9PT0gXCJtZW51XCIpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIENvcmUuY3R4LmNsZWFyUmVjdCgwLCAwLCBDb3JlLmNhbnZhcy53aWR0aCwgQ29yZS5jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKENvcmUuaW5wdXRLZXlzLmYudXApIHsgY3Vyc29yLS07IENvcmUuYUxpYi5wbGF5KFwiY3Vyc29yX21vdmVcIikgfVxyXG4gICAgICAgICAgICBpZiAoQ29yZS5pbnB1dEtleXMuZi5kb3duKSB7IGN1cnNvcisrOyBDb3JlLmFMaWIucGxheShcImN1cnNvcl9tb3ZlXCIpIH1cclxuICAgICAgICAgICAgQ29yZS5jTGliLnN0YW1wKFwic291bFwiLCAyMjAsIC1jdXJzb3IgKiA1MCArIDI0MCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IG5ldyBGb250LlBsYW5lKFwiX1wiLCBcInBsYXlcIiwgMjcwLCAyNTAsIDAsIDIwMCwgXCJ5ZWxsb3dcIiwgMCwgMCwgMCwgXCJlblwiKTtcclxuICAgICAgICAgICAgdG1wLndyaXRlKCk7XHJcbiAgICAgICAgICAgIHRtcC5kZWxldGUoKTtcclxuICAgICAgICAgICAgaWYgKENvcmUuaW5wdXRLZXlzLmYueikgeyBzY2VuZSA9IFwiYmF0dGxlXCI7IENvcmUuYUxpYi5wbGF5KFwiY3Vyc29yX2NvbmZpcm1cIikgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbGV0IHRpbWVyID0gMDtcclxuXHJcbiAgICBjb25zdCBwbGF5ZXIgPSB7XHJcbiAgICAgICAgbHY6IDEsXHJcbiAgICAgICAgaHA6IDIwLFxyXG4gICAgICAgIGhwX21heDogMjAsXHJcbiAgICAgICAgc291bDogbmV3IENvcmUuU3ByaXRlKDMyMCwgMjQwLCAwLCA4MCwgXCJzb3VsXCIsIDEsMSksXHJcbiAgICAgICAgZGFtYWdlKGQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICB0aGlzLmhwIC09IGQ7XHJcbiAgICAgICAgICAgIENvcmUuYUxpYi5wbGF5KFwiZGFtYWdlXCIsIDIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ocCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzY2VuZSA9IFwiZ2FtZV9vdmVyXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAge1xyXG4gICAgICAgIHRpbWVyID0gMDtcclxuICAgICAgICBjb25zdCBCbGFzdGVyID0gZ2JGbnNHZW4oQ29yZS5jTGliLCBDb3JlLmFMaWIsIENvcmUuU3ByaXRlLCBwbGF5ZXIpO1xyXG4gICAgICAgIGNvbnN0IEJvbmUgPSBib25lRm5zR2VuKENvcmUuY0xpYiwgQ29yZS5hTGliLCBDb3JlLlNwcml0ZSwgcGxheWVyKTtcclxuICAgICAgICBjb25zdCBCb3ggPSBCb3hGbnNHZW4oQ29yZS5jTGliLCBwbGF5ZXIuc291bCk7XHJcbiAgICAgICAgY29uc3QgYm94ID0gQm94LmJveDtcclxuICAgICAgICBjb25zdCBocF9iYXIgPSBocF9iYXJfZ2VuKENvcmUuY0xpYiwgRm9udC5QbGFuZSwgcGxheWVyKTtcclxuICAgICAgICAvL2NvbnN0IHRlc3QgPSBuZXcgRm9udC5QbGFuZShcInRlc3RcIiwgXCJIZWxsbywgd29ybGQhXCIsIDYwLCAxODAsIDAsIDQwMCwgXCJ3aGl0ZVwiLCAwLCAwLCA1LCBcImVuXCIpO1xyXG4gICAgICAgIC8vY29uc3QgdGVzdF9iID0gbmV3IEJvbmUubm9ybWFsKDMwMCwgMjAwLCA5MCwgMjAsIDI1MCwgMCwgMCwgMiwgMCwgSW5maW5pdHkpO1xyXG4gICAgICAgIGNvbnN0IHRlc3RfZ2IgPSBuZXcgQmxhc3Rlci5nYigxMDAsIDIwMCwgMCwgNDAwLCA2MDAsIDkwLCAxMDAsIDIsIDYwLCA2MCwgNjApO1xyXG4gICAgICAgIGF3YWl0IENvcmUud2hpbGUoKCkgPT4gKHNjZW5lID09PSBcImJhdHRsZVwiKSwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aW1lcisrO1xyXG4gICAgICAgICAgICBDb3JlLmN0eC5jbGVhclJlY3QoMCwgMCwgQ29yZS5jYW52YXMud2lkdGgsIENvcmUuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmIChDb3JlLmlucHV0S2V5cy51cCkgcGxheWVyLnNvdWwueSArPSAzLjU7XHJcbiAgICAgICAgICAgIGlmIChDb3JlLmlucHV0S2V5cy5kb3duKSBwbGF5ZXIuc291bC55IC09IDMuNTtcclxuICAgICAgICAgICAgaWYgKENvcmUuaW5wdXRLZXlzLnJpZ2h0KSBwbGF5ZXIuc291bC54ICs9IDMuNTtcclxuICAgICAgICAgICAgaWYgKENvcmUuaW5wdXRLZXlzLmxlZnQpIHBsYXllci5zb3VsLnggLT0gMy41O1xyXG4gICAgICAgICAgICAvL2JveC5qdWRnZSgpO1xyXG4gICAgICAgICAgICAvL2JveC51cGRhdGUoKTtcclxuICAgICAgICAgICAgQm9uZS5wcm9jZXNzKCk7XHJcbiAgICAgICAgICAgIC8vYm94LmRyYXcoKTtcclxuICAgICAgICAgICAgQmxhc3Rlci5wcm9jZXNzKCk7XHJcbiAgICAgICAgICAgIEZvbnQucHJvY2VzcygpO1xyXG4gICAgICAgICAgICAvL3Rlc3Qud3JpdGUoKTtcclxuICAgICAgICAgICAgaHBfYmFyKCk7XHJcbiAgICAgICAgICAgIHBsYXllci5zb3VsLnN0YW1wKCk7XHJcbiAgICAgICAgICAgIENvcmUuY0xpYi5zdGFtcChcImJhY2tcIiwgMzIwLCAyNDAsIDAsIDEwMCwgMC4yKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHtcclxuICAgICAgICB0aW1lciA9IDA7XHJcbiAgICAgICAgbGV0IGJyb2tlbl9oZWFydHM6IFNwcml0ZVRbXSA9IFtdO1xyXG4gICAgICAgIGF3YWl0IENvcmUud2hpbGUoKCkgPT4gKHNjZW5lID09PSBcImdhbWVfb3ZlclwiKSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBDb3JlLmN0eC5jbGVhclJlY3QoMCwgMCwgQ29yZS5jYW52YXMud2lkdGgsIENvcmUuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmICh0aW1lciA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBDb3JlLmFMaWIucGxheShcImhlYXJ0YnJlYWtfMVwiLCAyKVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVyIDwgNjApIHtcclxuICAgICAgICAgICAgICAgIENvcmUuY0xpYi5zdGFtcChcImRlYXRoXzBcIiwgcGxheWVyLnNvdWwueCwgcGxheWVyLnNvdWwueSwgMCwgODApXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZXIgPT0gNjApIHtcclxuICAgICAgICAgICAgICAgIENvcmUuYUxpYi5wbGF5KFwiaGVhcnRicmVha18yXCIsIDIpXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB4cyA9IE1hdGgucmFuZG9tKCkgKiAxMiAtIDY7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHlzID0gTWF0aC5yYW5kb20oKSAqIDggKyA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyb2tlbl9oZWFydHMucHVzaChuZXcgQ29yZS5TcHJpdGUocGxheWVyLnNvdWwueCwgcGxheWVyLnNvdWwueSwgTWF0aC5yYW5kb20oKSAqIDM2MCwgODAsIGBkZWF0aF8ke2kgKyAxfWAsIDEsMSwgKHNlbGYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi54ICs9IHhzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnkgKz0geXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZCArPSB4cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgeXMgLT0gMC4zMzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoNjAgPCB0aW1lciAmJiB0aW1lciA8IDE4MCkge1xyXG4gICAgICAgICAgICAgICAgYnJva2VuX2hlYXJ0cy5mb3JFYWNoKHMgPT4gcy5hY3QoKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZXIgPT0gMTgwKSB7XHJcbiAgICAgICAgICAgICAgICBzY2VuZSA9IFwid2FpdGluZ1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRpbWVyKys7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IGhwX2Jhcl9nZW4gPSAoY0xpYjogY0xpYlQsIEZvbnQ6IEZvbnRQbGFuZVQsIHBsYXllcjogeyBocDogbnVtYmVyLCBocF9tYXg6IG51bWJlciwgbHY6IG51bWJlciB9KSA9PiAoKSA9PiB7XHJcbiAgICBjb25zdCB0bXAxID0gbmV3IEZvbnQoXCJfXCIsIFwiY2hhcmFcIiwgMzIsIDc1LCAwLCAzMDAsIFwid2hpdGVcIiwgMCwgMCwgMCwgXCJzdGF0dXNcIik7XHJcbiAgICB0bXAxLndyaXRlKCk7XHJcbiAgICB0bXAxLmRlbGV0ZSgpO1xyXG4gICAgY29uc3QgdG1wMiA9IG5ldyBGb250KFwiX1wiLCBcImxWXCIsIDEzNCwgNzUsIDAsIDMwMCwgXCJ3aGl0ZVwiLCAwLCAwLCAwLCBcInN0YXR1c1wiKTtcclxuICAgIHRtcDIud3JpdGUoKTtcclxuICAgIHRtcDIuZGVsZXRlKCk7XHJcbiAgICBjb25zdCB0bXAzID0gbmV3IEZvbnQoXCJfXCIsIGAkeygnMDAnICsgcGxheWVyLmx2KS5zbGljZSgtMil9YCwgMTczLCA3NSwgMCwgMzAwLCBcIndoaXRlXCIsIDAsIDAsIDAsIFwic3RhdHVzXCIpO1xyXG4gICAgdG1wMy53cml0ZSgpO1xyXG4gICAgdG1wMy5kZWxldGUoKTtcclxuICAgIGNvbnN0IHRtcDQgPSBuZXcgRm9udChcIl9cIiwgYCR7KCcwMCcgKyBwbGF5ZXIuaHApLnNsaWNlKC0yKX1gLCBwbGF5ZXIuaHBfbWF4ICogMS4yICsgMzA2LCA3NywgMCwgMzAwLCBcIndoaXRlXCIsIDAsIDAsIDAsIFwic3RhdHVzXCIpO1xyXG4gICAgdG1wNC53cml0ZSgpO1xyXG4gICAgdG1wNC5kZWxldGUoKTtcclxuICAgIGNvbnN0IHRtcDUgPSBuZXcgRm9udChcIl9cIiwgXCIvXCIsIHBsYXllci5ocF9tYXggKiAxLjIgKyAzNDUsIDc3LCAwLCAzMDAsIFwid2hpdGVcIiwgMCwgMCwgMCwgXCJzdGF0dXNcIik7XHJcbiAgICB0bXA1LndyaXRlKCk7XHJcbiAgICB0bXA1LmRlbGV0ZSgpO1xyXG4gICAgY29uc3QgdG1wNiA9IG5ldyBGb250KFwiX1wiLCBgJHsoJzAwJyArIHBsYXllci5ocF9tYXgpLnNsaWNlKC0yKX1gLCBwbGF5ZXIuaHBfbWF4ICogMS4yICsgMzY5LCA3NywgMCwgMzAwLCBcIndoaXRlXCIsIDAsIDAsIDAsIFwic3RhdHVzXCIpO1xyXG4gICAgdG1wNi53cml0ZSgpO1xyXG4gICAgdG1wNi5kZWxldGUoKTtcclxuICAgIGNMaWIuZHJhd1JlY3QoMjU2LCA1OSwgcGxheWVyLmhwX21heCAqIDEuMiwgMjEsIFwicmVkXCIsIDAsIDEsIFwic3RhcnRcIik7XHJcbiAgICBjTGliLmRyYXdSZWN0KDI1NiwgNTksIHBsYXllci5ocCAqIDEuMiwgMjEsIFwieWVsbG93XCIsIDAsIDEsIFwic3RhcnRcIik7XHJcbiAgICBjTGliLnN0YW1wKFwiaHBfd2hpdGVcIiwgMjI0LCA3NCwgMCwgMTAwLCAxLCBcInN0YXJ0XCIpO1xyXG4gICAgY0xpYi5zdGFtcChcImtyX3doaXRlXCIsIHBsYXllci5ocF9tYXggKiAxLjIgKyAyNjcsIDc0LCAwLCAxMDAsIDEsIFwic3RhcnRcIik7XHJcbn07IiwiaW1wb3J0IHsgbWFpbiBhcyBnYW1lIH0gZnJvbSBcIi4vZ2FtZVwiO1xyXG53aW5kb3cub25sb2FkID0gZ2FtZTsiXSwibmFtZXMiOlsiZnJhbWVMaWJHZW4iLCJiX3RpY2siLCJhX3RpY2siLCJmVyIsImNvbmRpdGlvbiIsInByb2MiLCJyZXNvbHZlIiwiZnJhbWVXaGlsZSIsImZGIiwiaSIsImZyYW1lRm9yIiwiZnJhbWVMb29wIiwibG9hZEFzc2V0cyIsImF1ZGlvQ29udGV4dCIsIkltYWdlcyIsIkF1ZGlvcyIsIkZvbnRzIiwiaW5kZXgiLCJqc29uIiwicHJvbWlzZXMiLCJlIiwiaW1hZ2UiLCJhdWRpbyIsImF1ZGlvRGF0YSIsIm1hdGNoVXJscyIsInByb21pc2VzX3N1YiIsImYiLCJmb250Iiwic2luMzYwIiwiZCIsImNvczM2MCIsIkNhbnZhc0xpYkdlbiIsImNhbnZhcyIsImN0eCIsImNvbmZpZyIsInByb3BzIiwic3RhbXAiLCJuYW1lIiwiZHgiLCJkeSIsImRkIiwic2l6ZSIsImFscGhhIiwiYWxpZ24iLCJleF93aWR0aCIsImJveCIsImFic29sdXRlIiwiY29zdHVtZSIsInN4Iiwic3kiLCJzdyIsInNoIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImNvbG9yIiwiZGlyZWN0aW9uIiwidHlwZSIsImx4IiwibHkiLCJsZW4iLCJ0eCIsIlNwcml0ZUxpYkdlbiIsImNMaWIiLCJTcHJpdGUiLCJhY3QiLCJmYXIiLCJQb3NpdGlvbkxpYkdlbiIsInJ4IiwicnkiLCJyZCIsInJlY3QiLCJBdWRpb0xpYkdlbiIsImRlbGF5IiwiZ2FpbiIsImdhaW5Ob2RlIiwic291cmNlIiwibiIsImluaXQiLCJpbnB1dEtleXMiLCJpbnB1dE1vdXNlIiwidyIsImgiLCJhTGliIiwicExpYiIsInAiLCJiayIsImJvbmVGbnNHZW4iLCJwbGF5ZXIiLCJib25lRGljdCIsIl9ub3JtYWxCb25lIiwibXgiLCJteSIsIm1kIiwibWwiLCJsaWZlIiwicmVsYXRpdmVfeCIsInJlbGF0aXZlX3kiLCJ0dXJuZWRfeCIsInR1cm5lZF95IiwiaWQiLCJib25lIiwibW92ZSIsImFnZSIsIm5vcm1hbEJvbmUiLCJmb250Rm5zR2VuIiwiZm9udERhdGEiLCJmb250RGF0YUVuIiwiZm9udERhdGFTdGF0dXMiLCJkaXNwbGF5RGljdCIsIkZvbnQiLCJTdXBlciIsImlucHV0IiwiYSIsImMiLCJpbnB1dF9zdHJfbGVuZ3RoIiwiY291bnQiLCJjaGFyRGF0YWYiLCJjaGFyRGF0YSIsIlBsYW5lIiwic3RyIiwic3BhY2luZ194Iiwic3BhY2luZ195Iiwic3BlZWQiLCJjaGFycyIsIkJveEZuc0dlbiIsInNvdWwiLCJXYWxsIiwicmVsYXRpdmUiLCJyZXR1cm5lZF94IiwicmV0dXJuZWRfeSIsIldhbGwyIiwid3giLCJ3eSIsIndhbGwiLCJnYkZuc0dlbiIsImdiRGljdCIsIl9CbGFzdGVyIiwidHkiLCJ0ZCIsImZ4IiwiZnkiLCJmZCIsImN0IiwiYnMiLCJiZCIsInJhdGlvIiwiZ2IiLCJCbGFzdGVyIiwibWFpbiIsIkNvcmUiLCJzY2VuZSIsImN1cnNvciIsInRtcCIsInRpbWVyIiwiQm9uZSIsImhwX2JhciIsImhwX2Jhcl9nZW4iLCJicm9rZW5faGVhcnRzIiwieHMiLCJ5cyIsInNlbGYiLCJzIiwidG1wMSIsInRtcDIiLCJ0bXAzIiwidG1wNCIsInRtcDUiLCJ0bXA2IiwiZ2FtZSJdLCJtYXBwaW5ncyI6IkFBR2EsTUFBQUEsRUFBYyxDQUFDQyxFQUFnQkMsSUFBb0IsQ0FDNUQsTUFBTUMsRUFBSyxDQUFDQyxFQUEwQkMsRUFBa0JDLElBQXdCLENBQ3hFRixLQUFzQkgsSUFBUUksSUFBVUgsSUFBRyxzQkFBc0IsSUFBTUMsRUFBR0MsRUFBV0MsRUFBTUMsQ0FBTyxDQUFDLEdBQWtCQSxHQUFDLEVBRXhIQyxFQUFhLENBQUNILEVBQTBCQyxJQUNuQyxJQUFJLFFBQVNDLEdBQVksQ0FDekJILEVBQUFDLEVBQVdDLEVBQU1DLENBQU8sQ0FBQSxDQUM5QixFQUVDRSxFQUFLLENBQUNKLEVBQW1CQyxFQUE2QkksRUFBV0gsSUFBd0IsQ0FDdkZHLEVBQUlMLEdBQW9CSCxJQUFHSSxFQUFLSSxDQUFDLEVBQVVQLElBQUcsc0JBQXNCLElBQU1NLEVBQUdKLEVBQVdDLEVBQU1JLEVBQUksRUFBR0gsQ0FBTyxDQUFDLEdBQWtCQSxHQUFDLEVBRWxJSSxFQUFXLENBQUNOLEVBQW1CQyxFQUE2QkksRUFBWSxJQUNuRSxJQUFJLFFBQVNI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
